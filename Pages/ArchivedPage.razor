@page "/Archived"

@using DevExpress.Data.Filtering
@using DevExpress.Xpo
@using LAGem_POPortal.Authentication
@using DevExpress.Blazor
@using LAGem_POPortal.Data
@using LAGem_POPortal.Models
@using Microsoft.EntityFrameworkCore 
@using Newtonsoft.Json
@using System.Drawing

@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@* @inject UserAccountService userAccountService *@

@implements IDisposable

<AuthorizeView>
    <Authorized Context="Authorized">
        @* <div hidden="!@HiddenGrid">
            <a href="/login">@HeaderMessage</a>
        </div> *@

        <DxPopup @bind-Visible="@PopupVisible"
                 AllowDrag="true"
                 AllowDragByHeaderOnly="allowDragByHeaderOnly"
                 ShowFooter="true"
                 CloseOnEscape="false"
                 CloseOnOutsideClick="false"
                 ShowCloseButton="false"
                 HeaderText="@popupTitleText"
                 BodyText="@popupBodyText"
                 PositionX="positionX"
                 PositionY="positionY"
                 DragCompleted="OnPopupDragCompleted">
            <FooterContentTemplate Context="Context">
                <div class="popup-demo-events-footer">
                    <DxButton CssClass="popup-demo-events-button ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="@popupOkButtonText" Click="OkPopupClick" />
                    <DxButton CssClass="popup-demo-events-button ms-2" RenderStyle="ButtonRenderStyle.Secondary" Visible="@isPopupCancelButtonVisible" Text="@popupCancelButtonText" Click="CancelPopupClick" />
                </div>
            </FooterContentTemplate>
        </DxPopup>

        @* <div hidden="@HiddenGrid"> *@
        <div>
            <DxGrid @ref="OrdersHeaderGrid"
                    Data="OrdersHeaderGridData"
                    KeyFieldName="Id"
                    PagerPosition="GridPagerPosition.Bottom"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25, 50, 75, 100 })"
                    PageSizeSelectorAllRowsItemVisible="true"
                    @bind-PageIndex="@ActivePageIndex"
                    PageSize="@PageSize"
                    ShowAllRows="@ShowAllRows"
                    AutoCollapseDetailRow="@AutoCollapseDetailRow"
                    AutoExpandAllGroupRows="@AutoExpandAllGroupRows"
                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                    EditMode="@CurrentEditMode"
                    PopupEditFormHeaderText="@mainGridEditFormHeaderText"
                    PopupEditFormCssClass="my-popup-style"
                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                    FooterDisplayMode="GridFooterDisplayMode.Auto"
                    SelectAllCheckboxMode="CurrentSelectAllCheckboxMode"
                    SelectedDataItems="@SelectedDataItems"
                    SelectedDataItemsChanged="@((IReadOnlyList<object> selectedItems) => OnSelectedDataItemsChanged(selectedItems))"
                    ShowGroupPanel="@ShowGroupPanel"
                    ShowSearchBox="@ShowSearchBox"
                    SearchText=""
                    SearchTextParseMode="CurrentSearchTextParseMode"
                    CustomizeElement="Grid_CustomizeElement"
                    CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                    EditModelSaving="MainGrid_EditModelSaving"
                    DataItemDeleting="MainGridDataItemDeleting"
                    CustomizeEditModel="MainGrid_CustomizeEditModel"
                    HighlightRowOnHover="true"
                    TextWrapEnabled="false"
                    ValidationEnabled="false">
                <Columns>
                    <DxGridDataColumn FieldName="ShipYear" Caption="SO Ship Year" DisplayFormat="0" ReadOnly="true" SortOrder="GridColumnSortOrder.Descending" />
                    @* <DxGridDataColumn FieldName="ShipYear" Caption="SO Ship Year" DisplayFormat="0" ReadOnly="true" SortOrder="GridColumnSortOrder.Descending" /> *@
                    <DxGridDataColumn FieldName="ShipWeek" Caption="SO Ship Week" DisplayFormat="n0" ReadOnly="true" SortOrder="GridColumnSortOrder.Descending" Visible="false" />
                    <DxGridDataColumn FieldName="MondayOfTheWeek" Caption="Monday Of The Week" ReadOnly="true" SortOrder="GridColumnSortOrder.Descending" />
                    <DxGridDataColumn FieldName="CustomerName" Caption="Customer Name" ReadOnly="true" />

                    <DxGridCommandColumn Context="CustomerPOContext" Width="45px">
                        <HeaderTemplate>
                            <DxButton IconCssClass="grid-icon grid-icon-new" RenderStyle="ButtonRenderStyle.Link" aria-label="Add" />
                        </HeaderTemplate>
                        <CellDisplayTemplate>
                            <div class="grid-cell-align-center">
                                <DxButton IconCssClass="grid-icon grid-icon-add"
                                          RenderStyle="ButtonRenderStyle.Link" aria-label="Add"
                                          Click="@(() => {
                                                var order = (SoEdiData)CustomerPOContext.DataItem;

                                                if (order.SOHeaderId >= 1000000){ //if (order.EdiHdrId >= 1000000000){
                                                    isBlankOrder = true;
                                                    mainGridEditFormHeaderText = "Auto Forecast Order";
                                                    LinkCustomerPOClick((SoEdiData)CustomerPOContext.DataItem, "BlankOrder");
                                                }
                                                else
                                                {
                                                    isBlankOrder = false;
                                                    mainGridEditFormHeaderText = "Link Order";
                                                    LinkCustomerPOClick((SoEdiData)CustomerPOContext.DataItem, "SOOrder");
                                                }
                                            })" />
                            </div>
                        </CellDisplayTemplate>
                    </DxGridCommandColumn>

                    <DxGridDataColumn FieldName="CustomerPO" Caption="Customer PO" ReadOnly="true" />
                    <DxGridDataColumn FieldName="Description" Caption="Description" ReadOnly="false" />
                    <DxGridDataColumn FieldName="SONumber" Caption="SO Number" ReadOnly="!isBlankOrder" />
                    <DxGridDataColumn FieldName="StartDate" Caption="Ship Date" DisplayFormat="d" ReadOnly="!isBlankOrder"/>
                    <DxGridDataColumn FieldName="EndDate" Caption="Cancel Date" DisplayFormat="d" ReadOnly="!isBlankOrder"/>
                    <DxGridDataColumn FieldName="ShipWindow" Caption="Ship Window" DisplayFormat="d" ReadOnly="false" Visible="false" />
                    
                    <DxGridDataColumn FieldName="OrderQty" Caption="Order Qty" DisplayFormat="n0" ReadOnly="!isBlankOrder" />
                    @* <DxGridDataColumn FieldName="SORetail" Caption="Price" DisplayFormat="n3" ReadOnly="true" />
                    <DxGridDataColumn FieldName="ShipmentQty" Caption="Shipment Qty" DisplayFormat="n0" ReadOnly="true" />
                    <DxGridDataColumn FieldName="PONumber" Caption="PO Numbers" ReadOnly="true" /> *@
                    @* <DxGridDataColumn FieldName="TrackingNumber" Caption="Tracking Numbers" ReadOnly="true" /> *@

                    <DxGridDataColumn FieldName="Price" Caption="Price" DisplayFormat="n2" ReadOnly="!isBlankOrder" />
                    
                    <DxGridDataColumn FieldName="IntransitUnits" Caption="Intransit Units" DisplayFormat="n0" ReadOnly="true" />

                    <DxGridDataColumn FieldName="QBSO" Caption="QB SO" ReadOnly="false" />
                    <DxGridDataColumn FieldName="Comments" Caption="Comments" ReadOnly="false" />
                    <DxGridDataColumn FieldName="PONumber" Caption="PO Numbers" ReadOnly="!isBlankOrder" />
                    <DxGridDataColumn FieldName="IsItemLinked" Caption="Is Linked" MinWidth="60" Width="65" ReadOnly="true" Visible="false" />

                    <DxGridCommandColumn Context="OrdersHeaderGridContext" Width="70px" Visible="false" >
                        <HeaderTemplate>
                            <DxButton RenderStyle="ButtonRenderStyle.Link" Text="Auto Forecast"
                                      Click="@(() => {
                                                isBlankOrder = true;
                                                mainGridEditFormHeaderText = "Auto Forecast Order";
                                                OrdersHeaderGrid.StartEditNewRowAsync();
                                             })" />
                        </HeaderTemplate>
                        <CellDisplayTemplate>
                            @if (((System.Boolean)OrdersHeaderGridContext.GetRowValue("IsItemLinked")) == true || ((int)OrdersHeaderGridContext.GetRowValue("EdiHdrId") > 0))
                            {
                                <div class="grid-cell-align-center">
                                    <DxButton RenderStyle="ButtonRenderStyle.Link" Text="Edit"
                                        Click="@(() => {
                                                isBlankOrder = false;
                                                OrdersHeaderGrid.StartEditRowAsync(OrdersHeaderGridContext.VisibleIndex);
                                                mainGridEditFormHeaderText = "EDI Order Edit";
                                            })">Edit</DxButton>
                                </div>                              
                            }
                            else 
                            {  

                                if ((int)OrdersHeaderGridContext.GetRowValue("SOHeaderId") > 1000000){
                                           <div class="grid-cell-align-center">
                                    <DxButton RenderStyle="ButtonRenderStyle.Link" Text="Edit"
                                              Click="@(() => {
                                                isBlankOrder = false;
                                                OrdersHeaderGrid.StartEditRowAsync(OrdersHeaderGridContext.VisibleIndex);
                                                mainGridEditFormHeaderText = "Auto Forecast Order Edit";
                                            })">Edit</DxButton>
                                </div>
                                }
                                else{
                                    <div class="grid-cell-align-center">
                                        <DxButton RenderStyle="ButtonRenderStyle.Link" Text="Edit"
                                                  Click="@(() => {
                                                isBlankOrder = false;
                                                OrdersHeaderGrid.StartEditRowAsync(OrdersHeaderGridContext.VisibleIndex);
                                                mainGridEditFormHeaderText = "SO Order Edit";
                                            })">Edit</DxButton>
                                    </div>
                                }                         
                            }
                        </CellDisplayTemplate>
                    </DxGridCommandColumn>

                    <DxGridDataColumn FieldName="Archived" Caption="Un Archive" MinWidth="60" Width="65" ReadOnly="false" Visible="false" />
                    <DxGridSelectionColumn Width="75px">
                        <HeaderTemplate>
                            <text>Archive</text>
                        </HeaderTemplate>
                    </DxGridSelectionColumn>
                </Columns>
                <DataColumnGroupRowTemplate>
                    @if (@context.GroupValueDisplayText.Contains("1900")){
                        <text>Auto</text>
                    }
                    else
                    {
                        <text>@context.ColumnCaption: @context.GroupValueDisplayText</text>
                    }
                </DataColumnGroupRowTemplate>
            </DxGrid>
        </div>

    </Authorized>
    <NotAuthorized Context="NotAuthorized">
        @*  @{ navManager.NavigateTo("/Login");} *@
        <h3>Please <a href="/login">Login</a> to access the Portal</h3>
        @* <LoginPage /> *@
        @* <LoginRedirect /> *@
    </NotAuthorized>
</AuthorizeView>

<div class="pager-container">
    @* <DxPager PageCount="@PageCount" @bind-ActivePageIndex="@ActivePageIndex" /> *@
    @* <div>
    Total: @TotalRecords records
    </div> *@
</div>

<style>
    .highlighted-item > td {
        background-color: rgba(245, 198, 203, 0.5);
    }

    .grid-textbox-style {
        /* border: 1px solid darkorchid;
        border-radius: 3px; */
        background: transparent;
        margin: 0px;
        border: 0px solid transparent;
        border-radius: 0px;

        border-top: medium none;
        border-bottom: medium none;
        border-left: medium none;
        border-right: medium none;
    }

    .highlighted-item > td {
        background-color: rgba(245, 198, 203, 0.5);
    }

    .dx-datagrid-headers {
        white-space: normal;
    }

    .dx-datagrid-nowrap.dx-datagrid-headers .dx-header-row > td > .dx-datagrid-text-content {
        white-space: normal;
    }

    .dxbl-grid .dxbl-grid-table > thead > tr > th > .dxbl-grid-header-content > span{
        white-space: normal;
    }

    .hide-toolbar .dxbl-grid-toolbar-container {
        display: none;
    }

    .my-popup-style {
        min-width: 800px;
        min-height: 300px;
    }

    .my-partnertasks-grid .dxbl-fl-ctrl dxbl-fl-ctrl-nc {
        margin-top: 0px;
    }

    .fl > div {
        margin-top: 0 !important;
    }

</style>

@code {
    // ============================================================ \\

    #region Variables

    // ------------------------------------------------------------ \\

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    string currentUser { get; set; } = "";

    IGrid OrdersHeaderGrid { get; set; }
    IGrid OrdersDetailEDIGrid { get; set; }
    IGrid OrdersDetailJewelryGrid { get; set; }
    IGrid OrdersDetailPackagingGrid { get; set; }
    IEnumerable<SoEdiData> OrdersHeaderGridData { get; set; }           // Main grid data (SO/EDI)
    IEnumerable<SoEdiData> EDIOrdersDetailGridData { get; set; }        // EDI Detail grid data

    IEnumerable<CustomerSoPoData> SOOrdersDetailGridData { get; set; }  // SO Orders Detail grid data
    IEnumerable<CustomerSoPoData> EdiOrderDetailGridJewelryData { get; set; }
    IEnumerable<CustomerSoPoData> EdiOrderDetailGridPackagingData { get; set; }

    DxGrid LinkEdiOrderDetailGrid { get; set; }
    DxGrid LinkSOOrderDetailGrid { get; set; }
    //IEnumerable<EdiOrderDetailData> LinkEdiOrderDetailGridData { get; set; }
    IEnumerable<SoEdiData> LinkEdiOrderDetailGridData { get; set; }
    IEnumerable<CustomerSoPoData> LinkSOOrderDetailGridData { get; set; }

    DxGrid EdiOrderHeaderGrid { get; set; } // No longer used
    DxGrid EdiOrderDetailGrid { get; set; } // No longer used
    IEnumerable<EdiOrderDetailData> EdiOrderHeaderGridData { get; set; } // No longer used
    IEnumerable<EdiOrderDetailData> EdiOrderDetailGridData { get; set; } // No longer used

    DxGrid TasksMainGrid { get; set; }
    DxGrid TasksDetailGrid { get; set; }
    IEnumerable<TaskQueue> TasksMainGridData { get; set; }
    IEnumerable<TaskQueue> TasksDetailGridData { get; set; }

    DxGrid TestsMainGrid { get; set; }
    IEnumerable<ProductTest> TestsMainGridData { get; set; }

    // ------------------------------------------------------------ \\

    int PageSize { get; set; } = 100;
    int ActivePageIndex { get; set; } = 0;
    int PageCount { get; set; } = 0;
    int TotalRecords { get; set; } = 0;
    bool ShowAllRows { get; set; } = true;

    bool ShowSearchBox { get; set; } = true;
    bool AutoCollapseDetailRow { get; set; } = true;
    bool AutoExpandAllGroupRows { get; set; } = true;

    bool TextWrapEnabled = true;
    bool WordWrapEnabled = false;

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    Dictionary<string, GridSearchTextParseMode> SearchTextParseModes { get; } = new Dictionary<string, GridSearchTextParseMode>{
        { "Group Words By And", GridSearchTextParseMode.GroupWordsByAnd },
        { "Group Words By Or", GridSearchTextParseMode.GroupWordsByOr },
        { "Exact Match", GridSearchTextParseMode.ExactMatch }
    };
    void ChangeSearchMode(string key)
    {
        CurrentSearchTextParseModeDisplayText = key;
        CurrentSearchTextParseMode = SearchTextParseModes[key];
    }
    string CurrentSearchTextParseModeDisplayText { get; set; } = "Group Words By And";
    GridSearchTextParseMode CurrentSearchTextParseMode { get; set; } = GridSearchTextParseMode.GroupWordsByAnd;

    GridColumnResizeMode CurrentColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer; // GridColumnResizeMode.NextColumn;
    string CurrentColumnResizeModeDisplayText { get; set; } = "Next Column";
    Dictionary<string, GridColumnResizeMode> GridColumnResizeModes { get; } = new Dictionary<string,
    GridColumnResizeMode>{
        { "Disabled", GridColumnResizeMode.Disabled },                  //A user cannot resize columns.
        { "Next Column", GridColumnResizeMode.NextColumn },             //When a user resizes a column, the width of the column to the right changes, but the Grid's total width does not change.
        { "Columns Container", GridColumnResizeMode.ColumnsContainer }  //When a user resizes a column, all other columns retain width settings, but the width of the entire column container changes proportionally.
    };
    void ChangeResizeMode(string key)
    {
        CurrentColumnResizeModeDisplayText = key;
        CurrentColumnResizeMode = GridColumnResizeModes[key];
    }
    bool usePopupEditForm { get; set; } = true;
    GridEditMode CurrentEditMode { get { return usePopupEditForm ? GridEditMode.PopupEditForm : GridEditMode.EditForm; } } // GridEditMode.EditRow
    string mainGridEditFormHeaderText { get; set; } = "EDI Edit";

    bool ShowGroupPanel { get; set; } = true;
    Dictionary<string, string[]> GroupInfo { get; } = new Dictionary<string, string[]> {
        { "ShipYear", new string[] { "ShipYear" } },
        { "ShipYear, MondayOfTheWeek", new string[] { "ShipYear", "MondayOfTheWeek" } }
    };
    string CurrentGroupInfoKey { get; set; } = "SOShipYear";

    bool showToolbar { get; set; } = false;
    //string gridCss => !showToolbar ? "hide-toolbar my-partnertasks-grid" : "my-partnertasks-grid";
    string gridCss => "hide-toolbar my-partnertasks-grid";
    DateTime blankDate { get; set; } = new DateTime(1800, 1, 1);
    int ActiveTabIndex { get; set; } = 1;

    IReadOnlyList<object> SelectedDataItems { get; set; } // Items Selected in Edit Form
    IReadOnlyList<object> SelectedDataPOListGridItems { get; set; }
    IEnumerable<GridSelectAllCheckboxMode> SelectAllCheckboxModes { get; } = Enum.GetValues<GridSelectAllCheckboxMode>();
    GridSelectAllCheckboxMode CurrentSelectAllCheckboxMode { get; set; }

    // ------------------------------------------------------------ \\

    bool PopupVisible { get; set; } = false;
    const string LocalStorageKey = "DialogsAndWindows-Popup-Dragging";
    int? positionX, positionY;
    bool allowDragByHeaderOnly = true;

    string popupOkButtonText { get; set; } = "Ok";
    string popupCancelButtonText { get; set; } = "Cancel";
    bool isPopupCancelButtonVisible { get; set; } = false;

    string popupTitleText { get; set; } = "Notification";
    string popupBodyText { get; set; } = "Sample Popup Message";

    string callbackProcessName { get; set; } = null;

    // ------------------------------------------------------------ \\

    DxWindow windowRefPOSearch;
    bool windowRefPOSearchVisible { get; set; } = false;

    DxWindow windowRefLinking;
    bool windowRefLinkingVisible { get; set; } = false;

    ElementReference popupTarget;
    string searchTitleText { get; set; } = "Search";
    string GetButtonText() => !windowRefLinkingVisible ? "SHOW A WINDOW" : "CLOSE A WINDOW";
    bool displayPopupGrid { get; set; } = true;
    string linkingItemText { get; set; } = "";

    // ------------------------------------------------------------ \\

    CriteriaOperator criteriaOrderOperator { get; set; }
    CriteriaOperator criteriaPackagingOperator { get; set; }

    IEnumerable<BusinessPartner> BusinessPartnerListData { get; set; }
    List<Lookup> partnerList { get; set; }
    int businessPartnerIdSelected { get; set; } = 0;

    string headerNote { get; set; } = "";
    SoEdiData selectedRow { get; set; } // main row selected
    SoEdiData linkingRow { get; set; } // detail row
    SoEdiData unLinkingRow { get; set; } // detail row
    EdiOrderDetailData selectedEdiRow { get; set; }

    SoEdiData linkingSoEdiDataItem { get; set; }
    CustomerSoPoData linkingCustomerSoPoDataItem { get; set; }

    bool isBlankOrder { get; set; } = false;

    string selectedSono { get; set; } = "";
    string selectedEdiPO { get; set; } = "";

    DxTextBox searchBoxRef;
    string searchText { get; set; } = "";
    bool linkingEdiPOtoSO { get; set; } = false;
    bool useSearchButton { get; set; } = true;

    #endregion

    // ============================================================ \\

    #region Constructors/Page Functions

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        var authstate = await authStateProvider.GetAuthenticationStateAsync();
        var userClaimsPrincipal = authstate.User; // ClaimsPrincipal
        var userClaimsPrincipalName = userClaimsPrincipal.Identity.Name;
        currentUser = userClaimsPrincipal.Identity.Name;

        // var user = (await authenticationState).User;
        // if (!user.Identity.IsAuthenticated)
        // {
        //     //NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        //     //navManager.NavigateTo("/Login", true);
        //     //navManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(navManager.Uri)}");
        // }
        // else { }

        // var authstate = await authStateProvider.GetAuthenticationStateAsync();
        // var userClaimsPrincipal = authstate.User; // ClaimsPrincipal
        // var userClaimsPrincipalName = userClaimsPrincipal.Identity.Name;

        // if (userClaimsPrincipalName != null)
        // {
        //     var userData = userAccountService.GetUserAccountFromClaims(userClaimsPrincipal);

        //     if (userData != null)
        //     {
        //         if (userData.Role == "Administrator") { }
        //     }
        //     else { }
        // }

        await LoadGridHeaderData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (OrdersHeaderGrid != null)
            {
                OrdersHeaderGrid.BeginUpdate();
                OrdersHeaderGrid.ClearSort();
                OrdersHeaderGrid.GroupBy("ShipYear");
                //OrdersHeaderGrid.GroupBy("ShipWindow");
                OrdersHeaderGrid.GroupBy("MondayOfTheWeek");
                OrdersHeaderGrid.SortBy("ShipYear", GridColumnSortOrder.Descending);
                //OrdersHeaderGrid.SortBy("ShipWindow", GridColumnSortOrder.Descending);
                OrdersHeaderGrid.SortBy("MondayOfTheWeek", GridColumnSortOrder.Descending);
                OrdersHeaderGrid.EndUpdate();

                //OrdersHeaderGrid.ShowAllRows = true;

                var criteria = new InOperator("Archived", new Boolean[] { true });
                criteriaOrderOperator = criteria;
                if (OrdersHeaderGrid != null)
                    OrdersHeaderGrid.SetFilterCriteria(criteriaOrderOperator);
            }

            await DataLoadedTcs.Task;
            // Waits for grid data to load
            // Grid.ExpandDetailRow(0);
        }

        if (firstRender)
        {
            ////https://demos.devexpress.com/blazor/Popup
            var position = await LoadPositionFromLocalStorageAsync();
            (positionX, positionY) = (position?.X ?? null, position?.Y ?? null);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        // Northwind?.Dispose();
    }

    #endregion

    // ============================================================ \\

    #region Popup Functions

    async void OkPopupClick()
    {
        PopupVisible = false;

        if (callbackProcessName == "SaveLinks")
        {
            //@PopupLinkingFormContext.CloseCallback
            windowRefLinking.CloseAsync();

            await SaveCustomerPOLinking();
        }
        if (callbackProcessName == "UnLinkSave")
        {
            await OnUnLinkPOItemSave(unLinkingRow);
        }
        if (callbackProcessName == "SaveBlankOrderLinks")
        {
            await ToggleSearchPopupVisibilityAsync();
            await ToggleLinkingPopupVisibilityAsync();

            await SaveCustomerPOLinking();
        }
        if (callbackProcessName == "Archive")
        {
            foreach (SoEdiData item in SelectedDataItems.Cast<SoEdiData>())
            {
                if (!item.Archived)
                {
                    item.Archived = true;

                    // Update SQL table
                    string query = "";
                    string fullQuery = "";
                    if (item.IsLinked == 0)
                    {
                        query = @"UPDATE [PIMS].[dbo].[SOHeader] SET [Archived] = 1 WHERE [SOHeaderId] = {0}";
                        fullQuery = string.Format(query, item.SOHeaderId);
                    }
                    else
                    {
                        query = @"UPDATE [PIMS].[edi].[EdiHdr] SET [Archived] = 1 WHERE [Edihdrid] = {0}";
                        fullQuery = string.Format(query, item.EdiHdrId);
                    }

                    using (var uow = new UnitOfWork())
                    {
                        await uow.ExecuteNonQueryAsync(fullQuery);
                    }

                    OrdersHeaderGrid.BeginUpdate();
                    OrdersHeaderGrid.ClearFilter();
                    OrdersHeaderGrid.SetFilterCriteria(criteriaOrderOperator);
                    OrdersHeaderGrid.EndUpdate();

                    // Clear list
                    SelectedDataItems = new List<object>();

                    await InvokeAsync(StateHasChanged); // <-- refreshes
                }
            }
        }
        if (callbackProcessName == "UnArchive")
        {
            foreach (SoEdiData item in SelectedDataItems.Cast<SoEdiData>())
            {
                if (item.Archived)
                {
                    item.Archived = false;

                    // Update SQL table
                    string query = "";
                    string fullQuery = "";
                    if (item.IsLinked == 0)
                    {
                        query = @"UPDATE [PIMS].[dbo].[SOHeader] SET [Archived] = 0 WHERE [SOHeaderId] = {0}";
                        fullQuery = string.Format(query, item.SOHeaderId);
                    }
                    else
                    {
                        query = @"UPDATE [PIMS].[edi].[EdiHdr] SET [Archived] = 1 WHERE [Edihdrid] = {0}";
                        fullQuery = string.Format(query, item.EdiHdrId);
                    }

                    using (var uow = new UnitOfWork())
                    {
                        await uow.ExecuteNonQueryAsync(fullQuery);
                    }

                    OrdersHeaderGrid.BeginUpdate();
                    OrdersHeaderGrid.ClearFilter();
                    OrdersHeaderGrid.SetFilterCriteria(criteriaOrderOperator);
                    OrdersHeaderGrid.EndUpdate();

                    // Clear list
                    SelectedDataItems = new List<object>();

                    await InvokeAsync(StateHasChanged); // <-- refreshes
                }
            }
        }
    }

    void CancelPopupClick()
    {
        PopupVisible = false;
        linkingEdiPOtoSO = false;

        if (callbackProcessName == "Archive")
        {
            // Clear list
            SelectedDataItems = new List<object>();
        }

        if (callbackProcessName == "UnArchive")
        {
            // Clear list
            SelectedDataItems = new List<object>();
        }
    }

    void DisplayPopupMessage(string message, string title = "Notification", string callbackName = null)
    {
        isPopupCancelButtonVisible = false;
        popupOkButtonText = "Ok";
        popupCancelButtonText = "Cancel";
        popupTitleText = title;
        popupBodyText = message;
        PopupVisible = true;

        callbackProcessName = callbackName;
    }

    void DisplayPopupQuestion(string message, string title = "Alert", string callbackName = null)
    {
        isPopupCancelButtonVisible = true;
        popupOkButtonText = "Yes";
        popupCancelButtonText = "No";
        popupTitleText = title;
        popupBodyText = message;
        PopupVisible = true;

        callbackProcessName = callbackName;
    }

    #endregion

    // ============================================================ \\

    #region Grid Functions

    public void AutoCollapseDetailRow_Changed(bool newValue)
    {
        AutoCollapseDetailRow = newValue;
        if (newValue)
        {
            OrdersHeaderGrid.BeginUpdate();
            OrdersHeaderGrid.CollapseAllDetailRows();
            OrdersHeaderGrid.ExpandDetailRow(0);
            OrdersHeaderGrid.EndUpdate();
        }
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.Grid.Data != null)
        {
            if (e.Grid.Data.GetType().GetGenericArguments().Single() == typeof(SoEdiData))
            {
                //if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "Description")
                if (e.ElementType == GridElementType.DataCell)
                {
                    string fieldName = (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName;

                    if (fieldName == "Description")
                    {
                        string desc = e.Grid.GetRowValue(e.VisibleIndex, "Description").ToString();
                        if (desc.ToLower().Contains("auto forecast"))
                        {
                            e.Style = "color: red";
                        }
                    }

                    if (fieldName == "IntransitUnits")
                    {
                        int intransitUnits = (int)e.Grid.GetRowValue(e.VisibleIndex, "IntransitUnits");
                        int orderQty = (int)e.Grid.GetRowValue(e.VisibleIndex, "OrderQty");
                        if (intransitUnits > 0 && intransitUnits >= orderQty)
                        {
                            //e.Style = "color: green";
                            e.Style = "background: green";
                        }
                    }

                    if (fieldName == "ShipYear")
                    {
                        string shipYear = e.Grid.GetRowValue(e.VisibleIndex, "ShipYear").ToString();
                        if (shipYear.ToLower().Contains("1900") || shipYear.ToLower().Contains("auto"))
                        {
                            e.Style = "color: red";
                        }
                    }

                    if (fieldName == "MondayOfTheWeek")
                    {
                        string mondayOfTheWeek = e.Grid.GetRowValue(e.VisibleIndex, "MondayOfTheWeek").ToString();
                        if (mondayOfTheWeek.ToLower().Contains("1900") || mondayOfTheWeek.ToLower().Contains("auto"))
                        {
                            e.Style = "color: red";
                        }
                    }
                }
            }

            if (e.ElementType == GridElementType.GroupRow)
            {
                if ((e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "ShipYear")
                {
                    string shipYear = e.Grid.GetRowValue(e.VisibleIndex, "ShipYear").ToString();
                    if (shipYear.ToLower().Contains("1900") || shipYear.ToLower().Contains("auto"))
                    {
                        e.Style = "color: red";
                    }
                }
                if ((e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "MondayOfTheWeek")
                {
                    string mondayOfTheWeek = e.Grid.GetRowValue(e.VisibleIndex, "MondayOfTheWeek").ToString();
                    if (mondayOfTheWeek.ToLower().Contains("1900") || mondayOfTheWeek.ToLower().Contains("auto"))
                    {
                        e.Style = "color: red";
                    }
                }
            }
        }
    }
    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        // string[] dateList = new string[] { "SODate", "StartDate", "EndDate", "ShipmentDate", "ShipToETA" };
        // if (dateList.Contains(e.FieldName))
        if (e.Value.GetType() == typeof(DateTime))
        {
            if (DateTime.Parse(e.Value.ToString()) <= new DateTime(1900, 1, 1))
                e.DisplayText = "";
        }
    }

    async Task MainGrid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            if (e.EditModel.GetType() == typeof(SoEdiData))
            {
                var newObject = (SoEdiData)e.EditModel;
                newObject.Description = "Auto Forecast";
            }
        }
    }
    async Task MainGrid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        e.Cancel = true;

        if (e.EditModel.GetType() == typeof(SoEdiData))
        {
            var savingObject = (SoEdiData)e.EditModel;

            if (e.IsNew)
                await InsertOrderDataAsync(savingObject);
            else
            {
                if (savingObject.Id == 0)
                    await InsertOrderDataAsync(savingObject);
                else
                    await UpdateOrderDataAsync(savingObject);
            }

            await OrdersHeaderGrid.CancelEditAsync();
        }
    }
    async Task MainGridDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var deletingData = (SoEdiData)e.DataItem;

        // await NwindDataService.RemoveEmployeeAsync((EditableEmployee)e.DataItem);
        //await UpdateDataAsync();
    }
    async Task UpdateDataAsync()
    {
        // SOGridData = await sqlData.GetCustomerSoData();
    }

    async Task DetailGrid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        e.Cancel = true;

        if (e.EditModel.GetType() == typeof(SoEdiData))
        {
            var savingObject = (SoEdiData)e.EditModel;

            if (e.IsNew)
                await InsertOrderDataAsync(savingObject);
            else
            {
                if (savingObject.Id == 0)
                    await InsertOrderDataAsync(savingObject);
                else
                    await UpdateOrderDataAsync(savingObject);
            }

            await OrdersHeaderGrid.CancelEditAsync();
        }
    }
    async Task DetailGrid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem.GetType() == typeof(SoEdiData))
        {
            var deletingObject = (SoEdiData)e.DataItem;

            //await DeleteBusinessPartnerTaskDataAsync(deletingObject);

            //await Grid.CancelEditAsync();
            //await GridDetail.CancelEditAsync();
        }
    }
    async Task DetailGrid_EditCanceling(GridEditCancelingEventArgs e)
    {

    }
    async Task DetailGrid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            if (e.EditModel.GetType() == typeof(SoEdiData))
            {
                var newObject = (SoEdiData)e.EditModel;

            }
        }
    }

    async void EDIItemGrid_OnRowClick(GridRowClickEventArgs e)
    {
        if (LinkEdiOrderDetailGrid != null && e.Column.GetType() != typeof(DevExpress.Blazor.DxGridCommandColumn))
        {
            if (LinkEdiOrderDetailGrid.GetDataItem(e.VisibleIndex) is SoEdiData)
            {
                SoEdiData item = LinkEdiOrderDetailGrid.GetDataItem(e.VisibleIndex) as SoEdiData;
                await OnLinkPOItemClick(item, "link");
            }

            //LinkEdiOrderDetailGrid.StartEditRowAsync(e.VisibleIndex);
        }
    }
    async Task EDIItemGrid_OnRowDoubleClick(GridRowClickEventArgs e)
    {
        ////await e.Grid.SaveChangesAsync();
        ////FocusedColumn = (e.Column as DxGridDataColumn).FieldName;
        //await e.Grid.StartEditRowAsync(e.VisibleIndex);
    }

    async void SOItemGrid_OnRowClick(GridRowClickEventArgs e)
    {
        if (LinkSOOrderDetailGrid != null)
        {
            if (LinkSOOrderDetailGrid.GetDataItem(e.VisibleIndex) is CustomerSoPoData)
            {
                CustomerSoPoData item = LinkSOOrderDetailGrid.GetDataItem(e.VisibleIndex) as CustomerSoPoData;
                await OnLinkPOItemClick(item, "link");
            }

            //LinkSOOrderDetailGrid.StartEditRowAsync(e.VisibleIndex);
        }
    }
    async Task SOItemGrid_OnRowDoubleClick(GridRowClickEventArgs e)
    {
        ////await e.Grid.SaveChangesAsync();
        ////FocusedColumn = (e.Column as DxGridDataColumn).FieldName;
        //await e.Grid.StartEditRowAsync(e.VisibleIndex);
    }

    async Task InsertOrderDataAsync(SoEdiData item) // Save Auto Forecast Order
    {
        string query = @"INSERT INTO [PIMS].[dbo].[SOHeader]
        ([SOHeaderId]
      ,[SONumber]
      ,[SODate]
      ,[BusinessPartnerId]
      ,[StartDate]
      ,[EndDate]
      ,[TotalCost]
      ,[TotalPrice]
      ,[PONumber]
      ,[PostedToERP]
      ,[PostedDate]
      ,[SOStatusId]
      ,[SOStatusDate]
      ,[LegacySystemId]
      ,[Description]
      ,[QBSO]
      ,[Comments]
      ,[CreatedOn]
      ,[ShipWindow])
      SELECT 1000000 + (SELECT COUNT(*) FROM [PIMS].[dbo].[SOHeader] WHERE [SOHeaderId] >= 1000000) + 1 AS [NewSOHeaderId]
      ,''           AS [SONumber]
      ,GETDATE()    AS [SODate]
      ,{0}          AS [BusinessPartnerId]
      ,'{1}'        AS [StartDate]
      ,'{2}'        AS [EndDate]
      ,{3}          AS [TotalCost]
      ,{4}          AS [TotalPrice]
      ,''           AS [PONumber]
      ,0            AS [PostedToERP]
      ,'1900-01-01 00:00:00.000' AS [PostedDate]
      ,0            AS [SOStatusId]
      ,'1900-01-01 00:00:00.000' AS [SOStatusDate]
      ,0 AS [LegacySystemId]
      ,'{5}'        AS [Description]
      ,'{6}'        AS [QBSO]
      ,'{7}'        AS [Comments]
      ,GETDATE() AS [CreatedOn]
      , '{8}'       AS [ShipWindow]
        ";
        string fullQuery = string.Format(query, item.CustomerId, item.StartDate, item.EndDate, item.OrderQty, item.Price, item.Description, item.QBSO, item.Comments, item.StartDate); // item.ShipWindow = item.StartDate on New entry

        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        SqlData sqlData = new SqlData();
        OrdersHeaderGridData = await sqlData.GetSoEdiData();
    }

    async Task UpdateOrderDataAsync(SoEdiData item)
    {
        // Note: if and unlinked order,save to [PIMS].[dbo].[SOHeader]
        string query = "";
        string fullQuery = "";
        if (item.IsLinked == 1)
        {
            query = @"
UPDATE [PIMS].[edi].[EdiHdr] SET
    [Description] = '{1}'
    ,[QBSO] = '{2}'
    ,[Comments] = '{3}'
WHERE [Edihdrid] = {0}

UPDATE [PIMS].[edi].[EdiTrn] SET
    [ShipWindow] = '{4}'
WHERE [Edihdrid] = {0}
";
            fullQuery = string.Format(query, item.EdiHdrId, item.Description, item.QBSO, item.Comments, item.ShipWindow);
        }
        else
        {
            query = @"
UPDATE [PIMS].[dbo].[SOHeader] SET
    [Description] = '{1}'
    ,[QBSO] = '{2}'
    ,[Comments] = '{3}'
    ,[ShipWindow] = '{4}'
WHERE [SOHeaderId] = {0}";
            fullQuery = string.Format(query, item.SOHeaderId, item.Description, item.QBSO, item.Comments, item.ShipWindow);
        }
        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        SqlData sqlData = new SqlData();
        OrdersHeaderGridData = await sqlData.GetSoEdiData();
    }

    async void OnSelectedDataItemsChanged(IReadOnlyList<object> selectedDataItems)
    {
        SelectedDataItems = selectedDataItems;
        //onTicketSelectionChanged.InvokeAsync(selectedDataItems);

        foreach (SoEdiData item in selectedDataItems.Cast<SoEdiData>())
        {
            if (item.Archived)
            {
                string message = "Are you sure you want to " + Environment.NewLine + "Un-Archive i2 SO " + item.SONumber + "?";
                DisplayPopupQuestion(message, "Confirmation", "UnArchive");
            }
        }
    }

    #endregion

    // ============================================================ \\

    #region Task/Test Tabs Functions

    async Task LoadGridHeaderData()
    {
        SqlData sqlData = new SqlData();
        OrdersHeaderGridData = await sqlData.GetSoEdiData();

        BusinessPartnerListData = await sqlData.GetCustomerBusinessPartnerList();
        partnerList = GetPartnerData();
    }

    async Task LoadGridDetailData(SoEdiData row)
    {
        //if (selectedRow != null && selectedRow.SOHeaderId == row.SOHeaderId)
        if (JsonConvert.SerializeObject(selectedRow) == JsonConvert.SerializeObject(row))
            return;

        SqlData sqlData = new SqlData();
        EDIOrdersDetailGridData = await sqlData.GetSoEdiDetailData(row.EdiHdrId, false, false);
        SOOrdersDetailGridData = await sqlData.GetCustomerSoPoDetailData(row.SOHeaderId, true);

        EdiOrderDetailGridJewelryData = (from o in SOOrdersDetailGridData where o.SoSubLineType == "Customer Order" select o).Cast<CustomerSoPoData>();
        EdiOrderDetailGridPackagingData = (from o in SOOrdersDetailGridData where o.SoSubLineType == "Packaging" select o).Cast<CustomerSoPoData>();

        if (ActiveTabIndex == 0 && EDIOrdersDetailGridData.Count() == 0)
            ActiveTabIndex = 1;
        else
        {
            if (EDIOrdersDetailGridData.Count() > 0 && ActiveTabIndex <= 1)
                ActiveTabIndex = 0;
        }

        await InvokeAsync(StateHasChanged); // <-- refreshes
    }

    async void LoadTasksGridData(SoEdiData row)
    {
        if (JsonConvert.SerializeObject(selectedRow) == JsonConvert.SerializeObject(row))
            return;

        SqlData sqlData = new SqlData();
        TasksMainGridData = await sqlData.GetAllProductQueueTasks(row.SOHeaderId);

        await InvokeAsync(StateHasChanged); // <-- refreshes
    }

    async Task LoadTasksDetailGridData(string gridName, int id, int headerId)
    {
        if (gridName == "SubGrid")
        {
            SqlData sqlData = new SqlData();
            if (id == 0)
            {
                TasksDetailGridData = await sqlData.GetProductQueueTasks(-1, headerId);
            }
            else
            {
                TasksDetailGridData = await sqlData.GetProductQueueTasks(id);
            }
        }
        if (gridName == "TasksGrid")
        {
            SqlData sqlData = new SqlData();
            TasksDetailGridData = await sqlData.GetProductQueueTasks(id, headerId);

            await InvokeAsync(StateHasChanged); // <-- refreshes
        }
    }

    async void LoadTestsGridData(SoEdiData row)
    {
        if (JsonConvert.SerializeObject(selectedRow) == JsonConvert.SerializeObject(row))
            return;

        List<int> productIds = new List<int>();

        SqlData sqlData = new SqlData();
        TestsMainGridData = await sqlData.GetProductTests(row.SOHeaderId, productIds);

        await InvokeAsync(StateHasChanged); // <-- refreshes
    }

    void TestsMainGrid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow)
        {
            string status = (System.String)e.Grid.GetRowValue(e.VisibleIndex, "TestStatus");

            if (status == "Passed")
            {
                e.Style = "color: green";
            }
            if (status == "Failed")
            {
                e.Style = "color: red";
            }
            if (status == "Pending")
            {
                e.Style = "background: yellow";
            }
        }
    }

    #endregion

    // ============================================================ \\

    #region Linking Functions

    async Task ToggleSearchPopupVisibilityAsync()
    {
        if (windowRefPOSearchVisible)
            await windowRefPOSearch.CloseAsync();
        else
            await windowRefPOSearch.ShowAtAsync(popupTarget);
    }
    async Task ToggleLinkingPopupVisibilityAsync()
    {
        if (windowRefLinkingVisible)
            await windowRefLinking.CloseAsync();
        else
            await windowRefLinking.ShowAtAsync(popupTarget);
    }

    async void LinkCustomerPOClick(SoEdiData row, string orderType = "SOOrder")
    {
        if (orderType == "SOOrder")
        {
            linkingRow = row;
            selectedSono = row.SONumber;
            searchTitleText = "Linking " + row.SONumber + " to...";
            linkingItemText = "";

            SqlData sqlData = new SqlData();
            //LinkSOOrderDetailGridData = await sqlData.GetCustomerSoPoDetailData(row.SOHeaderId, false);
            LinkSOOrderDetailGridData = await sqlData.GetSODetailSearchData(row.SOHeaderId, false);

            EdiOrderHeaderGridData = Enumerable.Empty<EdiOrderDetailData>();
            await ToggleSearchPopupVisibilityAsync();
        }
        if (orderType == "BlankOrder")
        {
            linkingRow = row;
            selectedSono = "BlankOrder";
            searchTitleText = "Linking Blank Order to...";
            linkingItemText = "";

            EdiOrderHeaderGridData = Enumerable.Empty<EdiOrderDetailData>();
            LinkSOOrderDetailGridData = Enumerable.Empty<CustomerSoPoData>();

            await ToggleSearchPopupVisibilityAsync();
        }
    }
    async void OnSearchButtonClick(string poNo)
    {
        if (useSearchButton)
        {
            //if (string.IsNullOrEmpty(poNo))
            poNo = searchBoxRef.Text;

            SqlData sqlData = new SqlData();
            EdiOrderHeaderGridData = await sqlData.SearchEdiOrderSummaryViewData(poNo, true);

            if (!string.IsNullOrEmpty(poNo))
            {
                if (EdiOrderHeaderGridData.Count() == 0)
                {
                    DisplayPopupMessage("No EDI POs found for " + poNo);
                }
            }
            await InvokeAsync(StateHasChanged); // <-- refreshes
        }
    }
    async void OnSearchPOClick(EdiOrderDetailData row)
    {
        if (isBlankOrder)
        {
            selectedEdiRow = row;
            selectedEdiPO = row.PONumber;
            searchTitleText = "Linking " + selectedEdiRow.PONumber + " to " + selectedSono; //linkingRow.SONumber;

            SqlData sqlData = new SqlData();
            LinkEdiOrderDetailGridData = await sqlData.GetSoEdiDetailData(row.EdiHdrId, false, true);

            foreach (SoEdiData item in LinkEdiOrderDetailGridData)
            {
                item.IsItemLinked = true;
            }

            string message = "Are you sure you want to " + Environment.NewLine + "link i2 SO " + selectedSono + " with EDI PO Number " + selectedEdiPO + "?";
            DisplayPopupQuestion(message, "Confirmation", "SaveBlankOrderLinks");
        }
        else
        {
            selectedEdiRow = row;
            selectedEdiPO = row.PONumber;
            searchTitleText = "Linking " + selectedEdiRow.PONumber + " to " + selectedSono; //linkingRow.SONumber;

            SqlData sqlData = new SqlData();
            LinkEdiOrderDetailGridData = await sqlData.GetSoEdiDetailData(row.EdiHdrId, false, true);

            await AutoSyncItemData();

            await ToggleSearchPopupVisibilityAsync();
            await ToggleLinkingPopupVisibilityAsync();

            await InvokeAsync(StateHasChanged); // <-- refreshes
        }
    }
    async Task AutoSyncItemData()
    {
        if (LinkSOOrderDetailGridData != null &&
            LinkEdiOrderDetailGridData != null)
        {
            string soItemNo = "";
            string ediItemNo = "";
            int ediTrnId = 0;

            try
            {
                foreach (CustomerSoPoData soItem in LinkSOOrderDetailGridData)
                {
                    soItemNo = soItem.ProductNo;
                    ediItemNo = "";
                    ediTrnId = 0;

                    if (soItem.SOQty > 0)
                    {
                        foreach (SoEdiData ediItem in LinkEdiOrderDetailGridData)
                        {
                            if (ediItem.ItemNo == soItemNo)
                            {
                                ediItemNo = ediItem.ItemNo;
                                ediTrnId = ediItem.EdiTrnId;

                                // Link
                                ediItem.LinkedToId = soItem.SODetailId;
                                ediItem.LinkedToName = soItem.ProductNo;
                                ediItem.IsItemLinked = true;
                                ediItem.LinkedStatus = "Auto-Linked to " + soItem.ProductNo;
                                break;
                            }
                        }

                        if (ediTrnId > 0)
                        {
                            soItem.LinkedToId = ediTrnId;
                            soItem.LinkedToName = ediItemNo;
                            soItem.IsItemLinked = true;
                            soItem.LinkedStatus = "Auto-Linked to " + ediItemNo;
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }
    }

    async Task OnLinkPOItemClick(object data, string process)
    {
        if (data.GetType() == typeof(SoEdiData))
        {
            if (process == "link")
            {
                if ((data as SoEdiData).IsItemLinked)
                    return;

                linkingSoEdiDataItem = (data as SoEdiData);

                if (!isBlankOrder)
                {
                    if (linkingCustomerSoPoDataItem == null)
                    {
                        linkingItemText = "Select SO Item";
                    }
                    else
                    {
                        linkingItemText = "Linking SO Item " + linkingCustomerSoPoDataItem.ProductNo + " to EDI Item " + linkingSoEdiDataItem.ItemNo;
                        await LinkPOItem(linkingSoEdiDataItem, linkingCustomerSoPoDataItem, process);
                    }
                }
                else
                {
                    await AddLinkPOItem(linkingSoEdiDataItem, linkingCustomerSoPoDataItem, "add");
                }
            }
            if (process == "unlink")
            {
                if (!(data as SoEdiData).IsItemLinked)
                    return;

                if (!isBlankOrder)
                {
                    await LinkPOItem((data as SoEdiData), null, process);
                    linkingSoEdiDataItem = null;
                    linkingItemText = "";
                }
                else
                {
                    await AddLinkPOItem((data as SoEdiData), null, "remove");
                }
            }
        }
        if (data.GetType() == typeof(CustomerSoPoData))
        {
            if (process == "link")
            {
                if ((data as CustomerSoPoData).IsItemLinked)
                    return;

                linkingCustomerSoPoDataItem = (data as CustomerSoPoData);

                if (linkingCustomerSoPoDataItem.SOQty == 0)
                {
                    DisplayPopupMessage("Unable to Link. 0 SO Qty available.");
                    return;
                }

                if (linkingSoEdiDataItem == null)
                {
                    linkingItemText = "Select EDI Item";
                }
                else
                {
                    linkingItemText = "Linking EDI Item " + linkingSoEdiDataItem.ItemNo + " to SO Item " + linkingCustomerSoPoDataItem.ProductNo;
                    await LinkPOItem(linkingSoEdiDataItem, linkingCustomerSoPoDataItem, process);
                }
            }
            if (process == "unlink")
            {
                if (!(data as CustomerSoPoData).IsItemLinked)
                    return;

                if (!isBlankOrder)
                {
                    await LinkPOItem(null, (data as CustomerSoPoData), process);
                    linkingCustomerSoPoDataItem = null;
                    linkingItemText = "";
                }
                else
                {
                    await AddLinkPOItem(null, (data as CustomerSoPoData), "remove");
                }
            }
        }
    }

    async Task LinkPOItem(SoEdiData ediData, CustomerSoPoData soPoData, string process)
    {
        if (process == "link")
        {
            foreach (SoEdiData item in LinkEdiOrderDetailGridData)
            {
                if (item.EdiTrnId == ediData.EdiTrnId)
                {
                    // Link
                    item.LinkedToId = soPoData.SODetailId;
                    item.LinkedToName = soPoData.ProductNo;
                    item.IsItemLinked = true;
                    item.LinkedStatus = "Linked to " + soPoData.ProductNo;
                    break;
                }
            }
            foreach (CustomerSoPoData item in LinkSOOrderDetailGridData)
            {
                if (item.SODetailId == soPoData.SODetailId)
                {
                    // Link
                    item.LinkedToId = ediData.EdiTrnId;
                    item.LinkedToName = ediData.ItemNo;
                    item.IsItemLinked = true;
                    item.LinkedStatus = "Linked to " + ediData.ItemNo;
                    break;
                }
            }

            linkingSoEdiDataItem = null;
            linkingCustomerSoPoDataItem = null;
            linkingItemText = "";
        }
        if (process == "unlink")
        {
            if (ediData != null)
            {
                int linkedToId = 0;

                foreach (SoEdiData item in LinkEdiOrderDetailGridData)
                {
                    if (item.EdiTrnId == ediData.EdiTrnId)
                    {
                        linkedToId = item.LinkedToId;

                        // Un-Link
                        item.LinkedToId = 0;
                        item.LinkedToName = "";
                        item.IsItemLinked = false;
                        item.LinkedStatus = "";
                        break;
                    }
                }
                if (linkedToId > 0)
                {
                    foreach (CustomerSoPoData item in LinkSOOrderDetailGridData)
                    {
                        if (item.SODetailId == linkedToId)
                        {
                            // Un-Link
                            item.LinkedToId = 0;
                            item.LinkedToName = "";
                            item.IsItemLinked = false;
                            item.LinkedStatus = "";
                            break;
                        }
                    }
                }
            }
            else
            {
                if (soPoData != null)
                {
                    int linkedToId = 0;

                    foreach (CustomerSoPoData item in LinkSOOrderDetailGridData)
                    {
                        if (item.SODetailId == soPoData.SODetailId)
                        {
                            linkedToId = item.LinkedToId;

                            // Un-Link
                            item.LinkedToId = 0;
                            item.LinkedToName = "";
                            item.IsItemLinked = false;
                            item.LinkedStatus = "";
                            break;
                        }
                    }

                    if (linkedToId > 0)
                    {
                        foreach (SoEdiData item in LinkEdiOrderDetailGridData)
                        {
                            if (item.EdiTrnId == linkedToId)
                            {
                                // Un-Link
                                item.LinkedToId = 0;
                                item.LinkedToName = "";
                                item.IsItemLinked = false;
                                item.LinkedStatus = "";
                                break;
                            }
                        }
                    }
                }
            }

            linkingSoEdiDataItem = null;
            linkingCustomerSoPoDataItem = null;
            linkingItemText = "";
        }
    }

    async Task AddLinkPOItem(SoEdiData ediData, CustomerSoPoData soPoData, string process)
    {
        if (process == "add")
        {
            CustomerSoPoData poData = new CustomerSoPoData();
            poData.SODetailId = (LinkSOOrderDetailGridData.Count() == 0) ? 1 : LinkSOOrderDetailGridData.Where(x => x.SODetailId > 0).Select(x => x.SODetailId).Max() + 1;
            poData.ProductNo = ediData.ItemNo;
            poData.SOQty = 0;
            poData.VendorPO = "";
            poData.VendorName = "";
            poData.LinkedToId = ediData.EdiTrnId;
            poData.LinkedToName = ediData.ItemNo;
            poData.IsItemLinked = true;
            poData.LinkedStatus = "Linked to " + ediData.ItemNo;

            //LinkSOOrderDetailGridData.Append<CustomerSoPoData>(poData);
            //LinkSOOrderDetailGridData.Concat(new[] { poData });
            List<CustomerSoPoData> newList = LinkSOOrderDetailGridData.ToList();
            newList.Add(poData);
            LinkSOOrderDetailGridData = newList;

            foreach (SoEdiData item in LinkEdiOrderDetailGridData)
            {
                if (item.EdiTrnId == ediData.EdiTrnId)
                {
                    // Link
                    item.LinkedToId = poData.SODetailId;
                    item.LinkedToName = poData.ProductNo;
                    item.IsItemLinked = true;
                    item.LinkedStatus = "Linked to " + poData.ProductNo;
                    break;
                }
            }

            linkingSoEdiDataItem = null;
            linkingItemText = "";
        }
        if (process == "remove")
        {
            if (ediData != null)
            {
                int linkedToId = 0;

                foreach (SoEdiData item in LinkEdiOrderDetailGridData)
                {
                    if (item.EdiTrnId == ediData.EdiTrnId)
                    {
                        linkedToId = item.LinkedToId;

                        // Un-Link
                        item.LinkedToId = 0;
                        item.LinkedToName = "";
                        item.IsItemLinked = false;
                        item.LinkedStatus = "";
                        break;
                    }
                }
                if (linkedToId > 0)
                {
                    // find and remove LinkSOOrderDetailGridData item
                    int index = 0;
                    foreach (CustomerSoPoData item in LinkSOOrderDetailGridData)
                    {
                        if (item.SODetailId == linkedToId)
                        {
                            // remove
                            //LinkSOOrderDetailGridData = LinkSOOrderDetailGridData.Skip(index);

                            List<CustomerSoPoData> newList = LinkSOOrderDetailGridData.ToList();
                            newList.Remove(item);
                            LinkSOOrderDetailGridData = newList;
                            break;
                        }
                        index++;
                    }
                }
            }
            else
            {
                if (soPoData != null)
                {
                    int linkedToId = 0;
                    int index = 0;
                    foreach (CustomerSoPoData item in LinkSOOrderDetailGridData)
                    {
                        if (item.SODetailId == soPoData.SODetailId)
                        {
                            linkedToId = item.LinkedToId;

                            // remove
                            //if (LinkSOOrderDetailGridData.Count() == 1)
                            //    LinkSOOrderDetailGridData = Enumerable.Empty<CustomerSoPoData>();
                            //else
                            //    LinkSOOrderDetailGridData = LinkSOOrderDetailGridData.Skip(index);

                            List<CustomerSoPoData> newList = LinkSOOrderDetailGridData.ToList();
                            newList.Remove(item);
                            LinkSOOrderDetailGridData = newList;

                            break;
                        }
                        index++;
                    }

                    if (linkedToId > 0)
                    {
                        foreach (SoEdiData item in LinkEdiOrderDetailGridData)
                        {
                            if (item.EdiTrnId == linkedToId)
                            {
                                // Un-Link
                                item.LinkedToId = 0;
                                item.LinkedToName = "";
                                item.IsItemLinked = false;
                                item.LinkedStatus = "";
                                break;
                            }
                        }
                    }
                }
            }

            linkingSoEdiDataItem = null;
            linkingItemText = "";
        }
    }

    async Task OnLinkinkPopupOkClick()
    {
        string message = "Are you sure you want to " + Environment.NewLine + "link i2 SO " + selectedSono + " with EDI PO Number " + selectedEdiPO + "?";
        DisplayPopupQuestion(message, "Confirmation", "SaveLinks");
    }

    async Task SaveCustomerPOLinking()
    {
        // Note: if 'Auto Forecast' order, transfer [Description] and [Comments] to [PIMS].[edi].[EdiHdr]

        if (!isBlankOrder)
        {
            int edihdrid = selectedEdiRow.EdiHdrId;
            string query = "";
            string fullQuery = "";

            query = @"
UPDATE [PIMS].[edi].[EdiHdr] SET [SoHeaderId] = {2} WHERE [Edihdrid] = {0}
UPDATE [PIMS].[edi].[EdiTrn] SET [SoDetailId] = {3}, [ProductId] = {4} WHERE [Editrnid] = {1} AND [Edihdrid] = {0}";
            foreach (CustomerSoPoData item in LinkSOOrderDetailGridData)
            {
                if (item.IsItemLinked) //item.LinkedToId = ediData.EdiTrnId;
                {
                    fullQuery += string.Format(query, edihdrid, item.LinkedToId, item.SOHeaderId, item.SODetailId, item.ProductId);
                }
            }

            //DisplayPopupMessage("Linking");

            try
            {
                using (var uow = new UnitOfWork())
                {
                    await uow.ExecuteNonQueryAsync(fullQuery);
                }
            }
            catch (Exception ex)
            {
                DisplayPopupMessage("Error Saving:" + ex.Message);
            }

            //TogglePopupVisibilityAsync()
            await windowRefLinking.CloseAsync();

            SqlData sqlData = new SqlData();
            OrdersHeaderGridData = await sqlData.GetSoEdiData();

            await InvokeAsync(StateHasChanged); // <-- refreshes
        }
        else
        {
            //linkingRow(SoEdiData) row clicked on [main row]
            //selectedEdiRow(EdiOrderDetailData) search EDI
            //LinkEdiOrderDetailGridData(IEnumerable < CustomerSoPoData > LinkSOOrderDetailGridData) EDI detail data

            int edihdrid = selectedEdiRow.EdiHdrId;
            int soHeaderId = linkingRow.SOHeaderId; // > 1000000
            string soDesc = linkingRow.Description;
            string soComments = linkingRow.Comments;
            string soQBSO = linkingRow.QBSO;

            string query = "";
            string fullQuery = "";

            query = @"
UPDATE [PIMS].[edi].[EdiHdr]
SET [SoHeaderId] = {1}
    ,[Description] = '{2}'
    ,[Comments] = '{3}'
    ,[QBSO] = '{4}'
WHERE [Edihdrid] = {0}";
            fullQuery = string.Format(query, edihdrid, soHeaderId, soDesc, soComments, soQBSO);

            query = @"
UPDATE [PIMS].[edi].[EdiTrn]
SET [SoDetailId] = 0
    ,[ProductId] = (SELECT ISNULL([ProductId],0) AS [ProductId] FROM [PIMS].[dbo].[Product] WHERE [ProductNo] = '{2}')
WHERE [Editrnid] = {1} AND [Edihdrid] = {0}";
            foreach (SoEdiData item in LinkEdiOrderDetailGridData)
            {
                if (item.IsItemLinked) //item.LinkedToId = ediData.EdiTrnId;
                {
                    fullQuery += string.Format(query, edihdrid, item.EdiTrnId, item.ItemNo);
                }
            }

            try
            {
                using (var uow = new UnitOfWork())
                {
                    await uow.ExecuteNonQueryAsync(fullQuery);
                }
            }
            catch (Exception ex)
            {
                DisplayPopupMessage("Error Saving:" + ex.Message);
            }

            //TogglePopupVisibilityAsync()
            await windowRefLinking.CloseAsync();

            SqlData sqlData = new SqlData();
            OrdersHeaderGridData = await sqlData.GetSoEdiData();

            await InvokeAsync(StateHasChanged); // <-- refreshes
        }
    }

    async Task OnUnLinkPOItemClick(SoEdiData ediData)
    {
        if (string.IsNullOrWhiteSpace(ediData.CustomerPO))
            return;

        string selectedSono = ediData.SONumber;
        string selectedEdiPO = ediData.CustomerPO;

        unLinkingRow = ediData;

        //int ediHdrId = ediData.EdiHdrId;
        //int soHeaderId = ediData.SOHeaderId;
        //int ediTrnId = ediData.EdiTrnId;
        //int soDetailId = ediData.SoDetailId;
        //int productId = ediData.ProductId;

        string message = "Are you sure you want to " + Environment.NewLine + "UNLINK i2 SO " + selectedSono + " with EDI PO Number " + selectedEdiPO + "?";
        DisplayPopupQuestion(message, "Confirmation", "UnLinkSave");
    }

    async Task OnUnLinkPOItemSave(SoEdiData ediData)
    {
        int ediHdrId = ediData.EdiHdrId;
        int soHeaderId = ediData.SOHeaderId;

        int ediTrnId = ediData.EdiTrnId;
        int soDetailId = ediData.SoDetailId;
        int productId = ediData.ProductId;

        string query = "";
        string fullQuery = "";

        query = @"UPDATE [PIMS].[edi].[EdiTrn] SET [SoDetailId] = NULL, [ProductId] = NULL WHERE [Editrnid] = {1} AND [Edihdrid] = {0}
IF (SELECT COUNT(*) FROM [PIMS].[edi].[EdiTrn] WHERE [Edihdrid] = {0}) = 0
BEGIN
	UPDATE [PIMS].[edi].[EdiHdr] SET [SoHeaderId] = NULL WHERE [Edihdrid] = {0}
END";

        fullQuery += string.Format(query, ediHdrId, ediTrnId);
        try
        {
            using (var uow = new UnitOfWork())
            {
                await uow.ExecuteNonQueryAsync(fullQuery);
            }
        }
        catch (Exception ex)
        {
            DisplayPopupMessage("Error Saving:" + ex.Message);
        }

        SqlData sqlData = new SqlData();
        OrdersHeaderGridData = await sqlData.GetSoEdiData();
        await InvokeAsync(StateHasChanged); // <-- refreshes
    }

    #endregion

    // ============================================================ \\

    #region Non-Grid Functions

    public List<Lookup> GetPartnerData()
    {
        List<Lookup> list = new List<Lookup>();

        //var sublist = OpenPOShipmentData.Where(x => x.VendorId == vendorId).Select(x => x.PONumber).Distinct().ToList();
        foreach (BusinessPartner item in BusinessPartnerListData.AsEnumerable())
        {
            Lookup l = new Lookup()
                {
                    LookupText = item.BusinessPartnerName,
                    LookupValue = item.BusinessPartnerId
                };
            list.Add(l);
        }
        return list;
    }

    async void LinkCustomerPOClick(CustomerSoPoData row)
    {
        //linkingRow = row;
        //searchTitleText = "Linking " + row.ProductNo + " to...";
        //await TogglePopupVisibilityAsync();
    }
    
    async void LinkCustomerPOClick(EdiOrderDetailData row)
    {
        //selectedEdiDetailRow = row; // Line Items
        //
        //// Question User
        //linkingEdiPOtoSO = true;
        //
        //string message = "Are you sure you want to " + Environment.NewLine + "link i2 SO " + selectedRow.SONumber + ", Product " + selectedRow.ProductNo + Environment.NewLine + " with EDI PO Number " + row.PONumber + "m Product No " + row.ProductNo + "?";
        //DisplayPopupQuestion(message);
    }

    async void OnSearchPOTextChanged(string poNo)
    {
        if (!useSearchButton)
        {
            SqlData sqlData = new SqlData();
            EdiOrderHeaderGridData = await sqlData.SearchEdiOrderSummaryViewData(poNo, true);
            // EdiOrderDetailGridData = await sqlData.GetEdiOrderDetailViewData(newVpoNoalue);

            if (!string.IsNullOrEmpty(poNo))
            {
                if (EdiOrderHeaderGridData.Count() == 0)
                {
                    DisplayPopupMessage("No EDI POs found for " + poNo);
                }
            }
            await InvokeAsync(StateHasChanged); // <-- refreshes
        }
    }

    async void LoadEdiOrderDetailGridData(EdiOrderDetailData row) //string poNo
    {
        if (useSearchButton)
        {
            //if (selectedEdiRow != null && selectedEdiRow.PONumber == row.PONumber)
            if (JsonConvert.SerializeObject(selectedEdiRow) == JsonConvert.SerializeObject(row))
                return;

            SqlData sqlData = new SqlData();
            EdiOrderDetailGridData = await sqlData.GetEdiOrderDetailViewData(row.PONumber);

            await InvokeAsync(StateHasChanged); // <-- refreshes
        }
    }

    #endregion

    // ============================================================ \\

    #region Popup Functions

    async Task OnPopupDragCompleted(PopupDragCompletedEventArgs args)
    {
        (positionX, positionY) = (args.End.X, args.End.Y);
        await SavePositionToLocalStorageAsync(args.End);
    }
    // Refer to https://docs.microsoft.com/en-us/aspnet/core/blazor/state-management
    // to learn more about Blazor state management
    // In Blazor Server apps, prefer ASP.NET Core Protected Browser Storage
    async Task<Point?> LoadPositionFromLocalStorageAsync()
    {
        //var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", LocalStorageKey);
        //return string.IsNullOrEmpty(json) ? null : JsonSerializer.Deserialize<Point>(json);
        return null;
    }
    async Task SavePositionToLocalStorageAsync(Point position)
    {
        //await JSRuntime.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, JsonSerializer.Serialize(position));
    }
    async Task RemovePositionFromLocalStorageAsync()
    {
        //await JSRuntime.InvokeVoidAsync("localStorage.removeItem", LocalStorageKey);
    }
    async Task ReloadPageButton_ClickAsync()
    {
        //await JSRuntime.InvokeVoidAsync("location.reload");
    }
    async Task ResetPositionButton_ClickAsync()
    {
        //await RemovePositionFromLocalStorageAsync();
        //await JSRuntime.InvokeVoidAsync("location.reload");
    }

    #endregion

    // ============================================================ \\
}
