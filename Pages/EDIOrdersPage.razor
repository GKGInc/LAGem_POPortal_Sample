@page "/EDIOrdersPage"
@using DevExpress.Data.Filtering
@using DevExpress.Xpo
@using LAGem_POPortal.Authentication
@using DevExpress.Blazor;
@using LAGem_POPortal.Data
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@* @inject UserAccountService userAccountService *@

@using LAGem_POPortal.Models
@using Microsoft.EntityFrameworkCore

<AuthorizeView>
    <Authorized Context="Authorized">

<DxFormLayout CssClass="w-100">
    <DxFormLayoutItem Context="BusinessParnerSelector" ColSpanMd="12" CssClass="fl">

        <DxFormLayout CssClass="w-100">
            <DxFormLayoutItem Context="EDISummary" ColSpanMd="12">

                <DxGrid @ref="Grid"
                        Data="GridData"
                        CssClass="@gridCss"
                        Name="MainGrid"
                        KeyFieldName="Id"
                        PagerPosition="GridPagerPosition.Bottom"
                        PageSizeSelectorVisible="true"
                        PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25 })"
                        PageSizeSelectorAllRowsItemVisible="true"
                        PageSize="@PageSize"
                        @bind-PageIndex="@ActivePageIndex"
                        AutoFitColumnWidths="true"
                        AutoCollapseDetailRow="@AutoCollapseDetailRow"
                        AutoExpandAllGroupRows="@AutoExpandAllGroupRows"
                        ColumnResizeMode="@CurrentColumnResizeMode"
                        EditMode="GridEditMode.EditRow"
                        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                        FooterDisplayMode="GridFooterDisplayMode.Auto"
                        ShowGroupPanel="@ShowGroupPanel"
                        ShowSearchBox="@ShowSearchBox"
                        SearchText=""
                        SearchTextParseMode="CurrentSearchTextParseMode"
                        CustomizeElement="Grid_CustomizeElement"
                        CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                        EditModelSaving="Grid_EditModelSaving"
                        DataItemDeleting="Grid_DataItemDeleting"
                        CustomizeEditModel="Grid_CustomizeEditModel"
                        HighlightRowOnHover="true"
                        TextWrapEnabled="true"
                        ValidationEnabled="false">
                    <Columns>
                        <DxGridDataColumn FieldName="ShipYear" Caption="Ship Year" DisplayFormat="0" ReadOnly="true" />
                        <DxGridDataColumn FieldName="ShipMonth" Caption="Ship Month" DisplayFormat="n0" ReadOnly="true" Visible="false" />
                        <DxGridDataColumn FieldName="ShipWeek" Caption="Ship Week" DisplayFormat="n0" ReadOnly="true" />
                        <DxGridDataColumn FieldName="TradingPartnerCode" Caption="Customer Code" ReadOnly="true" Visible="false" />
                        <DxGridDataColumn FieldName="TradingPartnerName" Caption="Customer Name" ReadOnly="true" />
                        <DxGridDataColumn FieldName="PONumber" Caption="PO Number" ReadOnly="true" />
                        <DxGridDataColumn FieldName="ShipDate" Caption="Ship Date" DisplayFormat="d" />
                        <DxGridDataColumn FieldName="CancelDate" Caption="Cancel Date" DisplayFormat="d" />

                        <DxGridDataColumn FieldName="ItemsCount" Caption="Items" DisplayFormat="n0" ReadOnly="true" />
                        <DxGridDataColumn FieldName="SOQty" Caption="SO Qty" DisplayFormat="n0" ReadOnly="true" />
                        <DxGridDataColumn FieldName="ExtPrice" Caption="Ext Price" DisplayFormat="n3" ReadOnly="true" />

                        <DxGridCommandColumn Width="150px" Visible="false"
                                             DeleteButtonVisible="false"
                                             EditButtonVisible="false"
                                             CancelButtonVisible="false"
                                             SaveButtonVisible="false"
                                             NewButtonVisible="false" />
                    </Columns>
                    @* <ToolbarTemplate Context="GridToolbar">
                        <DxToolbar Context="GridToolbar" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                            <Items>
                                <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Auto Fit Columns" Click="Grid_FitWidths" RenderStyle="ButtonRenderStyle.Secondary" />
                                <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Column Chooser" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-icon-column-chooser" Click="ColumnChooserButton_Click" />
                                <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Refresh Data" RenderStyle="ButtonRenderStyle.Secondary" Click="RefreshData_Click" />
                                <DxToolbarItem BeginGroup="true" Alignment="ToolbarItemAlignment.Left">
                                    <Template Context="toolbar_item_context">
                                        <div class="d-flex flex-row align-items-center h-100">
                                            <DxCheckBox Checked="usePopupEditForm" CheckedChanged="new Func<bool, Task>(UsePopupEditForm_CheckedChanged)">Use Popup Edit Form</DxCheckBox>
                                        </div>
                                    </Template>
                                </DxToolbarItem>
                            </Items>
                        </DxToolbar>
                    </ToolbarTemplate> *@
                    <DetailRowTemplate Context="EDIDetailFormContext">
                        @{
                            selectedRow = (EdiOrderDetailData)EDIDetailFormContext.DataItem;
                            selectedPO = selectedRow.PONumber;
                            LoadGridDetailData(selectedRow.PONumber);
                            <div class="mb-2">
                                @headerNote
                            </div>
                            <DxGrid @ref="GridDetail"
                                    Data="GridDetailData"
                                    CssClass="@gridCss"
                                    PopupEditFormCssClass="my-popup-style"
                                    KeyFieldName="Id"
                                    PagerPosition="GridPagerPosition.Bottom"
                                    PageSizeSelectorVisible="true"
                                    PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25 })"
                                    PageSizeSelectorAllRowsItemVisible="true"
                                    PageSize="@PageSize"
                                    @bind-PageIndex="@ActivePageIndex"
                                    AutoFitColumnWidths="true"
                                    ColumnResizeMode="@CurrentColumnResizeMode"
                                    EditMode="@CurrentEditMode"
                                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                                    FooterDisplayMode="GridFooterDisplayMode.Auto"
                                    SearchText=""
                                    SearchTextParseMode="CurrentSearchTextParseMode"
                                    CustomizeElement="Grid_CustomizeElement"
                                    CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                                    EditModelSaving="Grid_EditModelSaving"
                                    DataItemDeleting="Grid_DataItemDeleting"
                                    CustomizeEditModel="Grid_CustomizeEditModel"
                                    HighlightRowOnHover="true"
                                    ValidationEnabled="false">
                                <Columns>

                                    <DxGridDataColumn FieldName="ShipYear" Caption="Ship Year" DisplayFormat="0" ReadOnly="true" Visible="false" />
                                    <DxGridDataColumn FieldName="ShipMonth" Caption="Ship Month" DisplayFormat="n0" ReadOnly="true" Visible="false" />
                                    <DxGridDataColumn FieldName="ShipWeek" Caption="Ship Week" DisplayFormat="n0" ReadOnly="true" Visible="false" />
                                    <DxGridDataColumn FieldName="TradingPartnerCode" Caption="Trading Partner Code" ReadOnly="true" Visible="false" />
                                    <DxGridDataColumn FieldName="TradingPartnerName" Caption="Trading Partner Name" ReadOnly="true" />
                                    <DxGridDataColumn FieldName="PONumber" Caption="PO Number" ReadOnly="true" />
                                    <DxGridDataColumn FieldName="PODate" Caption="PO Date" DisplayFormat="d" ReadOnly="true" />
                                    <DxGridDataColumn FieldName="POStatus" Caption="PO Status" ReadOnly="true" />
                                    <DxGridDataColumn FieldName="ProductNo" Caption="Product No" ReadOnly="true" />

                                    <DxGridDataColumn FieldName="SOQty" Caption="SO Qty" DisplayFormat="n0" ReadOnly="true" />
                                    <DxGridDataColumn FieldName="Price" Caption="Price" DisplayFormat="n3" ReadOnly="true" />
                                    <DxGridDataColumn FieldName="ExtPrice" Caption="Ext Price" DisplayFormat="n3" ReadOnly="true" />

                                    <DxGridDataColumn FieldName="TransactionType" Caption="Transaction" ReadOnly="true" />
                                    <DxGridDataColumn FieldName="ShipDate" Caption="Ship Date" DisplayFormat="d" />
                                    <DxGridDataColumn FieldName="CancelDate" Caption="Cancel Date" DisplayFormat="d" />

                                    <DxGridCommandColumn Width="100px" Visible="false"
                                                         DeleteButtonVisible="false"
                                                         EditButtonVisible="true"
                                                         CancelButtonVisible="true"
                                                         SaveButtonVisible="true"
                                                         NewButtonVisible="false" />
                                </Columns>
                                
                            </DxGrid>
                        }
                        @* <SOTasksMaterialsPage SODetailMaterial="(SODetailMaterial)context.DataItem" /> *@
                    </DetailRowTemplate>
                </DxGrid>

            </DxFormLayoutItem>
        </DxFormLayout>

    </DxFormLayoutItem>

</DxFormLayout>

    </Authorized>
    <NotAuthorized Context="NotAuthorized">
        @*  @{ navManager.NavigateTo("/Login");} *@
        <h3>Please <a href="/login">Login</a> to access the Portal</h3>
        @* <LoginPage /> *@
        @* <LoginRedirect /> *@
    </NotAuthorized>
</AuthorizeView>

<style>
    .highlighted-item > td {
        background-color: rgba(245, 198, 203, 0.5);
    }

    .dx-datagrid-headers {
        white-space: normal;
    }

    .dx-datagrid-nowrap.dx-datagrid-headers .dx-header-row > td > .dx-datagrid-text-content {
        white-space: normal;
    }

    .hide-toolbar .dxbl-grid-toolbar-container {
        display: none;
    }

    .my-popup-style {
        min-width: 1200px;
        min-height: 450px;
    }

    .my-partnertasks-grid .dxbl-fl-ctrl dxbl-fl-ctrl-nc {
        margin-top: 0px;
    }

    .fl > div {
        margin-top: 0 !important;
    }
</style>

@code {
    // ============================================================ \\

    #region Variables

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    DxGrid Grid { get; set; }
    DxGrid GridDetail { get; set; }

    IEnumerable<EdiOrderDetailData> GridData { get; set; }
    IEnumerable<EdiOrderDetailData> GridDetailData { get; set; }

    Dictionary<string, GridSearchTextParseMode> SearchTextParseModes { get; } = new Dictionary<string, GridSearchTextParseMode>{
        { "Group Words By And", GridSearchTextParseMode.GroupWordsByAnd },
        { "Group Words By Or", GridSearchTextParseMode.GroupWordsByOr },
        { "Exact Match", GridSearchTextParseMode.ExactMatch }
    };
    void ChangeSearchMode(string key)
    {
        CurrentSearchTextParseModeDisplayText = key;
        CurrentSearchTextParseMode = SearchTextParseModes[key];
    }
    string CurrentSearchTextParseModeDisplayText { get; set; } = "Group Words By And";
    GridSearchTextParseMode CurrentSearchTextParseMode { get; set; } = GridSearchTextParseMode.GroupWordsByAnd;

    GridColumnResizeMode CurrentColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer; // GridColumnResizeMode.NextColumn;
    string CurrentColumnResizeModeDisplayText { get; set; } = "Next Column";
    Dictionary<string, GridColumnResizeMode> GridColumnResizeModes { get; } = new Dictionary<string,
    GridColumnResizeMode>{
        { "Disabled", GridColumnResizeMode.Disabled },                  //A user cannot resize columns.
        { "Next Column", GridColumnResizeMode.NextColumn },             //When a user resizes a column, the width of the column to the right changes, but the Grid's total width does not change.
        { "Columns Container", GridColumnResizeMode.ColumnsContainer }  //When a user resizes a column, all other columns retain width settings, but the width of the entire column container changes proportionally.
    };
    void ChangeResizeMode(string key)
    {
        CurrentColumnResizeModeDisplayText = key;
        CurrentColumnResizeMode = GridColumnResizeModes[key];
    }
    bool usePopupEditForm { get; set; } = true;
    GridEditMode CurrentEditMode { get { return usePopupEditForm ? GridEditMode.PopupEditForm : GridEditMode.EditForm; } } // GridEditMode.EditRow

    IReadOnlyList<object> SelectedDataItems { get; set; }
    IEnumerable<GridSelectAllCheckboxMode> SelectAllCheckboxModes { get; } = Enum.GetValues<GridSelectAllCheckboxMode>();
    GridSelectAllCheckboxMode CurrentSelectAllCheckboxMode { get; set; }

    Dictionary<string, string[]> GroupInfo { get; } = new Dictionary<string, string[]> {
        { "ShipYear", new string[] { "ShipYear" } },
        { "ShipYear, ShipWeek", new string[] { "ShipYear", "ShipWeek" } },
        { "ShipYear, ShipMonth, ShipWeek", new string[] { "ShipYear", "ShipMonth", "ShipWeek" } }
    };
    string CurrentGroupInfoKey { get; set; } = "ShipYear";

    bool ShowGroupPanel { get; set; } = true;
    bool ShowSearchBox { get; set; } = true;

    bool AutoCollapseDetailRow { get; set; } = true;
    bool AutoExpandAllGroupRows { get; set; } = true;
    bool TextWrapEnabled = true;
    bool WordWrapEnabled = false;

    int PageCount { get; set; } = 0;
    int TotalRecords { get; set; } = 0;
    int PageSize { get; set; } = 20;
    int ActivePageIndex { get; set; } = 0;

    bool AutoFitColWidths { get; set; } = true;
    //bool IsAutoFitPending { get; set; } = true;
    bool isMainGridAutoFitPending { get; set; } = true;
    bool isDetailGridAutoFitPending { get; set; } = true;

    bool editOnInsert { get; set; } = false;
    bool filteringMainData { get; set; } = false;

    bool showToolbar { get; set; } = false;
    string gridCss => !showToolbar ? "hide-toolbar my-partnertasks-grid" : "my-partnertasks-grid";
    DateTime blankDate { get; set; } = new DateTime(1800, 1, 1);
    CriteriaOperator gridFilterCriteria { get; set; }

    string headerNote { get; set; } = "";
    EdiOrderDetailData selectedRow { get; set; }
    string selectedPO { get; set; } = "";

    #endregion

    // ============================================================ \\

    #region Constructors/Page Functions

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        isMainGridAutoFitPending = true;
        isDetailGridAutoFitPending = true;

        SqlData sqlData = new SqlData();
        GridData = await sqlData.GetEdiOrderSummaryViewData();
        GridDetailData = await sqlData.GetEdiOrderDetailViewData(selectedPO);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Grid != null)
            {
                //var currentGroupInfo = GroupInfo[key];
                Grid.BeginUpdate();
                Grid.ClearSort();
                Grid.GroupBy("ShipYear");
                Grid.GroupBy("ShipWeek");
                Grid.SortBy("ShipYear", GridColumnSortOrder.Descending);
                //SOGrid.ExpandDetailRow(0);
                Grid.EndUpdate();
            }

            await DataLoadedTcs.Task; // Waits for grid data to load
                                      // Grid.ExpandDetailRow(0);
        }

        if (Grid != null && isMainGridAutoFitPending)
        {
            isMainGridAutoFitPending = false;
            await Grid.WaitForDataLoadAsync();
            Grid.AutoFitColumnWidths();
        }
        if (GridDetail != null && isDetailGridAutoFitPending)
        {
            isDetailGridAutoFitPending = false;
            await GridDetail.WaitForDataLoadAsync();
            GridDetail.AutoFitColumnWidths();
        }
    }

    public void Dispose()
    {
        // Northwind?.Dispose();
    }

    #endregion

    // ============================================================ \\

    #region Load/Refresh Functions

    void Grid_FitWidths()
    {
        //StateHasChanged();
        Grid.AutoFitColumnWidths();
    }

    void ColumnChooserButton_Click()
    {
        Grid.ShowColumnChooser();
    }

    async void RefreshData_Click()
    {
        SqlData sqlData = new SqlData();
        GridData = await sqlData.GetEdiOrderSummaryViewData();
        GridDetailData = await sqlData.GetEdiOrderDetailViewData(selectedPO);
    }

    async Task UsePopupEditForm_CheckedChanged(bool value)
    {
        usePopupEditForm = value;
        await Grid.CancelEditAsync();
    }

    async void LoadGridDetailData(string poNo)
    {
        SqlData sqlData = new SqlData();
        GridDetailData = await sqlData.GetEdiOrderDetailViewData(poNo);

        await InvokeAsync(StateHasChanged); // <-- refreshes
    }

    #endregion

    // ============================================================ \\

    #region Main Grid Functions

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        //if (e.Grid.KeyFieldName == "TaskId" && e.ElementType == GridElementType.DataRow && (System.Boolean)e.Grid.GetRowValue(e.VisibleIndex, "isUsed") == true)
        //{
        //    e.Style = "opacity: 0.5";
        //}
        //if (e.Grid.KeyFieldName == "Id" && e.ElementType == GridElementType.DataRow && (int)e.Grid.GetRowValue(e.VisibleIndex, "TasksCount") > 0)
        //{
        //    e.CssClass = "highlighted-item";
        //}

        // if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "FactoryCancel")
        // {
        //     e.Style = "font-weight: 800";
        // }
        // if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "PONumber")
        // {
        //     e.Style = "font-weight: 800";
        // }
        // if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "Units")
        // {
        //     decimal units = (decimal)e.Grid.GetRowValue(e.VisibleIndex, "Units");
        //     if (units > 100)
        //         e.Style = "color: red";
        // }
    }
    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        // string[] dateList = new string[] { "SODate", "StartDate", "EndDate", "ShipmentDate", "ShipToETA" };
        // if (dateList.Contains(e.FieldName))            
        if (e.Value.GetType() == typeof(DateTime))
        {
            if (DateTime.Parse(e.Value.ToString()) <= new DateTime(1900, 1, 1))
                e.DisplayText = "";
        }
    }
    
    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            if (e.EditModel.GetType() == typeof(EdiOrderDetailData))
            {
                var newObject = (SODetailMaterial)e.EditModel;

                
            }
        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        e.Cancel = true;

        if (e.EditModel.GetType() == typeof(EdiOrderDetailData))
        {
            var savingObject = (EdiOrderDetailData)e.EditModel;

            @* if (e.IsNew)
                await InsertDataAsync(savingObject);
            else
            {
                if (savingObject....Id == 0)
                    await InsertDataAsync(savingObject);
                else
                    await UpdateDataAsync(savingObject);
            } *@

            await Grid.CancelEditAsync();
            await GridDetail.CancelEditAsync();
        }
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem.GetType() == typeof(EdiOrderDetailData))
        {
            var deletingObject = (EdiOrderDetailData)e.DataItem;

            await DeleteBusinessPartnerTaskDataAsync(deletingObject);

            await Grid.CancelEditAsync();
            await GridDetail.CancelEditAsync();
        }
    }
    async Task Grid_EditCanceling(GridEditCancelingEventArgs e)
    {
       
    }

    async Task InsertDataAsync(EdiOrderDetailData item)
    {
        @* string query = @"INSERT INTO [PIMS].[dbo].[SODetailTask] ([SODetailTaskId]
      ,[SODetailMaterialId]
      ,[SODetailId]
      ,[SOLineNo]
      ,[SOSubLineNo]
      ,[SoSubLineTypeId]
      ,[SoSubLineType]
      ,[ProductId]
      ,[MaterialId]
      ,[Qty]
      ,[TaskId]
      ,[Task]
      ,[TaskStatusId]
      ,[TaskNote]
      ,[LegacySystemId])
        SELECT (SELECT MAX([SODetailTaskId]) + 1 FROM [PIMS].[dbo].[SODetailTask]),{0},{1},{2},{3},{4},'{5}',{6},{7},{8},{9},'{10}',{11},'{12}',{13} ";
        string fullQuery = string.Format(query
        , item.SODetailMaterialId   // 0
        , item.SODetailId           // 1
        , item.SOLineNo             // 2
        , item.SOSubLineNo          // 3
        , item.SoSubLineTypeId      // 4
        , item.SoSubLineType        // 5 -
        , item.ProductId            // 6
        , item.MaterialId           // 7
        , item.Qty                  // 8
        , item.TaskId               // 9
        , item.Task                 //10 -
        , item.TaskStatusId         //11
        , item.TaskNote             //12 -
        , item.LegacySystemId       //13
        );

        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        LoadGridData(selectedRow.SOHeaderId);
        LoadMaterialTasksGridData(selectedRow); *@
    }
    async Task UpdateDataAsync(EdiOrderDetailData item)
    {
       @*  string query = @"UPDATE [PIMS].[dbo].[SODetailTask] SET
       [SODetailMaterialId] = {0}
      ,[SODetailId] = {1}
      ,[SOLineNo] = {2}
      ,[SOSubLineNo] = {3}
      ,[SoSubLineTypeId] = {4}
      ,[SoSubLineType] = '{5}'
      ,[ProductId] = {6}
      ,[MaterialId] = {7}
      ,[Qty] = {8}
      ,[TaskId] = {9}
      ,[Task] = '{10}'
      ,[TaskStatusId] = {11}
      ,[TaskNote] = '{12}'
      ,[LegacySystemId] = {13}
      WHERE [SODetailTaskId] = {14}";
        string fullQuery = string.Format(query
       , item.SODetailMaterialId   // 0
       , item.SODetailId           // 1
       , item.SOLineNo             // 2
       , item.SOSubLineNo          // 3
       , item.SoSubLineTypeId      // 4
       , item.SoSubLineType        // 5 -
       , item.ProductId            // 6
       , item.MaterialId           // 7
       , item.Qty                  // 8
       , item.TaskId               // 9
       , item.Task                 //10 -
       , item.TaskStatusId         //11
       , item.TaskNote             //12 -
       , item.LegacySystemId       //13
       , item.SODetailTaskId       //14
       );

        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        LoadMaterialTasksGridData(selectedRow); *@
    }
    async Task DeleteBusinessPartnerTaskDataAsync(EdiOrderDetailData item)
    {
        @* //string query = @"UPDATE [PIMS].[dbo].[SODetailTask] SET [DeletedOn] = GETDATE() WHERE [SODetailTaskId] = {0}";
        string query = @"DELETE FROM [PIMS].[dbo].[SODetailTask] WHERE [SODetailTaskId] = {0}";
        string fullQuery = string.Format(query, item.SODetailTaskId);
        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        LoadGridData(selectedRow.SOHeaderId);
        //LoadMaterialTasksGridData(selectedRow.SOHeaderId, selectedRow.SODetailId, selectedRow.MaterialId);
        LoadMaterialTasksGridData(selectedRow); *@
    }

    #endregion

    // ============================================================ \\
}