@page "/CustomerSoPoSummaryPage"
@using LAGem_POPortal.Authentication
@using DevExpress.Blazor;
@using LAGem_POPortal.Data
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@* @inject UserAccountService userAccountService *@

@using LAGem_POPortal.Models
@using Microsoft.EntityFrameworkCore

<DxGrid @ref="SODetailGrid"
        Data="SODetailGridData"
        KeyFieldName="Id"
        PagerPosition="GridPagerPosition.Bottom"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25 })"
        PageSizeSelectorAllRowsItemVisible="true"
        @bind-PageIndex="@ActivePageIndex"
        FooterDisplayMode="GridFooterDisplayMode.Auto"
        PageSize="@PageSize"
        AutoCollapseDetailRow="true"
        ValidationEnabled="false"
        EditMode="GridEditMode.EditRow"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
        ShowSearchBox="false"
        SearchText=""
        SearchTextParseMode="CurrentSearchTextParseMode"
        ShowGroupPanel="false"
        CustomizeElement="Grid_CustomizeElement"
        CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        CustomizeEditModel="Grid_CustomizeEditModel"
        ColumnResizeMode="GridColumnResizeMode.NextColumn"
        TextWrapEnabled="false"
        HighlightRowOnHover="true">
    <Columns>
        @* <DxGridDataColumn FieldName="SOShipYear" Caption="SO Ship Year" DisplayFormat="0" ReadOnly="true" />
        <DxGridDataColumn FieldName="SOShipWeek" Caption="SO Ship Week" DisplayFormat="n0" ReadOnly="true" /> *@
        <DxGridDataColumn FieldName="CustomerName" Caption="Customer Name" ReadOnly="true" Visible="false" />
        <DxGridDataColumn FieldName="CustomerPO" Caption="Customer PO" ReadOnly="true" />
        <DxGridDataColumn FieldName="SONumber" Caption="SO Number" ReadOnly="true" />
        <DxGridDataColumn FieldName="VendorPO" Caption="Vendor PO" ReadOnly="true" />
        <DxGridDataColumn FieldName="StartDate" Caption="Customer Ship Date" DisplayFormat="d" />
        <DxGridDataColumn FieldName="TrackingNumber" Caption="Tracking No" ReadOnly="true" />
        <DxGridDataColumn FieldName="SOQty" Caption="SO Qty" DisplayFormat="n0" ReadOnly="true" />
        <DxGridDataColumn FieldName="SORetail" Caption="SO Retail" DisplayFormat="n3" ReadOnly="true" />
        <DxGridDataColumn FieldName="ShipmentQty" Caption="Shipment Qty" DisplayFormat="n0" ReadOnly="true" />

        @* <DxGridCommandColumn Width="150px"
                             EditButtonVisible="true"
                             CancelButtonVisible="true"
                             SaveButtonVisible="true"
                             NewButtonVisible="true" /> *@
    </Columns>
    <DetailRowTemplate>
        <CustomerSoPoDetailPage SODetailData="(CustomerSoPoData)context.DataItem" />
    </DetailRowTemplate>
</DxGrid>


@code {
    // ============================================================ \\

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    bool AutoCollapseDetailRow { get; set; }
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    [Parameter]
    public CustomerSoPoData SODetailData { get; set; }

    IGrid SODetailGrid { get; set; }
    IEnumerable<CustomerSoPoData> SODetailGridData { get; set; }

    int PageSize { get; set; } = 20;
    int ActivePageIndex { get; set; } = 0;
    int PageCount { get; set; } = 0;
    int TotalRecords { get; set; } = 0;

    Dictionary<string, GridSearchTextParseMode> SearchTextParseModes { get; } = new Dictionary<string, GridSearchTextParseMode>{
        { "Group Words By And", GridSearchTextParseMode.GroupWordsByAnd },
        { "Group Words By Or", GridSearchTextParseMode.GroupWordsByOr },
        { "Exact Match", GridSearchTextParseMode.ExactMatch }
    };
    void ChangeSearchMode(string key)
    {
        CurrentSearchTextParseModeDisplayText = key;
        CurrentSearchTextParseMode = SearchTextParseModes[key];
    }
    string CurrentSearchTextParseModeDisplayText { get; set; } = "Group Words By And";
    GridSearchTextParseMode CurrentSearchTextParseMode { get; set; } = GridSearchTextParseMode.GroupWordsByAnd;

    bool AutoFitColWidths { get; set; } = true;
    bool IsAutoFitPending { get; set; } = true;

    // ============================================================ \\

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        // var user = (await authenticationState).User;
        // if (!user.Identity.IsAuthenticated)
        // {
        //     //NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        //     //navManager.NavigateTo("/Login", true);
        //     //navManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(navManager.Uri)}");
        // }
        // else { }

        // var authstate = await authStateProvider.GetAuthenticationStateAsync();
        // var userClaimsPrincipal = authstate.User; // ClaimsPrincipal
        // var userClaimsPrincipalName = userClaimsPrincipal.Identity.Name;

        // if (userClaimsPrincipalName != null)
        // {
        //     var userData = userAccountService.GetUserAccountFromClaims(userClaimsPrincipal);

        //     if (userData != null)
        //     {
        //         if (userData.Role == "Administrator") { }
        //     }
        //     else { }
        // }

        // DetailGridData = QueueProcesses.Where(i => i.FOID == DepartmentQueue.OID).ToArray();
        // LocationGridData = QueueLocations.Where(i => i.DepartmentQueueOID == DepartmentQueue.OID).ToArray();

        SqlData sqlData = new SqlData();
        SODetailGridData = await sqlData.GetCustomerSoPoSummaryData(SODetailData.SOShipYear, SODetailData.SOShipWeek);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task; // Waits for grid data to load
                                      // Grid.ExpandDetailRow(0);
        }

        if (SODetailGrid != null && SODetailGrid != null && IsAutoFitPending)
        {
            IsAutoFitPending = false;
            await SODetailGrid.WaitForDataLoadAsync();
            SODetailGrid.AutoFitColumnWidths();
        }
    }

    // ============================================================ \\

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        // // if (e.ElementType == GridElementType.DataRow && (System.Decimal)e.Grid.GetRowValue(e.VisibleIndex, "Total") > 1000)
        // // {
        // //     e.CssClass = "highlighted-item";
        // // }
        // if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "FactoryCancel")
        // {
        //     e.Style = "font-weight: 800";
        // }
        // if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "PONumber")
        // {
        //     e.Style = "font-weight: 800";
        // }
        // if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "Units")
        // {
        //     decimal units = (decimal)e.Grid.GetRowValue(e.VisibleIndex, "Units");
        //     if (units > 100)
        //         e.Style = "color: red";
        // }
    }
    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        // string[] dateList = new string[] { "SODate", "StartDate", "EndDate", "ShipmentDate", "ShipToETA" };
        // if (dateList.Contains(e.FieldName))
        if (e.Value.GetType() == typeof(DateTime))
        {
            if (DateTime.Parse(e.Value.ToString()) <= new DateTime(1900, 1, 1))
                e.DisplayText = "";
        }
    }
    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            if (e.EditModel.GetType() == typeof(CustomerSoPoData))
            {
                var newObject = (CustomerSoPoData)e.EditModel;
                // 

            }
        }
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (e.EditModel.GetType() == typeof(CustomerSoPoData))
        {
            var editableObject = (CustomerSoPoData)e.EditModel;

            // if (e.IsNew)
            //...
        }

        await UpdateDataAsync();
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem.GetType() == typeof(CustomerSoPoData))
        {
            var deletingObject = (CustomerSoPoData)e.DataItem;

        }

        // await NwindDataService.RemoveEmployeeAsync((EditableEmployee)e.DataItem);
        await UpdateDataAsync();
    }
    async Task UpdateDataAsync()
    {
        // DataSource = await NwindDataService.GetEmployeesEditableAsync();
    }

    // ============================================================ \\
}