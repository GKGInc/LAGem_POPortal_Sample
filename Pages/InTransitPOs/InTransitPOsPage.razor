@page "/InTransitPOs"
@inherits InTransitPOsBase

<script>
    /* var _input;
    window.AssignGotFocus = function () {
        _input = document.getElementsByClassName("focus-text-box")[0];
        _input.select();
        _input.addEventListener("focus", function (event) {
            setTimeout(function () { _input.select(); }, 0);
        });
    }*/

    window.getWindowSize = function () {
        return {
            width: window.innerWidth,
            height: window.innerHeight
        };
    };

    function resizeListener(dotnethelper) {
        $(window).resize(() => {
            clearTimeout(window.resizedFinished);
            window.resizedFinished = setTimeout(function () {
                dotnethelper.invokeMethodAsync('UpdatePage').then(() => {
                }).catch(error => {
                    console.log("Error: " + error);
                });
            }, 250);
        });
    }

    window.registerViewportChangeCallback = (dotnetHelper) => {
        window.addEventListener('load', () => {
            dotnetHelper.invokeMethodAsync('OnResize', window.innerWidth, window.innerHeight);
        });
        window.addEventListener('resize', () => {
            dotnetHelper.invokeMethodAsync('OnResize', window.innerWidth, window.innerHeight);
        });
    }

    window.getDimensions = function () {
        return {
            width: window.innerWidth,
            height: window.innerHeight
        };
    };

    function focusEditor() {
        // setTimeout(function myfunction() {
        //     var inputElement = document.querySelectorAll(".dxbs-grid-edit-form input")[5];   //Get the editor. In my sample, the Summary field editor is the 5th editor.
        //     inputElement.focus();
        // }, 200);
    }


</script>
<script src="https://code.jquery.com/jquery-3.6.0.slim.min.js" type="text/javascript"></script>
<script src="https://code.jquery.com/jquery-3.6.0.slim.min.js" type="text/javascript"></script>

<AuthorizeView>
    <Authorized Context="Authorized">
        @* <div hidden="!@HiddenGrid">
            <a href="/login">@HeaderMessage</a>
        </div> *@

        <DxPopup @bind-Visible="@PopupVisible"
                 AllowDrag="true"
                 AllowDragByHeaderOnly="allowDragByHeaderOnly"
                 ShowFooter="true"
                 CloseOnEscape="false"
                 CloseOnOutsideClick="false"
                 ShowCloseButton="false"
                 HeaderText="@popupTitleText"
                 BodyText="@popupBodyText"
                 PositionX="positionX"
                 PositionY="positionY"
                 DragCompleted="OnPopupDragCompleted">
            <FooterContentTemplate Context="Context">
                <div class="popup-demo-events-footer">
                    <DxButton CssClass="popup-demo-events-button ms-2" RenderStyle="ButtonRenderStyle.Primary" Enabled="@isPopupOkButtonEnabled" Text="@popupOkButtonText" Click="OkPopupClick" />
                    <DxButton CssClass="popup-demo-events-button ms-2" RenderStyle="ButtonRenderStyle.Secondary" Visible="@isPopupCancelButtonVisible" Text="@popupCancelButtonText" Click="CancelPopupClick" />
                </div>
            </FooterContentTemplate>
        </DxPopup>

        @* <div hidden="@HiddenGrid"> *@
        <div >
            <DxGrid @ref="Grid"
                    Data="GridData"
                    KeyFieldName="Id"
                    PagerPosition="GridPagerPosition.Bottom"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25, 30 })"
                    PageSizeSelectorAllRowsItemVisible="true"
                    @bind-PageIndex="@ActivePageIndex"
                    PageSize="@PageSize"
                    ShowAllRows="@ShowAllRows"
                    AutoFitColumnWidths="true"
                    AutoCollapseDetailRow="true"
                    HorizontalScrollBarMode="ScrollBarMode.Visible"
                    VerticalScrollBarMode="ScrollBarMode.Visible"
                    VerticalScrollableHeight="@scrollHeight"
                    ColumnResizeMode="@CurrentColumnResizeMode"
                    EditMode="@CurrentEditMode"
                    PopupEditFormHeaderText="@mainGridEditFormHeaderText"
                    PopupEditFormCssClass="my-popup-style"
                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                    FooterDisplayMode="GridFooterDisplayMode.Auto"
                    TextWrapEnabled="@TextWrapEnabled"
                    ValidationEnabled="false"
                    WordWrapEnabled="@WordWrapEnabled"
                    HighlightRowOnHover="true"
                    ShowFilterRow="true"
                    ShowGroupPanel="true"
                    ShowSearchBox="true"
                    SearchText=""
                    SearchTextParseMode="CurrentSearchTextParseMode"
                    Visible="false"
                    CustomizeElement="Grid_CustomizeElement"
                    CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                    CustomizeEditModel="Grid_CustomizeEditModel"
                    EditModelSaving="Grid_EditModelSaving"
                    DataItemDeleting="Grid_DataItemDeleting"
                    RowClick="Grid_OnRowClick"
                    CustomGroup="Grid_CustomGroup"
                    CustomizeGroupValueDisplayText="Grid_CustomizeGroupValueDisplayText"
                    CssClass="mainGridCSS">
                <Columns>
                    <DxGridCommandColumn Width="150px" Visible="true"
                                         DeleteButtonVisible="false"
                                         EditButtonVisible="true"
                                         CancelButtonVisible="true"
                                         SaveButtonVisible="true"
                                         NewButtonVisible="true" FixedPosition="GridColumnFixedPosition.Left" />

                    <DxGridDataColumn FieldName="VendorName" Caption="Vendor" ReadOnly="true" MinWidth="80" />@* FixedPosition="GridColumnFixedPosition.Left" *@

                    <DxGridDataColumn FieldName="ShipmentDate" Caption="Shipment Date" ReadOnly="false" DisplayFormat="d" MinWidth="60" />                    
                    <DxGridDataColumn FieldName="InvoiceNo" Caption="Invoice No" ReadOnly="false" Width="100" MinWidth="60" />
                    @* <DxGridDataColumn FieldName="TrackingNumber" Caption="Tracking Number" ReadOnly="false" MinWidth="60" GroupIndex="0" GroupInterval="GridColumnGroupInterval.Custom" /> *@
                    @* <DxGridDataColumn FieldName="TrackingNumber" Caption="Tracking Number" ReadOnly="false" MinWidth="60" GroupIndex="0" > *@
                    <DxGridDataColumn FieldName="TrackingNumber" Caption="Tracking Number" ReadOnly="false" MinWidth="60" Visible="false" />
                    <DxGridDataColumn FieldName="GroupId" Caption="Tracking Number" ReadOnly="false" MinWidth="60" GroupIndex="0">
                        <GroupRowTemplate>
                            @* <text>@context.ColumnCaption: @context.GroupValue</text> *@
                            @{
                                string displayText = "";
                                DateTime blankDate = new DateTime(1900, 1, 1);
                                //string trackingNumber = @context.GroupValue.ToString();
                                int groupId = (int)@context.GroupValue;
                                if (groupId > 0) //if (trackingNumber != null) //if (!string.IsNullOrWhiteSpace(trackingNumber))
                                {
                                    //List<ShippingData> trackingNumberList = (context.Grid.Data as IEnumerable<ShippingData>).Where(c => c.TrackingNumber != null && c.TrackingNumber == trackingNumber).ToList();
                                    List<ShippingData> trackingNumberList = (context.Grid.Data as IEnumerable<ShippingData>).Where(c => c.GroupId == groupId).ToList();

                                    string trackingNumber = trackingNumberList.FirstOrDefault().GroupLabel;
                                    string transportModes = string.Join(",", trackingNumberList.Select(x => x.TransportationMode).Distinct().ToList());
                                    //string shipDate = trackingNumberList.Where(x => x.ShipmentDate > blankDate).Select(x => x.ShipmentDate).DefaultIfEmpty(blankDate).Max().ToString("MM/dd");
                                    //string etaDate = trackingNumberList.Where(x => x.ShipToETA > blankDate).Select(x => x.ShipToETA).DefaultIfEmpty(blankDate).Max().ToString("MM/dd");
                                    string shipDate = string.Join(",", trackingNumberList.Where(x => x.ShipmentDate > blankDate).Select(x => x.ShipmentDate).Distinct().ToList().Select(x => x.ToString("MM/dd")));
                                    string etaDate = string.Join(",", trackingNumberList.Where(x => x.ShipToETA > blankDate).Select(x => x.ShipToETA).Distinct().ToList().Select(x => x.ToString("MM/dd")));
                                    int totalUnits = trackingNumberList.Select(x => x.OrderQty).Sum();
                                    string invoiceNos = string.Join(",", trackingNumberList.Select(x => x.InvoiceNo).Distinct().ToList());

                                    if (string.IsNullOrWhiteSpace(trackingNumber)) trackingNumber = "None";
                                    if (string.IsNullOrWhiteSpace(transportModes)) transportModes = "None";
                                    if (string.IsNullOrWhiteSpace(shipDate)) shipDate = "None";
                                    if (string.IsNullOrWhiteSpace(etaDate)) etaDate = "None";
                                    if (string.IsNullOrWhiteSpace(invoiceNos)) invoiceNos = "None";

                                    displayText = string.Format("{0} [Transport Modes:{1}] [Ship:{2}] [ETA:{3}] [Total Units:{4}] [Invoices:{5}] ", trackingNumber, transportModes, shipDate, etaDate, totalUnits, invoiceNos);

                                    string label = "TransportModes";

                                    if (trackingNumberList.Any())
                                    {
                                        // <text> (</text> <text>, </text> <text>Transport Modes: </text><b> transportModes </b><text>) </text>
                                        <table style="border: 1px solid lightgrey;margin-top: -5px;margin-bottom: -5px;">
                                            <tr>
                                                <td style="border: 1px solid lightgrey; width:150px">@context.ColumnCaption</td>
                                                <td style="border: 1px solid lightgrey; width:180px"><b>@trackingNumber</b></td>
                                                <td style="border: 1px solid lightgrey; width:150px">@transportModes</td>
                                                <td style="border: 1px solid lightgrey; width:150px">@shipDate</td>
                                                <td style="border: 1px solid lightgrey; width:150px">@etaDate</td>
                                                <td style="border: 1px solid lightgrey; width:150px">@totalUnits</td>
                                                <td style="border: 1px solid lightgrey; width:500px">@invoiceNos</td>
                                            </tr>
                                        </table>
                                    }
                                 }
                            }
                        </GroupRowTemplate>
                    </DxGridDataColumn>

                    <DxGridDataColumn FieldName="ShipToETA" Caption="Ship To ETA" DisplayFormat="d" ReadOnly="false" MinWidth="60" />

                    <DxGridDataColumn FieldName="PONumber" Caption="PO No" ReadOnly="true" MinWidth="60" />
                    <DxGridDataColumn FieldName="PODate" Caption="PODate" DisplayFormat="d" MinWidth="60" />

                    <DxGridDataColumn FieldName="LastModifiedOn" Caption="Last Modified" DisplayFormat="d" MinWidth="60" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" />

                    <DxGridDataColumn FieldName="ProductNo" Caption="Product No" ReadOnly="true" MinWidth="60" />
                    <DxGridDataColumn FieldName="ProductName" Caption="Product Name" ReadOnly="true" MinWidth="60" Visible="false" />
                    
                    <DxGridDataColumn FieldName="OrderQty" Caption="Order Qty" DisplayFormat="n0" ReadOnly="true" TextAlignment="GridTextAlignment.Right" MinWidth="60" />
                    <DxGridDataColumn FieldName="ShipmentQty" Caption="Shipment Qty" DisplayFormat="n0" ReadOnly="true" TextAlignment="GridTextAlignment.Right" MinWidth="60" />
                    @*<DxGridDataColumn FieldName="ShipmentQty" Caption="Shipment Qty" DisplayFormat="n0" ReadOnly="true" TextAlignment="GridTextAlignment.Right" MinWidth="60" >
                        <CellEditTemplate Context="CellEditTemplateContext">
                            @{
                                var shipping = (ShippingData)CellEditTemplateContext.EditModel;
                                string FocusedColumn = "ShipmentQty";
                            }
                            <CascadingValue Name="FocusOnEditStart" Value="CellEditTemplateContext.DataColumn.FieldName == FocusedColumn">

                            </CascadingValue>
                        </CellEditTemplate>
                    </DxGridDataColumn>*@

                    <DxGridDataColumn FieldName="SONumber" Caption="SO No" ReadOnly="true" SortIndex="0" MinWidth="60" />
                    <DxGridDataColumn FieldName="SODate" Caption="SO Date" DisplayFormat="d" ReadOnly="true" MinWidth="60" />
                    <DxGridDataColumn FieldName="CustomerName" Caption="Customer" ReadOnly="true" MinWidth="60" />

                    <DxGridDataColumn FieldName="TransportationMode" Caption="Transportation Mode" MinWidth="60" ReadOnly="true" />

                </Columns>
                <EditFormTemplate Context="EditFormContext">
                    @{
                        var shipping = (ShippingData)EditFormContext.EditModel; // previously -> supplier

                        var tm = shipping.TransportationMode;
                        //BrowserDimension dim = GetDimensions().Result;
                        //DisplayPopupMessage("Screen H" + dim.Height + " W" + dim.Width);
                    }
                    <DxFormLayout CssClass="w-100">
                         <DxFormLayoutItem Caption="Vendor:" ColSpanMd="6">
                            <DxComboBox Data="@POOpenVendorData"
                                        NullText="Select Vendor..."
                                        FilteringMode="DataGridFilteringMode.Contains"
                                        TextFieldName="VendorName"
                                        ValueFieldName="VendorId"
                                        Value="@shipping.VendorId"
                                        ReadOnly="!isVendorEditable"
                                        ValueChanged="(int newCellValue) => {
                                                    shipping.VendorId = newCellValue;
                                                    shipping.VendorName = POOpenVendorData.Where(c => c.VendorId == newCellValue).FirstOrDefault()?.VendorName;
                                                    shipping.POHeaderId = 0;
                                              }">
                            </DxComboBox>
                        </DxFormLayoutItem>
                          <DxFormLayoutItem Caption="Open POs:" ColSpanMd="6">
                            @{
                                openPOList = GetPOListData(shipping.VendorId);
                            }
                            <DxComboBox Data="@openPOList"
                                        NullText="Select PO..."
                                        FilteringMode="DataGridFilteringMode.Contains"
                                        TextFieldName="LookupText"
                                        ValueFieldName="LookupValue"
                                        Value="@POHeaderIdSelected"
                                        ReadOnly="!isVendorEditable"
                                        ValueChanged="(int newCellValue) => {
                                                    shipping.POHeaderId = newCellValue;
                                                    POHeaderIdSelected = shipping.POHeaderId;
                                                    ShipmentHeaderIdSelected = shipping.ShipmentHeaderId;

                                                    ShippingData poSelected = OpenPOShipmentData.Where(c => c.POHeaderId == shipping.POHeaderId).FirstOrDefault();
                                                    if (shipping.VendorId == 0)
                                                    {
                                                        shipping.VendorId =  poSelected.VendorId;
                                                    }

                                                    AddToPOListGridDataByPO(poSelected, true); // New entry

                                                    if (ShipmentHeaderIdSelected == 0)
                                                        LoadItemGridDataByPO(poSelected.PONumber);
                                                    else
                                                        LoadItemGridDataByShipmentHeaderId(ShipmentHeaderIdSelected);

                                            }">
                                @* Value="@shipping.POHeaderId" *@
                            </DxComboBox>
                        </DxFormLayoutItem>
                        @* <DxFormLayoutItem Caption="Vendor Name:" ColSpanMd="6">
                            @EditFormContext.GetEditor("VendorName")
                        </DxFormLayoutItem> *@
                        <DxFormLayoutItem Caption="Ship From Factory:" ColSpanMd="6">
                            @EditFormContext.GetEditor("ShipmentDate")
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Invoice No:" ColSpanMd="6">
                            @EditFormContext.GetEditor("InvoiceNo")
                        </DxFormLayoutItem>
                       @*  <DxFormLayoutItem Caption="Expected Arrival:" ColSpanMd="6">
                            @EditFormContext.GetEditor("ShipToETA")
                        </DxFormLayoutItem> *@
                        <DxFormLayoutItem Caption="Expected Arrival:" ColSpanMd="6">
                            <DxDateEdit Date="@shipping.ShipToETA" ReadOnly=false
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        NullText="Select a date..."
                                        NullValue="@blankDate"
                                        DateChanged="@((DateTime newValue) => {
                                            shipping.ShipToETA = newValue;
                                        })">
                            </DxDateEdit>
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Tracking No:" ColSpanMd="6">
                            @EditFormContext.GetEditor("TrackingNumber")
                        </DxFormLayoutItem>
                        @* <DxFormLayoutItem Caption="PO No:" ColSpanMd="6">
                           @EditFormContext.GetEditor("PONumber")
                        </DxFormLayoutItem> *@  
                        <DxFormLayoutItem Caption="Mode of Transport:" ColSpanMd="6">
                            <DxRadioGroup aria-labelledby="radio-group-overview-label"
                                          Items="@modesOfTransportations"
                                          @bind-Value="@shipping.TransportationMode"
                                          Layout="RadioGroupLayout.Horizontal"
                                          CssClass="dx-demo-radio-group" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="PO No:" ColSpanMd="5">
                            <DxGrid @ref="POListGrid"
                                    Data="POListGridData"
                                    PageSize="10"
                                    AutoExpandAllGroupRows="true"
                                    KeyFieldName="Id"
                                    ValidationEnabled="false"
                                    EditMode="GridEditMode.EditRow"
                                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Default"
                                    ShowFilterRow="false"
                                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                                    TextWrapEnabled="false"
                                    HighlightRowOnHover="true"
                                    @bind-SelectedDataItems="SelectedDataPOListGridItems"
                                    RowDoubleClick="POListGrid_OnRowDoubleClick"
                                    CustomizeElement="POListGrid_CustomizeElement" 
                                    DataItemDeleting="POListGrid_DataItemDeleting"
                                    RowClick="POListGrid_OnRowClick"
                                    style="min-width: 200px;">
                                <Columns>
                                    <DxGridDataColumn FieldName="PONumber" Caption="PO No" ReadOnly="true" MinWidth="140" />
                                    <DxGridDataColumn FieldName="TotalSum" Caption="Incoming Units" DisplayFormat="n0" ReadOnly="true" MinWidth="50" Width="100" TextAlignment="GridTextAlignment.Right" />
                                    <DxGridCommandColumn Width="100px" Visible="true"
                                       DeleteButtonVisible="true"
                                       EditButtonVisible="false"
                                       CancelButtonVisible="false"
                                       SaveButtonVisible="false"
                                       NewButtonVisible="false" /> 
                                </Columns>
                            </DxGrid>
                        </DxFormLayoutItem>    
                        <DxFormLayoutItem ColSpanMd="1"/>

                        <DxFormLayoutItem ColSpanMd="12">     
                            <div tabindex="0" @onkeydown="HandleKeyDown">
                            <DxGrid @ref="POShipmentListGrid"
                                    Data="POShipmentListGridData"
                                    KeyFieldName="Id"
                                    @bind-SelectedDataItem="@SelectedDataItem"
                                    AutoExpandAllGroupRows="true"
                                    PageSizeSelectorVisible="false"
                                    ShowAllRows="true"
                                    ShowFilterRow="false"
                                    EditMode="GridEditMode.EditCell"
                                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Default"
                                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                                    SelectAllCheckboxMode="CurrentSelectAllCheckboxMode"
                                    SelectedDataItems="@SelectedDataItems"
                                    SelectedDataItemsChanged="@((IReadOnlyList<object> selectedItems) => OnSelectedDataItemsChanged(selectedItems))"
                                    RowClick="ItemGrid_OnRowClick"
                                    RowDoubleClick="ItemGrid_OnRowDoubleClick"
                                    FilterCriteriaChanged="ItemGrid_FilterCriteriaChanged"
                                    EditStart="ItemGrid_OnEditStart"
                                    CustomizeEditModel="ItemGrid_CustomizeEditModel"
                                    CustomizeElement="ItemGrid_CustomizeElement"
                                    EditModelSaving="ItemGrid_EditModelSaving"
                                    FocusedRowChanged="ItemGrid_OnFocusedRowChanged"
                                        @onkeydown="ItemGrid_OnKeyDownGrid"
                                    HighlightRowOnHover="true"
                                    TextWrapEnabled="true"
                                    ValidationEnabled="false"
                                    VirtualScrollingEnabled="true"
                                    FocusedRowEnabled="true"
                                    VerticalScrollBarMode="@ScrollBarMode.Auto"
                                    VerticalScrollableHeight=@editPOShipmentListGridHeight
                                    style="height:600px;">
                                @* @bind-SelectedDataItems="SelectedDataItems"
                                SelectedDataItems="@SelectedDataItems"
                                SelectedDataItemsChanged="@((IReadOnlyList<object> selectedItems) => OnSelectedDataItemsChanged(selectedItems))"
                                    style="margin-top: 20px;"*@
                                    @* FocusedRowEnabled="false" *@
                                <Columns>
                                    <DxGridSelectionColumn Width="75px"/>
                                    <DxGridDataColumn FieldName="ProductNo" Caption="Product No" ReadOnly="true" MinWidth="100" Width="100" />
                                    <DxGridDataColumn FieldName="ForProductNo" Caption="For Product No" ReadOnly="true" MinWidth="110" Width="120" />

                                    <DxGridDataColumn FieldName="OrderQty" Caption="PO Order Units" DisplayFormat="n0" ReadOnly="true" MinWidth="50" Width="90" TextAlignment="GridTextAlignment.Right">
                                        <EditSettings>
                                            <DxSpinEditSettings ShowSpinButtons="false" ReadOnly="true" NullText="Order Qty" />
                                        </EditSettings>
                                    </DxGridDataColumn>

                                    <DxGridDataColumn FieldName="RemQty" Caption="Remaining Units" DisplayFormat="n0" ReadOnly="true" MinWidth="50" Width="90" TextAlignment="GridTextAlignment.Right">
                                        <EditSettings>
                                            <DxSpinEditSettings ShowSpinButtons="false" ReadOnly="true" NullText="Rem Qty" />
                                        </EditSettings>
                                    </DxGridDataColumn>

                                    <DxGridDataColumn FieldName="ShipmentQty" Caption="Shipment Units" Context="ShipmentQtyContext" DisplayFormat="n0" ReadOnly="false" MinWidth="50" Width="90" TextAlignment="GridTextAlignment.Right">
                                        <CellEditTemplate>
                                            @{
                                                var editModel = (ShippingData)ShipmentQtyContext.EditModel;
                                                void OnValueChanged(int newValue)
                                                {
                                                    editModel.ShipmentQty = newValue;

                                                    ItemGrid_OnEditEnd(editModel);

                                                    // Move to next row
                                                    int i = ShipmentQtyContext.VisibleIndex;
                                                    int c = POShipmentListGrid.GetVisibleRowCount();

                                                    if (i >= (c - 1)) i = 0;
                                                    else i++;

                                                    POShipmentListGridRowFocus(i);

                                                    if (newValue == 0)
                                                    {                                                        
                                                    }
                                                }
                                            }
                                            <DxSpinEdit Value="editModel.ShipmentQty" ValueExpression="@(() => editModel.ShipmentQty)" @onkeydown="GridCell_OnKeyDownGrid" ValueChanged="@((int newValue) => OnValueChanged(newValue))" />
                                        </CellEditTemplate>
                                        <EditSettings>
                                            <DxSpinEditSettings ShowSpinButtons="false" ReadOnly="false" NullText="Ship Qty" InputCssClass="focus-text-box" />
                                        </EditSettings>
                                    </DxGridDataColumn>

                                    <DxGridDataColumn FieldName="ProductName" Caption="Product Name" ReadOnly="true" MinWidth="50" />

                                    <DxGridCommandColumn Context="ShippingDataPoCountContext" Width="45px"
                                                            DeleteButtonVisible="false"
                                                            EditButtonVisible="true"
                                                            CancelButtonVisible="false"
                                                            SaveButtonVisible="false"
                                                            NewButtonVisible="false">
                                        <HeaderTemplate>
                                            <DxButton IconCssClass="grid-icon grid-icon-new" RenderStyle="ButtonRenderStyle.Link" aria-label="Link" />
                                        </HeaderTemplate>
                                        <CellDisplayTemplate>
                                                @if ((int)ShippingDataPoCountContext.GetRowValue("POCount") > 0 && (int)ShippingDataPoCountContext.GetRowValue("ShipmentQty") > 0)
                                            {
                                                <div class="grid-cell-align-center">
                                                    <DxButton IconCssClass="grid-icon grid-icon-new"
                                                                RenderStyle="ButtonRenderStyle.Link" aria-label="Edit"
                                                                Click="@(() => {
                                                        var shippingData = (ShippingData)ShippingDataPoCountContext.DataItem;  
                                                        //POShipmentListGrid.StartEditRowAsync(ShippingDataPoCountContext.VisibleIndex);
                                                        ItemGrid_OnEditEnd(shippingData);
                                                    })" />
                                                </div>
                                            }
                                            else
                                            {

                                            }
                                        </CellDisplayTemplate>
                                    </DxGridCommandColumn>

                                </Columns>
                            </DxGrid>
                            </div>
                        </DxFormLayoutItem>

                    </DxFormLayout>
                </EditFormTemplate>
                <ToolbarTemplate Context="GridToolbar">
                    <DxToolbar Context="GridToolbar" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                        <Items>
                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Auto Fit Columns" RenderStyle="ButtonRenderStyle.Secondary" Click="Grid_FitWidths"  />
                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Column Chooser" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-icon-column-chooser" Click="ColumnChooserButton_Click" />
                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Refresh Data" RenderStyle="ButtonRenderStyle.Secondary" Click="RefreshData_Click" />
                            @* <DxToolbarItem BeginGroup="true" Alignment="ToolbarItemAlignment.Left">
                                <Template Context="toolbar_item_context">
                                    <div class="d-flex flex-row align-items-center h-100">
                                        <DxCheckBox Checked="usePopupEditForm" CheckedChanged="new Func<bool, Task>(UsePopupEditForm_CheckedChanged)">Use Popup Edit Form</DxCheckBox>
                                    </div>
                                </Template>
                            </DxToolbarItem> *@
                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" RenderStyle="ButtonRenderStyle.None" Text="@isLoadingMessage" Visible="@isLoadingVisible" />
                        </Items>
                    </DxToolbar>
                </ToolbarTemplate>
                @* <DetailRowTemplate Context="DetailRow">
                    <PODataPage SODetailData="(ShippingData)DetailRow.DataItem" />
                </DetailRowTemplate> *@
            </DxGrid>
            <div class="pager-container">
                @* <DxPager PageCount="@PageCount" @bind-ActivePageIndex="@ActivePageIndex" /> *@
                @* <div>
                Total: @TotalRecords records
                </div> *@
            </div>
            @* <button class="btn btn-primary" @onclick="OnButtonClick">Get Dimensions</button><br /><br />
            <p>Window Height: @Height</p>
            <p>Window Width: @Width</p> *@
        </div>

        <DxPopup @bind-Visible="@productFactoryPOsGridDataPopupVisible"
                 AllowDrag="true"
                 AllowDragByHeaderOnly="allowDragByHeaderOnly"
                 ShowFooter="true"
                 CloseOnEscape="false"
                 CloseOnOutsideClick="false"
                 ShowCloseButton="false"
                 HeaderText="@productFactoryPOsGridPopupTitleText"
                 BodyText="@productFactoryPOsGridPopupBodyText"
                 PositionX="positionX"
                 PositionY="positionY"
                 Width="900">

            <BodyContentTemplate>
                <div style="text-align:right">
                    Available Qty: <b> @productFactoryPOsGridPopupBodyText</b>
                </div>
                <DxGrid @ref="ProductFactoryPOsGrid"
                        Data="ProductFactoryPOsGridData"
                        Name="ProductFactoryPOsGrid"
                        KeyFieldName="Id"
                        PageSizeSelectorVisible="false"
                        AutoFitColumnWidths="true"
                        EditMode="GridEditMode.EditCell"
                        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Never"
                        FooterDisplayMode="GridFooterDisplayMode.Auto"
                        ShowGroupPanel="false"
                        ShowSearchBox="false"
                        SearchText=""
                        HighlightRowOnHover="true"
                        TextWrapEnabled="true"
                        ValidationEnabled="false"
                        CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                        CustomizeElement="ProductFactoryPOsGrid_CustomizeElement"
                        style="min-width: 800px;">
                    <Columns>
                        <DxGridDataColumn FieldName="ProductId" Caption="Product Id" ReadOnly="true" Visible="false"  />
                        <DxGridDataColumn FieldName="ItemNo" Caption="Product" ReadOnly="true" Visible="false" MinWidth="90" />
                        <DxGridDataColumn FieldName="CustomerName" Caption="Customer" ReadOnly="true" Visible="true" MinWidth="90" />
                        <DxGridDataColumn FieldName="CustomerPO" Caption="PO#" ReadOnly="true" Visible="true" MinWidth="90" />
                        <DxGridDataColumn FieldName="ShipDate" Caption="Ship" ReadOnly="false" DisplayFormat="d" MinWidth="60" />
                        <DxGridDataColumn FieldName="CancelDate" Caption="Cancel" ReadOnly="false" DisplayFormat="d" MinWidth="60" />

                        <DxGridDataColumn FieldName="OrderQty" Caption="Order" DisplayFormat="n0" ReadOnly="true" MinWidth="70" Width="80" TextAlignment="GridTextAlignment.Right" />
                        <DxGridDataColumn FieldName="InTransitTotal" Caption="Total InTransit" DisplayFormat="n0" ReadOnly="true" MinWidth="60" TextAlignment="GridTextAlignment.Right" />
                        <DxGridDataColumn FieldName="IntransitUnits" Caption="In Transit Allocated" DisplayFormat="n0" ReadOnly="true" MinWidth="60" TextAlignment="GridTextAlignment.Right" />

                        <DxGridDataColumn FieldName="AllocatedQty" Caption="Allocate" Context="AllocatedQtyContext" DisplayFormat="n0" ReadOnly="false" MinWidth="70" TextAlignment="GridTextAlignment.Right">
                        <CellEditTemplate>
                                @{
                                    var editModel = (SoEdiData)AllocatedQtyContext.EditModel;
                                    void OnValueChanged(int newValue)
                                    {
                                        editModel.AllocatedQty = newValue;

                                        // if (newValue == 0)
                                        // {
                                        //     //editModel.Summary = "Freezing"; // Modify the other value
                                        // }

                                        ProductFactoryPOsGrid_OnEditEnd(editModel);
                                    }
                                }
                                <DxSpinEdit Value="editModel.AllocatedQty" ValueExpression="@(() => editModel.AllocatedQty)" ValueChanged="@((int newValue) => OnValueChanged(newValue))" />
                            </CellEditTemplate>
                            <EditSettings>
                                <DxSpinEditSettings ShowSpinButtons="false" ReadOnly="false" NullText="Ship Qty" InputCssClass="focus-text-box" />
                            </EditSettings>
                        </DxGridDataColumn>

                        <DxGridDataColumn FieldName="IsGroupPO" Caption="Is GroupPO" ReadOnly="true" MinWidth="60" Visible="false" />
                    </Columns>
                </DxGrid>
            </BodyContentTemplate>

            <FooterContentTemplate Context="Context">
                <div class="popup-demo-events-footer">
                    <DxButton CssClass="popup-demo-events-button ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="@popupOkButtonText" Enabled="@productFactoryPOsOkButtonEnabled" Click="OkProductFactoryPOsPopupClick" />
                    <DxButton CssClass="popup-demo-events-button ms-2" RenderStyle="ButtonRenderStyle.Secondary" Visible="true" Text="@popupCancelButtonText" Click="CancelProductFactoryPOsPopupClick" />
                </div>
            </FooterContentTemplate>
        </DxPopup>

    </Authorized>
    <NotAuthorized Context="NotAuthorized">
        @*  @{ navManager.NavigateTo("/Login");} *@
        <h3>Please <a href="/login">Login</a> to access the Portal</h3>
        @* <LoginPage /> *@
        @* <LoginRedirect /> *@
    </NotAuthorized>
</AuthorizeView>

<style>
    .highlighted-item > td {
        background-color: rgba(245, 198, 203, 0.5);
    }
    .dx-datagrid-headers {
        white-space: normal;
    }
    .dx-datagrid-nowrap.dx-datagrid-headers .dx-header-row > td > .dx-datagrid-text-content {
        white-space: normal;
    }

    /*.dxbl-grid {
        height: 522px;
    } */

    .my-popup-style {
        min-width: 1200px;
        /* min-height: 50vw; */
        min-height: 900px;
    }

    .hide-toolbar .dxbl-grid-toolbar-container {
        display: none;
    }

  /*   .dxbl-grid table {
        table-layout: auto !important;
    }
    .dxbl-grid table > colgroup > col {
        width: auto !important;
    } */

    .mainGridCSS {
        height: @mainGridSectionHeight;
    }
</style>
