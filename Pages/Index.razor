@page "/"
@using DevExpress.Blazor
@using LAGem_POPortal.Data
@using LAGem_POPortal.Models
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

@implements IDisposable

<DxGrid @ref="Grid"
        Data="GridData"
        KeyFieldName="Id"

        PagerPosition="GridPagerPosition.Bottom"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25 })"
        PageSizeSelectorAllRowsItemVisible="true"
        PageSize="@PageSize"
        @bind-PageIndex="@ActivePageIndex"

        AutoFitColumnWidths="true"
        AutoCollapseDetailRow="true"
        ColumnResizeMode="@CurrentColumnResizeMode"
        EditMode="GridEditMode.EditRow"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
        FooterDisplayMode="GridFooterDisplayMode.Auto"
        TextWrapEnabled="@TextWrapEnabled"
        ValidationEnabled="false"
        WordWrapEnabled="@WordWrapEnabled"
        HighlightRowOnHover="true"

        ShowGroupPanel="true"
        ShowSearchBox="true"
        SearchText=""
        SearchTextParseMode="CurrentSearchTextParseMode"

        CustomizeElement="Grid_CustomizeElement"
        CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        CustomizeEditModel="Grid_CustomizeEditModel">
    <Columns>
        <DxGridDataColumn FieldName="SONumber" Caption="SO Number" ReadOnly="true" SortIndex="0" Width="Auto" MinWidth="60" />
        <DxGridDataColumn FieldName="SODate" Caption="SO Date" DisplayFormat="d" ReadOnly="true" Width="Auto" MinWidth="80" />
        <DxGridDataColumn FieldName="CustomerName" Caption="Customer" ReadOnly="true" Width="Auto" MinWidth="100" />
        <DxGridDataColumn FieldName="StartDate" Caption="Ship Date" DisplayFormat="d" Width="Auto" MinWidth="80" />
        <DxGridDataColumn FieldName="EndDate" Caption="Cancel Date" DisplayFormat="d" Width="Auto" MinWidth="80" />

        @* <DxGridDataColumn FieldName="SOLineNoExt" Caption="SOLineNo" DisplayFormat="n2" ReadOnly="true" /> *@
        <DxGridDataColumn FieldName="SOLineNo" Caption="SO Line No" DisplayFormat="n0" ReadOnly="true" SortIndex="1" />
        <DxGridDataColumn FieldName="DisplaySequence" Caption="DisplaySequence" DisplayFormat="n0" ReadOnly="true" Visible="false" SortIndex="2" />
        <DxGridDataColumn FieldName="SOSubLineNo" Caption="SOSubLineNo" DisplayFormat="n0" ReadOnly="true" Visible="false" SortIndex="3" />

        <DxGridDataColumn FieldName="SOSubLineType" Caption="Product Type" ReadOnly="true" Width="Auto" MinWidth="100" />
        <DxGridDataColumn FieldName="ProgramName" Caption="Program Name" ReadOnly="true" Width="Auto" MinWidth="100" />
        <DxGridDataColumn FieldName="ProductNo" Caption="Product No" ReadOnly="true" Width="Auto" MinWidth="150" />
        <DxGridDataColumn FieldName="ProductName" Caption="Product Name" ReadOnly="true" Width="Auto" MinWidth="200" Visible="false" />

        <DxGridDataColumn FieldName="SOQty" Caption="SOQty" DisplayFormat="n0" ReadOnly="true" TextAlignment="GridTextAlignment.Right" Width="Auto" MinWidth="60" />
        <DxGridDataColumn FieldName="Cost" Caption="Cost" DisplayFormat="n2" ReadOnly="true" TextAlignment="GridTextAlignment.Right" Width="Auto" MinWidth="60" />
        <DxGridDataColumn FieldName="Price" Caption="Price" DisplayFormat="n2" ReadOnly="true" TextAlignment="GridTextAlignment.Right" Width="Auto" MinWidth="60" />

        <DxGridDataColumn FieldName="PONumber" Caption="PO No" ReadOnly="true" Width="Auto" MinWidth="100" />
        <DxGridDataColumn FieldName="VendorName" Caption="Jewelry Factory" ReadOnly="true" Width="Auto" MinWidth="120" />
        @* <DxGridDataColumn FieldName="CountryCode" Caption="Country of Origin" ReadOnly="true" /> *@
        <DxGridDataColumn FieldName="PODate" Caption="PODate" DisplayFormat="d" Width="Auto" MinWidth="80" />
        <DxGridDataColumn FieldName="POQty" Caption="POQty" DisplayFormat="n0" ReadOnly="true" TextAlignment="GridTextAlignment.Right" Width="Auto" MinWidth="60" />
        <DxGridDataColumn FieldName="ForProductNo" Caption="For Product No" ReadOnly="true" Width="Auto" MinWidth="100" />
        
        <DxGridDataColumn FieldName="ShipmentDate" Caption="Shipment Date" DisplayFormat="d" Width="Auto" MinWidth="80" />
        <DxGridDataColumn FieldName="TrackingNumber" Caption="Tracking Number" ReadOnly="true" Width="Auto" MinWidth="100" />
        <DxGridDataColumn FieldName="ShipToETA" Caption="Ship To ETA" DisplayFormat="d" Width="Auto" MinWidth="80" />
        <DxGridDataColumn FieldName="ShipmentQty" Caption="POQty" DisplayFormat="n0" ReadOnly="true" TextAlignment="GridTextAlignment.Right" Width="Auto" MinWidth="60" />

        <DxGridCommandColumn Width="150px" Visible="false"
                             DeleteButtonVisible="false"
                             EditButtonVisible="false"
                             CancelButtonVisible="false"
                             SaveButtonVisible="false"
                             NewButtonVisible="false" />
    </Columns>   
    <ToolbarTemplate>
        <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained" >
            <Items>
                <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Auto Fit Columns" Click="Grid_FitWidths" RenderStyle="ButtonRenderStyle.Secondary" />
                <DxToolbarItem Alignment="ToolbarItemAlignment.Right" Text="Column Chooser" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-icon-column-chooser" Click="ColumnChooserButton_Click" />
            </Items>
        </DxToolbar>
    </ToolbarTemplate>
    <DetailRowTemplate>
        @* <PODetailData DepartmentQueue="(DepartmentQueue)context.DataItem" QueueProcesses="@QueueProcesses" QueueLocations="@QueueLocations" /> *@
        @* <PODetailDataPage POData="(POData)context.DataItem" /> *@

        @*<Grid_MasterDetail_NestedGrid_DetailContent POData="(POData)context.DataItem" /> *@
        <PODataPage SODetailData="(PODetailData)context.DataItem" />
    </DetailRowTemplate>
</DxGrid>
<div class="pager-container">
    @* <DxPager PageCount="@PageCount" @bind-ActivePageIndex="@ActivePageIndex" /> *@
    @* <div>
        Total: @TotalRecords records
    </div> *@
</div>

<style>
    .highlighted-item > td {
        background-color: rgba(245, 198, 203, 0.5);
    }
    .dx-datagrid-headers {
        white-space: normal;
    }
    .dx-datagrid-nowrap.dx-datagrid-headers .dx-header-row > td > .dx-datagrid-text-content {
        white-space: normal;
    }
</style>

@code {
    // ============================================================ \\

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    bool AutoCollapseDetailRow { get; set; }
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    IGrid Grid { get; set; }
    IEnumerable<PODetailData> GridData { get; set; }


    bool TextWrapEnabled = true;
    bool WordWrapEnabled = false;

    int PageCount { get; set; } = 0;
    int TotalRecords { get; set; } = 0;
    int PageSize { get; set; } = 20;
    int ActivePageIndex { get; set; } = 0;

    Dictionary<string, GridSearchTextParseMode> SearchTextParseModes { get; } = new Dictionary<string, GridSearchTextParseMode>{
        { "Group Words By And", GridSearchTextParseMode.GroupWordsByAnd },
        { "Group Words By Or", GridSearchTextParseMode.GroupWordsByOr },
        { "Exact Match", GridSearchTextParseMode.ExactMatch }
    };
    void ChangeSearchMode(string key)
    {
        CurrentSearchTextParseModeDisplayText = key;
        CurrentSearchTextParseMode = SearchTextParseModes[key];
    }
    string CurrentSearchTextParseModeDisplayText { get; set; } = "Group Words By And";
    GridSearchTextParseMode CurrentSearchTextParseMode { get; set; } = GridSearchTextParseMode.GroupWordsByAnd;

    GridColumnResizeMode CurrentColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer; // GridColumnResizeMode.NextColumn;
    string CurrentColumnResizeModeDisplayText { get; set; } = "Next Column";
    Dictionary<string, GridColumnResizeMode> GridColumnResizeModes { get; } = new Dictionary<string,
    GridColumnResizeMode>{
        { "Disabled", GridColumnResizeMode.Disabled },                  //A user cannot resize columns.
        { "Next Column", GridColumnResizeMode.NextColumn },             //When a user resizes a column, the width of the column to the right changes, but the Grid's total width does not change.
        { "Columns Container", GridColumnResizeMode.ColumnsContainer }  //When a user resizes a column, all other columns retain width settings, but the width of the entire column container changes proportionally.
    }; 
    void ChangeResizeMode(string key)
    {
        CurrentColumnResizeModeDisplayText = key;
        CurrentColumnResizeMode = GridColumnResizeModes[key];
    }

    // ============================================================ \\

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        SqlData sqlData = new SqlData();
        GridData = await sqlData.GetSOPOData();
        @* Grid.AutoFitColumnWidths();  *@
    }

    // ============================================================ \\

    public void AutoCollapseDetailRow_Changed(bool newValue)
    {
        AutoCollapseDetailRow = newValue;
        if (newValue)
        {
            Grid.BeginUpdate();
            Grid.CollapseAllDetailRows();
            Grid.ExpandDetailRow(0);
            Grid.EndUpdate();
        }
    }

    public void Dispose()
    {
        // Northwind?.Dispose();
    }

    // ============================================================ \\

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task; // Waits for grid data to load
                                      // Grid.ExpandDetailRow(0);
        }
        CurrentColumnResizeMode = GridColumnResizeMode.ColumnsContainer;
        Grid.AutoFitColumnWidths();
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        // if (e.ElementType == GridElementType.DataRow && (System.Decimal)e.Grid.GetRowValue(e.VisibleIndex, "Total") > 1000)
        // {
        //     e.CssClass = "highlighted-item";
        // }

        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "CustomerName")
        {
            string customerName = (string)e.Grid.GetRowValue(e.VisibleIndex, "CustomerName");
            if (customerName == "MACYS")
                e.Style = "background: green";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "FactoryCancel")
        {
            e.Style = "font-weight: 800";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "PONumber")
        {
            e.Style = "font-weight: 800";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "Units")
        {
            decimal units = (decimal)e.Grid.GetRowValue(e.VisibleIndex, "Units");
            if (units > 100)
                e.Style = "color: red";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "SOQty")
        {
            decimal units = (decimal)e.Grid.GetRowValue(e.VisibleIndex, "SOQty");
            if (units > 100)
                e.Style = "color: red";
        }
    }
    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        // if (e.FieldName == "FactoryCancel")
        // {
        //     // e.DisplayText = CustomerList.Where(p => p.CustomerId == ((Customer)e.Value).CustomerId).FirstOrDefault().CompanyName;
        //     if (DateTime.Parse(e.Value.ToString()) <= new DateTime(1900, 1, 1))
        //         e.DisplayText = "";
        // }
    }
    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            if (e.EditModel.GetType() == typeof(BOMData))
            {
                var newObject = (BOMData)e.EditModel;
                // newDepartmentQueueLocations.DepartmentQueueOID = DepartmentQueue.OID;
                // newDepartmentQueueLocations.Workcenter = DepartmentQueue.workcenter;

            }
            if (e.EditModel.GetType() == typeof(FreightData))
            {
                var newObject = (FreightData)e.EditModel;
                // newDepartmentQueueProcesses.FOID = DepartmentQueue.OID;
                // newDepartmentQueueProcesses.workcenter = DepartmentQueue.workcenter;

            }
            // var newEmployee = (EditableEmployee)e.EditModel;
            // newEmployee.FirstName = "John";
            // newEmployee.LastName = "Doe";
        }
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (e.EditModel.GetType() == typeof(BOMData))
        {
            var editableObject = (BOMData)e.EditModel;

            // if (e.IsNew)
            //...
        }
        if (e.EditModel.GetType() == typeof(FreightData))
        {
            var editableObject = (FreightData)e.EditModel;

            // if (e.IsNew)
            //...
        }

        // var editableEmployee = (EditableEmployee)e.EditModel;
        // if (e.IsNew)
        //     await NwindDataService.InsertEmployeeAsync(editableEmployee);
        // else
        //     await NwindDataService.UpdateEmployeeAsync((EditableEmployee)e.DataItem, editableEmployee);
        await UpdateDataAsync();
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem.GetType() == typeof(BOMData))
        {
            var deletingObject = (BOMData)e.DataItem;

        }
        if (e.DataItem.GetType() == typeof(FreightData))
        {
            var deletingObject = (FreightData)e.DataItem;

        }

        // await NwindDataService.RemoveEmployeeAsync((EditableEmployee)e.DataItem);
        await UpdateDataAsync();
    }
    async Task UpdateDataAsync()
    {
        // DataSource = await NwindDataService.GetEmployeesEditableAsync();
    }

    void Grid_FitWidths()
    {
        Grid.AutoFitColumnWidths();
    }
    void ColumnChooserButton_Click()
    {
        Grid.ShowColumnChooser();
    }

    // ============================================================ \\
}