@page "/"
@using DevExpress.Blazor
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

@using MasterDetail.Data
@using MasterDetail.Models
@using Microsoft.EntityFrameworkCore 
@implements IDisposable

<DxGrid @ref="POGrid"
        Data="POGridData"
        AutoCollapseDetailRow="true"
        KeyFieldName="PONumber"
        ValidationEnabled="false"
        EditMode="GridEditMode.EditRow"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
        ShowSearchBox="true"
        SearchText=""
        SearchTextParseMode="CurrentSearchTextParseMode"
        ShowGroupPanel="false"
        CustomizeElement="Grid_CustomizeElement"
        CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
        EditModelSaving="POGrid_EditModelSaving"
        DataItemDeleting="POGrid_DataItemDeleting"
        CustomizeEditModel="POGrid_CustomizeEditModel"
        ColumnResizeMode="GridColumnResizeMode.NextColumn"
        TextWrapEnabled="false"
        HighlightRowOnHover="true">
    <Columns>
        <DxGridDataColumn FieldName="PONumber" Caption="PO No" ReadOnly="true" SortIndex="0" />
        <DxGridDataColumn FieldName="SONumber" Caption="SO Number" ReadOnly="true" />
        <DxGridDataColumn FieldName="ItemCatalog" Caption="Item Catalog" ReadOnly="true" />
        <DxGridDataColumn FieldName="Units" Caption="Units" DisplayFormat="n3" ReadOnly="true" />
        <DxGridDataColumn FieldName="OrderDate" Caption="Order Date" DisplayFormat="d" ReadOnly="true" />
        <DxGridDataColumn FieldName="FactoryCancel" Caption="Factory Cancel" DisplayFormat="d" />
        <DxGridCommandColumn Width="150px"
                             EditButtonVisible="true"
                             CancelButtonVisible="true"
                             SaveButtonVisible="true"
                             NewButtonVisible="true" />
    </Columns>
    <DetailRowTemplate>
        @* <PODetailData DepartmentQueue="(DepartmentQueue)context.DataItem" QueueProcesses="@QueueProcesses" QueueLocations="@QueueLocations" /> *@
        @* <PODetailDataPage POData="(POData)context.DataItem" /> *@
        <Grid_MasterDetail_NestedGrid_DetailContent POData="(POData)context.DataItem" />
    </DetailRowTemplate>
</DxGrid>

@code {
    // ============================================================ \\

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    bool AutoCollapseDetailRow { get; set; }
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    IGrid POGrid { get; set; }
    IEnumerable<POData> POGridData { get; set; }

    Dictionary<string, GridSearchTextParseMode> SearchTextParseModes { get; } = new Dictionary<string, GridSearchTextParseMode>{
        { "Group Words By And", GridSearchTextParseMode.GroupWordsByAnd },
        { "Group Words By Or", GridSearchTextParseMode.GroupWordsByOr },
        { "Exact Match", GridSearchTextParseMode.ExactMatch }
    };
    void ChangeSearchMode(string key)
    {
        CurrentSearchTextParseModeDisplayText = key;
        CurrentSearchTextParseMode = SearchTextParseModes[key];
    }
    string CurrentSearchTextParseModeDisplayText { get; set; } = "Group Words By And";
    GridSearchTextParseMode CurrentSearchTextParseMode { get; set; } = GridSearchTextParseMode.GroupWordsByAnd;

    // ============================================================ \\

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        // var user = (await authenticationState).User;
        // if (!user.Identity.IsAuthenticated)
        // {
        //     //NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        //     //navManager.NavigateTo("/Login", true);
        //     //navManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(navManager.Uri)}");
        // }
        // else { }

        // var authstate = await authStateProvider.GetAuthenticationStateAsync();
        // var userClaimsPrincipal = authstate.User; // ClaimsPrincipal
        // var userClaimsPrincipalName = userClaimsPrincipal.Identity.Name;

        // if (userClaimsPrincipalName != null)
        // {
        //     var userData = userAccountService.GetUserAccountFromClaims(userClaimsPrincipal);

        //     if (userData != null)
        //     {
        //         if (userData.Role == "Administrator") { }
        //     }
        //     else { }
        // }

        SqlData sqlData = new SqlData();
        POGridData = await sqlData.GetPOData();
    }

    // ============================================================ \\

    public void AutoCollapseDetailRow_Changed(bool newValue)
    {
        AutoCollapseDetailRow = newValue;
        if (newValue)
        {
            POGrid.BeginUpdate();
            POGrid.CollapseAllDetailRows();
            POGrid.ExpandDetailRow(0);
            POGrid.EndUpdate();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task; // Waits for grid data to load
                                      // Grid.ExpandDetailRow(0);
        }
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        // if (e.ElementType == GridElementType.DataRow && (System.Decimal)e.Grid.GetRowValue(e.VisibleIndex, "Total") > 1000)
        // {
        //     e.CssClass = "highlighted-item";
        // }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "FactoryCancel")
        {
            // int temperatureC = (int)e.Grid.GetRowValue(e.VisibleIndex, "TemperatureC");
            // if (temperatureC < 0)
            //     e.CssClass = "blue-bg";
            // if (temperatureC > 20)
            //     e.CssClass = "red-bg";

            e.Style = "font-weight: 800";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "PONumber")
        {
            // int temperatureC = (int)e.Grid.GetRowValue(e.VisibleIndex, "TemperatureC");
            // if (temperatureC < 0)
            //     e.CssClass = "blue-bg";
            // if (temperatureC > 20)
            //     e.CssClass = "red-bg";

            e.Style = "font-weight: 800";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "Units")
        {
            decimal units = (decimal)e.Grid.GetRowValue(e.VisibleIndex, "Units");
            if (units > 100)
                e.Style = "color: red";
        }
    }
    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        if (e.FieldName == "FactoryCancel")
        {
            // e.DisplayText = CustomerList.Where(p => p.CustomerId == ((Customer)e.Value).CustomerId).FirstOrDefault().CompanyName;
            if (DateTime.Parse(e.Value.ToString()) <= new DateTime(1900, 1, 1))
                e.DisplayText = "";
        }
    }
    void POGrid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newPOData = (POData)e.EditModel;
            // newPOData.PONumber = 
            newPOData.OrderDate = DateTime.Now;
        }
        else
        {
            var newPOData = (POData)e.EditModel;
            newPOData.FactoryCancel = DateTime.Now;
        }
    }
    async Task POGrid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editablePOData = (POData)e.EditModel;
        // if (e.IsNew)
        //     await NwindDataService.InsertEmployeeAsync(editableEmployee);
        // else
        //     await NwindDataService.UpdateEmployeeAsync((EditableEmployee)e.DataItem, editableEmployee);
        await POUpdateDataAsync();
    }
    async Task POGrid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var deletingPOData = (POData)e.DataItem;

        // await NwindDataService.RemoveEmployeeAsync((EditableEmployee)e.DataItem);
        await POUpdateDataAsync();
    }
    async Task POUpdateDataAsync()
    {
        // POGridData = await sqlData.GetPOData();
    }

    public void Dispose()
    {
        // Northwind?.Dispose();
    }

    // ============================================================ \\

    // public void OnDashboardScriptsLoading(ScriptsLoadingEventArgs e)
    // {
    //     //e.Scripts.Add("/parameter-item.js");
    //     e.Scripts.Add("/parameter-item-ver2.js");
    // }

    // private async void RefreshDashboard()
    // {
    //     await js.InvokeVoidAsync("refresh");
    // }

    // public string GetCapitalizedName(string input)
    // {
    //     return input[0].ToString().ToUpper() + input.Substring(1);
    // }

    // public async Task DisplayGreetingAlert()
    // {
    //     //var authState = await authenticationState;
    //     //var message = $"Hello {authState.User.Identity.Name}";

    //     //await js.InvokeVoidAsync("alert", message);
    //}

    // ============================================================ \\
}