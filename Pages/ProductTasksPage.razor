@page "/ProductTasksPage"
@using DevExpress.Data.Filtering
@using DevExpress.Xpo
@using LAGem_POPortal.Authentication
@using DevExpress.Blazor;
@using LAGem_POPortal.Data
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@* @inject UserAccountService userAccountService *@

@using LAGem_POPortal.Models
@using Microsoft.EntityFrameworkCore

<AuthorizeView>
    <Authorized Context="Authorized">
        @* <div hidden="!@HiddenGrid">
            <a href="/login">@HeaderMessage</a>
        </div> *@

<DxGrid @ref="MainGrid"
        Data="MainGridData"
        CssClass="@gridCss"
        Name="MainGrid"
        KeyFieldName="Id"
        PagerPosition="GridPagerPosition.Bottom"
        PageSizeSelectorVisible="false"
        PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25 })"
        PageSizeSelectorAllRowsItemVisible="true"
        PageSize="@PageSize"
        @bind-PageIndex="@ActivePageIndex"
        AutoFitColumnWidths="true"
        AutoCollapseDetailRow="@AutoCollapseDetailRow"
        AutoExpandAllGroupRows="@AutoExpandAllGroupRows"
        ColumnResizeMode="@CurrentColumnResizeMode"
        EditMode="GridEditMode.EditRow"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
        FooterDisplayMode="GridFooterDisplayMode.Auto"
        ShowGroupPanel="@ShowGroupPanel"
        ShowSearchBox="@ShowSearchBox"
        SearchText=""
        SearchTextParseMode="CurrentSearchTextParseMode"
        CustomizeElement="Grid_CustomizeElement"
        CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        CustomizeEditModel="Grid_CustomizeEditModel"
        RowClick="Grid_OnRowClick"        
        HighlightRowOnHover="true"
        TextWrapEnabled="true"
        ValidationEnabled="false">
    <Columns>
        <DxGridCommandColumn Context="AddTaskContext" Width="40px" Visible="false">
            <HeaderTemplate>
                <DxButton IconCssClass="grid-icon grid-icon-new" RenderStyle="ButtonRenderStyle.Link" aria-label="Add" />
            </HeaderTemplate>
            <CellDisplayTemplate>
                @if (AddTaskContext.GetRowValue("TaskResult").Equals("Un-Tested") || AddTaskContext.GetRowValue("TaskResult").Equals(""))
                {
                    <div class="grid-cell-align-center">
                        <DxButton IconCssClass="grid-icon grid-icon-add"
                                  RenderStyle="ButtonRenderStyle.Link" aria-label="Add"
                                  Click="@(() => AddEntryToTasksGridData((TaskQueue)AddTaskContext.DataItem))" />
                    </div>
                }
            </CellDisplayTemplate>
        </DxGridCommandColumn>

        <DxGridDataColumn FieldName="ProductNo" Caption="Item No" ReadOnly="true" MinWidth="100" Width="100" />
        <DxGridDataColumn FieldName="SONumber" Caption="SO No" ReadOnly="true" MinWidth="100" Width="100" />
        <DxGridDataColumn FieldName="CustomerName" Caption="Customer Name" ReadOnly="true" MinWidth="100" />
        <DxGridDataColumn FieldName="TasksCount" Caption="Tasks" DisplayFormat="n0" ReadOnly="true" TextAlignment="GridTextAlignment.Right" Width="100" MinWidth="60" Visible="true" />
        <DxGridDataColumn FieldName="ProductName" Caption="Item Desc" ReadOnly="true" MinWidth="100" />
        <DxGridDataColumn FieldName="ProductTypeName" Caption="Item Type" ReadOnly="true" MinWidth="100" Width="100" />
        <DxGridDataColumn FieldName="SODate" Caption="SO Date" DisplayFormat="d" ReadOnly="true" MinWidth="80" Width="100" />
        @* <DxGridDataColumn FieldName="ProgramName" Caption="Program Name" ReadOnly="true" MinWidth="100" />*@

        <DxGridCommandColumn Width="150px" Visible="false"
                             DeleteButtonVisible="false"
                             EditButtonVisible="false"
                             CancelButtonVisible="false"
                             SaveButtonVisible="false"
                             NewButtonVisible="false" />
    </Columns>
    <DetailRowTemplate Context="ProductDataFormContext">
        @{
            selectedRow = (TaskQueue)ProductDataFormContext.DataItem;
                    if (productId != selectedRow.ProductId || soHeaderId != selectedRow.SoHeaderId)
            {
                productId = selectedRow.ProductId;
                soHeaderId = selectedRow.SoHeaderId;

                //LoadGridData("SubGrid", productId, soHeaderId);
                LoadGridData("TasksGrid", productId, soHeaderId);
            }
            <div class="mb-2">
                @headerNote
            </div>

            <DxFormLayout CssClass="w-100">
                @*<DxFormLayoutItem Context="ProductTaskDataSection" ColSpanMd="5" CssClass="fl">

                    <DxGrid @ref="SubGrid"
                            Data="SubGridData"
                            CssClass="@gridCss"
                            Name="SubGrid"
                            KeyFieldName="Id"
                            PagerPosition="GridPagerPosition.Bottom"
                            PageSizeSelectorVisible="true"
                            PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25 })"
                            PageSizeSelectorAllRowsItemVisible="true"
                            PageSize="@PageSize"
                            @bind-PageIndex="@ActivePageIndex"
                            AutoFitColumnWidths="true"
                            AutoCollapseDetailRow="@AutoCollapseDetailRow"
                            AutoExpandAllGroupRows="@AutoExpandAllGroupRows"
                            ColumnResizeMode="@CurrentColumnResizeMode"
                            EditMode="GridEditMode.EditRow"
                            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                            FooterDisplayMode="GridFooterDisplayMode.Auto"
                            ShowGroupPanel="@ShowGroupPanel"
                            ShowSearchBox="@ShowSearchBox"
                            SearchText=""
                            SearchTextParseMode="CurrentSearchTextParseMode"
                            CustomizeElement="Grid_CustomizeElement"
                            CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                            EditModelSaving="Grid_EditModelSaving"
                            DataItemDeleting="Grid_DataItemDeleting"
                            CustomizeEditModel="Grid_CustomizeEditModel"
                            RowClick="Grid_SubGridOnRowClick"
                            HighlightRowOnHover="true"
                            TextWrapEnabled="true"
                            ValidationEnabled="false">
                        <Columns>

                            <DxGridDataColumn FieldName="TaskName" Caption="Task Name" ReadOnly="false" Width="100" MinWidth="160" FixedPosition="GridColumnFixedPosition.Left" />
                            <DxGridDataColumn FieldName="TaskDescription" Caption="Task Description" ReadOnly="false" MinWidth="100" Visible="false" />
                            <DxGridDataColumn FieldName="TaskType" Caption="Task Type" ReadOnly="false" Width="100" MinWidth="100" />

                            <DxGridDataColumn FieldName="TaskSequence" Caption="Task Sequence" ReadOnly="false" Width="60" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" Visible="false" />
                            <DxGridDataColumn FieldName="Required" Caption="Required" ReadOnly="false" Width="50" />
                            <DxGridDataColumn FieldName="Qty" Caption="Qty" ReadOnly="false" MinWidth="50" />
                            <DxGridDataColumn FieldName="AssignedTo" Caption="AssignedTo" ReadOnly="false" MinWidth="100" />

                            <DxGridCommandColumn Width="150px" Visible="false"
                                                 DeleteButtonVisible="false"
                                                 EditButtonVisible="false"
                                                 CancelButtonVisible="false"
                                                 SaveButtonVisible="false"
                                                 NewButtonVisible="false" />
                        </Columns>
                    </DxGrid>

                </DxFormLayoutItem>*@

                <DxFormLayoutItem Context="TestsList" ColSpanMd="12" CssClass="fl">

                    <DxGrid @ref="TasksGrid"
                            Data="TasksGridData" CssClass="my-partnertasks-grid"
                            PopupEditFormCssClass="my-popup-style"
                            KeyFieldName="TaskQueueId"
                            PagerPosition="GridPagerPosition.Bottom"
                            PageSizeSelectorVisible="false"
                            PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25, 30 })"
                            PageSizeSelectorAllRowsItemVisible="true"
                            PageSize="@PageSize"
                            @bind-PageIndex="@ActivePageIndex"
                            AutoFitColumnWidths="true"
                            AutoCollapseDetailRow="true"
                            ColumnResizeMode="@CurrentColumnResizeMode"
                            EditMode="@CurrentEditMode"
                            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                            FooterDisplayMode="GridFooterDisplayMode.Auto"
                            TextWrapEnabled="@TextWrapEnabled"
                            ValidationEnabled="false"
                            WordWrapEnabled="@WordWrapEnabled"
                            HighlightRowOnHover="true"
                            ShowAllRows="true"
                            ShowFilterRow="false"
                            ShowGroupPanel="@SubGridShowGroupPanel"
                            ShowSearchBox="@SubGridShowSearchBox"
                            SearchText=""
                            SearchTextParseMode="CurrentSearchTextParseMode"
                            SelectionMode="GridSelectionMode.Single"
                            SelectedDataItem="@SelectedDataItem"
                            SelectedDataItemChanged="Grid_OnSelectedDataItemChanged"
                            CustomizeElement="Grid_CustomizeElement"
                            CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                            CustomizeEditModel="Grid_CustomizeEditModel"
                            CustomizeDataRowEditor="Grid_OnCustomizeDataRowEditor"
                            EditModelSaving="Grid_EditModelSaving"
                            DataItemDeleting="Grid_DataItemDeleting">
                        <Columns>
                            <DxGridCommandColumn Width="150px" Visible="true"
                                                 DeleteButtonVisible="false"
                                                 EditButtonVisible="true"
                                                 CancelButtonVisible="true"
                                                 SaveButtonVisible="false"
                                                 NewButtonVisible="false" />

                            @*<DxGridCommandColumn Context="AddTaskContext" Width="40px">
                                <HeaderTemplate>
                                    <DxButton IconCssClass="grid-icon grid-icon-new" RenderStyle="ButtonRenderStyle.Link" aria-label="Add" />
                                </HeaderTemplate>
                                <CellDisplayTemplate>
                                    @if (AddTaskContext.GetRowValue("TaskStatus").Equals("Un-Tested") || AddTaskContext.GetRowValue("TaskStatus").Equals(""))
                                    {
                                        <div class="grid-cell-align-center">
                                            <DxButton IconCssClass="grid-icon grid-icon-add"
                                                      RenderStyle="ButtonRenderStyle.Link" aria-label="Add"
                                                      Click="@(() => AddEntryToTasksGridData((TaskQueue)AddTaskContext.DataItem))" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="grid-cell-align-center">
                                            <DxButton RenderStyle="ButtonRenderStyle.Link" aria-label="Add" Text="Edit"
                                                      Click="@(() => EditEntryFromTasksGridData((TaskQueue)AddTaskContext.DataItem, AddTaskContext.VisibleIndex))">Edit</DxButton>
                                        </div>
                                    }
                                </CellDisplayTemplate>
                            </DxGridCommandColumn>*@

                            <DxGridDataColumn FieldName="TaskName" Caption="Task Name" ReadOnly="true" Width="100" MinWidth="160" />
                            <DxGridDataColumn FieldName="TaskDescription" Caption="Task Description" ReadOnly="true" MinWidth="100" Visible="false" />
                            <DxGridDataColumn FieldName="TaskType" Caption="Task Type" ReadOnly="true" Width="100" MinWidth="100" />

                            <DxGridDataColumn FieldName="TaskSequence" Caption="Task Sequence" ReadOnly="true" Width="60" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" Visible="false" />
                            <DxGridDataColumn FieldName="Required" Caption="Required" ReadOnly="true" Width="60" />
                            <DxGridDataColumn FieldName="Qty" Caption="Qty" ReadOnly="true" MinWidth="100" Visible="true" />
                            <DxGridDataColumn FieldName="AssignedTo" Caption="AssignedTo" ReadOnly="true" MinWidth="100" Visible="true" />

                            @*<DxGridDataColumn FieldName="TaskStatusId" Caption="Task Status" ReadOnly="true" Width="100" MinWidth="100" Visible="false" />*@
                            <DxGridDataColumn FieldName="TaskStatusName" Caption="Task Status" ReadOnly="true" Width="100" MinWidth="100" />
                            <DxGridDataColumn FieldName="TaskCompleted" Caption="Completed" ReadOnly="false" Width="60" />
                            <DxGridDataColumn FieldName="TaskNote" Caption="Notes" ReadOnly="false" MinWidth="100" />
                        </Columns>

                        <EditFormTemplate Context="EditFormContext">
                            @{
                                var task = (TaskQueue)EditFormContext.EditModel;
                                editRow = task;
                            }
                            <DxFormLayout CssClass="w-100">
                                <DxFormLayoutItem Caption="Task Name:" ColSpanMd="6">
                                    @EditFormContext.GetEditor("TaskName")
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Task Name:" ColSpanMd="6">
                                    @EditFormContext.GetEditor("TaskType")
                                </DxFormLayoutItem>
                                @* <DxFormLayoutItem Caption="Task Types:" ColSpanMd="6">
                            <DxComboBox Data="@taskTypeLookupList"
                            NullText="Select Task Type..."
                            FilteringMode="DataGridFilteringMode.Contains"
                            TextFieldName="LookupText"
                            ValueFieldName="LookupText"
                            Value="@task.TaskType"
                            ValueChanged="(string newCellValue) => { task.TaskType = newCellValue; }">
                            </DxComboBox>
                            </DxFormLayoutItem> *@
                                <DxFormLayoutItem Caption="Task Description:" ColSpanMd="9">
                                    @EditFormContext.GetEditor("TaskDescription")
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Task Required:" ColSpanMd="3">
                                    @EditFormContext.GetEditor("Required")
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="Task Qty:" ColSpanMd="3">
                                    @EditFormContext.GetEditor("Qty")
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Assigned To:" ColSpanMd="6" Visible="!useAssignedToDropdownList">
                                    @EditFormContext.GetEditor("AssignedTo")
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Assigned To:" ColSpanMd="6" Visible="useAssignedToDropdownList">
                                    <DxComboBox Data="@assignedToListData"
                                                NullText="Select..."
                                                Value="@task.AssignedTo"
                                                ValueChanged="(string newCellValue) => { task.AssignedTo = newCellValue; }">
                                    </DxComboBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem ColSpanMd="3" Visible="displayUseDropdownListToggle">
                                    <DxCheckBox Checked="useAssignedToDropdownList" CheckedChanged="new Func<bool, Task>(UseAssignedToDropdownList_CheckedChanged)">Use Dropdown List</DxCheckBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem ColSpanMd="3" Visible="!displayUseDropdownListToggle">
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="Task Types:" ColSpanMd="4">
                                    <DxComboBox Data="@qcStatusLookupList"
                                                NullText="Select Task Status..."
                                                FilteringMode="DataGridFilteringMode.Contains"
                                                TextFieldName="LookupText"
                                                ValueFieldName="Id"
                                                Value="@task.TaskStatusId"
                                                ValueChanged="(int newCellValue) => { 
                                                    task.TaskStatusId = newCellValue;
                                                    Lookup selectedLookup = qcStatusLookupList.Where(c => c.Id == newCellValue).FirstOrDefault();
                                                    task.TaskStatusName = selectedLookup.LookupText;
                                                }">
                                    </DxComboBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Task Completed:" ColSpanMd="3">
                                    @EditFormContext.GetEditor("TaskCompleted")
                                </DxFormLayoutItem>
                                <DxFormLayoutItem ColSpanMd="5" Visible="!displayUseDropdownListToggle">
                                </DxFormLayoutItem>

                                <DxFormLayoutItem Caption="Task Notes:" ColSpanMd="12">
                                    <DxMemo @bind-Text="task.TaskNote"
                                            ResizeMode="MemoResizeMode.VerticalAndHorizontal">
                                    </DxMemo>
                                </DxFormLayoutItem>

                            </DxFormLayout>
                        </EditFormTemplate>
                        <ToolbarTemplate Context="GridToolbar">
                            <DxToolbar Context="GridToolbar" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                <Items>
                                    @* <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Save Data" RenderStyle="ButtonRenderStyle.Secondary" Click="Grid_SaveData_Click" /> *@
                                    @* <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Auto Fit Columns" RenderStyle="ButtonRenderStyle.Secondary" Click="Grid_FitWidths_Click" /> *@
                                    @* <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Column Chooser" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-icon-column-chooser" Click="Grid_ColumnChooserButton_Click" />*@
                                    @* <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Refresh Data" RenderStyle="ButtonRenderStyle.Secondary" Click="Grid_RefreshData_Click" />
                                    @* <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Cancel Edit" RenderStyle="ButtonRenderStyle.Secondary" Click="Grid_CancelEdit_Click" /> *@
                                    <DxToolbarItem BeginGroup="true" Alignment="ToolbarItemAlignment.Left">
                                        <Template Context="toolbar_item_context">
                                            <div class="d-flex flex-row align-items-center h-100">
                                                <DxCheckBox Checked="usePopupEditForm" CheckedChanged="new Func<bool, Task>(UsePopupEditForm_CheckedChanged)">Use Popup Edit Form</DxCheckBox>
                                            </div>
                                        </Template>
                                    </DxToolbarItem>
                                </Items>
                            </DxToolbar>
                        </ToolbarTemplate>
                    </DxGrid>

                </DxFormLayoutItem>

            </DxFormLayout>
        }
    </DetailRowTemplate>
</DxGrid>

    </Authorized>
    <NotAuthorized Context="NotAuthorized">
        @*  @{ navManager.NavigateTo("/Login");} *@
        <h3>Please <a href="/login">Login</a> to access the Portal</h3>
        @* <LoginPage /> *@
        @* <LoginRedirect /> *@
    </NotAuthorized>
</AuthorizeView>

<style>
    .highlighted-item > td {
        background-color: rgba(245, 198, 203, 0.5);
    }

    .dx-datagrid-headers {
        white-space: normal;
    }

    .dx-datagrid-nowrap.dx-datagrid-headers .dx-header-row > td > .dx-datagrid-text-content {
        white-space: normal;
    }

    .hide-toolbar .dxbl-grid-toolbar-container {
        display: none;
    }

    .my-popup-style {
        min-width: 1200px;
        min-height: 450px;
    }

    .my-partnertasks-grid .dxbl-fl-ctrl dxbl-fl-ctrl-nc {
        margin-top: 0px;
    }

    .fl > div {
        margin-top: 0 !important;
    }
</style>

@code {
    // ============================================================ \\

    #region Variables

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    string currentUser { get; set; } = "";

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    // [Parameter]
    //public TaskQueue MainData { get; set; } // from SOTasksHeaderPage

    DxGrid MainGrid { get; set; }
    // DxGrid SubGrid { get; set; }
    DxGrid TasksGrid { get; set; }

    IEnumerable<TaskQueue> MainGridData { get; set; }
    // IEnumerable<TaskQueue> SubGridData { get; set; }
    IEnumerable<TaskQueue> TasksGridData { get; set; }

    // ------------------------------------------------------------ \\

    Dictionary<string, GridSearchTextParseMode> SearchTextParseModes { get; } = new Dictionary<string, GridSearchTextParseMode>{
        { "Group Words By And", GridSearchTextParseMode.GroupWordsByAnd },
        { "Group Words By Or", GridSearchTextParseMode.GroupWordsByOr },
        { "Exact Match", GridSearchTextParseMode.ExactMatch }
    };
    void ChangeSearchMode(string key)
    {
        CurrentSearchTextParseModeDisplayText = key;
        CurrentSearchTextParseMode = SearchTextParseModes[key];
    }
    string CurrentSearchTextParseModeDisplayText { get; set; } = "Group Words By And";
    GridSearchTextParseMode CurrentSearchTextParseMode { get; set; } = GridSearchTextParseMode.GroupWordsByAnd;

    GridColumnResizeMode CurrentColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer; // GridColumnResizeMode.NextColumn;
    string CurrentColumnResizeModeDisplayText { get; set; } = "Next Column";
    Dictionary<string, GridColumnResizeMode> GridColumnResizeModes { get; } = new Dictionary<string,
    GridColumnResizeMode>{
        { "Disabled", GridColumnResizeMode.Disabled },                  //A user cannot resize columns.
        { "Next Column", GridColumnResizeMode.NextColumn },             //When a user resizes a column, the width of the column to the right changes, but the Grid's total width does not change.
        { "Columns Container", GridColumnResizeMode.ColumnsContainer }  //When a user resizes a column, all other columns retain width settings, but the width of the entire column container changes proportionally.
    };
    void ChangeResizeMode(string key)
    {
        CurrentColumnResizeModeDisplayText = key;
        CurrentColumnResizeMode = GridColumnResizeModes[key];
    }
    bool usePopupEditForm { get; set; } = true;
    GridEditMode CurrentEditMode { get { return usePopupEditForm ? GridEditMode.PopupEditForm : GridEditMode.EditForm; } } // GridEditMode.EditRow

    IReadOnlyList<object> SelectedDataItems { get; set; }
    IEnumerable<GridSelectAllCheckboxMode> SelectAllCheckboxModes { get; } = Enum.GetValues<GridSelectAllCheckboxMode>();
    GridSelectAllCheckboxMode CurrentSelectAllCheckboxMode { get; set; }

    Dictionary<string, string[]> GroupInfo { get; } = new Dictionary<string, string[]> { { "ProductTaskId", new string[] { "ProductTaskId" } } };
    string CurrentGroupInfoKey { get; set; } = "ProductTaskId";
    bool ShowGroupPanel { get; set; } = false;
    bool ShowSearchBox { get; set; } = true;
    bool SubGridShowGroupPanel { get; set; } = false;
    bool SubGridShowSearchBox { get; set; } = false;

    bool AutoCollapseDetailRow { get; set; } = true;
    bool AutoExpandAllGroupRows { get; set; } = true;
    bool TextWrapEnabled = true;
    bool WordWrapEnabled = false;

    int PageCount { get; set; } = 0;
    int TotalRecords { get; set; } = 0;
    int PageSize { get; set; } = 20;
    int ActivePageIndex { get; set; } = 0;

    // ------------------------------------------------------------ \\

    bool AutoFitColWidths { get; set; } = true;
    bool isMainGridAutoFitPending { get; set; } = true;
    bool isListGridAutoFitPending { get; set; } = true;
    bool isWorkGridAutoFitPending { get; set; } = true;
    bool editOnInsert { get; set; } = false;
    bool filteringMainData { get; set; } = false;

    bool showToolbar { get; set; } = false;
    string gridCss => !showToolbar ? "hide-toolbar my-partnertasks-grid" : "my-partnertasks-grid";
    DateTime blankDate { get; set; } = new DateTime(1900, 1, 1);
    CriteriaOperator gridFilterCriteria { get; set; }
    object SelectedDataItem { get; set; }

    // ------------------------------------------------------------ \\

    int businessPartnerId_Customer { get; set; } = 0;
    int productId { get; set; } = 0;
    int soHeaderId { get; set; } = 0;
    TaskQueue selectedRow { get; set; }
    TaskQueue editRow { get; set; }
    TaskQueue? addTask { get; set; }
    string headerNote { get; set; } = "";

    bool useAssignedToDropdownList { get; set; } = true;
    List<string> assignedToListData { get; set; } = new List<string>();
    bool displayUseDropdownListToggle { get; set; } = false;
    bool addtoAllMaterials { get; set; } = false;

    List<Lookup> qcStatusLookupList { get; set; }

    #endregion

    // ============================================================ \\

    #region Constructors/Page Functions

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        var authstate = await authStateProvider.GetAuthenticationStateAsync();
        var userClaimsPrincipal = authstate.User; // ClaimsPrincipal
        var userClaimsPrincipalName = userClaimsPrincipal.Identity.Name;
        currentUser = userClaimsPrincipal.Identity.Name;

        isMainGridAutoFitPending = true;
        isListGridAutoFitPending = true;
        isWorkGridAutoFitPending = true;

        SqlData sqlData = new SqlData();
        qcStatusLookupList = await sqlData.GetLookupList("QC STATUS");

        RefreshData_Click();

        //assignedToListData = new List<string>() { "Me", "Myself", "I" };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task; // Waits for grid data to load
                                      // Grid.ExpandDetailRow(0);
        }
        if (MainGrid != null && isMainGridAutoFitPending)
        {
            isMainGridAutoFitPending = false;
            await MainGrid.WaitForDataLoadAsync();
            MainGrid.AutoFitColumnWidths();
        }
        //if (SubGrid != null && isListGridAutoFitPending)
        //{
        //    isListGridAutoFitPending = false;
        //    await SubGrid.WaitForDataLoadAsync();
        //    SubGrid.AutoFitColumnWidths();
        //}
        if (TasksGrid != null && isWorkGridAutoFitPending)
        {
            isWorkGridAutoFitPending = false;
            await TasksGrid.WaitForDataLoadAsync();
            TasksGrid.AutoFitColumnWidths();
        }
    }

    public void Dispose()
    {
        // Northwind?.Dispose();
    }

    #endregion

    // ============================================================ \\

    #region Load/Refresh Functions

    void Grid_FitWidths()
    {
        //StateHasChanged();
        MainGrid.AutoFitColumnWidths();
    }

    void ColumnChooserButton_Click()
    {
        MainGrid.ShowColumnChooser();
    }

    async void RefreshData_Click()
    {
        await LoadGridData();
    }

    // ============================================================ \\

    async Task UsePopupEditForm_CheckedChanged(bool value)
    {
        usePopupEditForm = value;
        await TasksGrid.CancelEditAsync();
    }

    async Task UseAssignedToDropdownList_CheckedChanged(bool value)
    {
        useAssignedToDropdownList = value;
    }

    async Task AddtoAllMaterials_CheckedChanged(bool value)
    {
        addtoAllMaterials = value;
    }

    // ============================================================ \\

    async Task LoadGridData()
    {
        SqlData sqlData = new SqlData();
        MainGridData = await sqlData.GetAllProductQueueTasks();
        //SubGridData = await sqlData.GetProductQueueTasks(-1);
        TasksGridData = await sqlData.GetProductQueueTasks(-1);

        //var criteriaProductId = new InOperator("ProductId", new int[] { 0 });
        //CriteriaOperator gridFilterCriteria = criteriaProductId;
        //if (SubGrid != null && SubGridData != null)
        //    SubGrid.SetFilterCriteria(gridFilterCriteria);

        //var criteriaPODetailId = new InOperator("ProductTestId", new int[] { 0 });
        //gridFilterCriteria = criteriaPODetailId;
        //if (TasksGrid != null && TasksGridData != null)
        //    TasksGrid.SetFilterCriteria(gridFilterCriteria);
        //
        await InvokeAsync(StateHasChanged); // <-- refreshes
    }
    async Task LoadGridData(string gridName, int id, int headerId)
    {
        //SqlData sqlData = new SqlData();
        //GridData = await sqlData.GetSODetailMaterialAndTestData(soHeaderId, false);

        if (gridName == "SubGrid")
        {
            //var criteriaProductId = new InOperator("ProductId", new int[] { id });
            //CriteriaOperator productGridFilterCriteria = criteriaProductId;
            //if (SubGrid != null && SubGridData != null)
            //    SubGrid.SetFilterCriteria(productGridFilterCriteria);
            //
            //var criteriaProductTestId = new InOperator("ProductTestId", new int[] { 0 });
            //CriteriaOperator testGridFilterCriteria =criteriaProductTestId;
            //if (TestGrid != null && TestGridData != null)
            //    TestGrid.SetFilterCriteria(testGridFilterCriteria);
            //
            //await InvokeAsync(StateHasChanged); // <-- refreshes

            SqlData sqlData = new SqlData();
            if (id == 0)
            {
                //SubGridData = await sqlData.GetProductQueueTasks(-1, headerId);
                TasksGridData = await sqlData.GetProductQueueTasks(-1, headerId);
            }
            else
            {
                //SubGridData = await sqlData.GetProductQueueTasks(id);
                TasksGridData = await sqlData.GetProductQueueTasks(id);
            }

            //if (SubGridData.Count() == 1)
            //{
            //    int taskQueueId = SubGridData.ToList()[0].TaskQueueId;
            //    var criteriaProductTaskId = new InOperator("TaskQueueId", new int[] { id });
            //    gridFilterCriteria = criteriaProductTaskId;
            //    if (TasksGrid != null && TasksGridData != null)
            //        TasksGrid.SetFilterCriteria(gridFilterCriteria);
            //
            //    await InvokeAsync(StateHasChanged); // <-- refreshes
            //
            //    await LoadGridData("TasksGrid", taskQueueId, 0);
            //}
            //else
            //{
            //    var criteriaProductTaskId = new InOperator("TaskQueueId", new int[] { 0 });
            //    gridFilterCriteria = criteriaProductTaskId;
            //    if (TasksGrid != null && TasksGridData != null)
            //        TasksGrid.SetFilterCriteria(gridFilterCriteria);
            //
            //    await InvokeAsync(StateHasChanged); // <-- refreshes
            //}
        }
        if (gridName == "TasksGrid")
        {
            //var criteriaProductTaskId = new InOperator("TaskQueueId", new int[] { id });
            //gridFilterCriteria = criteriaProductTaskId;
            //if (TasksGrid != null && TasksGridData != null)
            //    TasksGrid.SetFilterCriteria(gridFilterCriteria);
            //
            ////await InvokeAsync(StateHasChanged); // <-- refreshes

            SqlData sqlData = new SqlData();
            TasksGridData = await sqlData.GetProductQueueTasks(id, headerId);

            await InvokeAsync(StateHasChanged); // <-- refreshes
        }
    }
    async Task LoadGridData(int prodId, int headerId)
    {
        SqlData sqlData = new SqlData();
        MainGridData = await sqlData.GetAllProductQueueTasks();
        if (productId == 0)
        {
            //SubGridData = await sqlData.GetProductQueueTasks(-1, headerId);
            TasksGridData = await sqlData.GetProductQueueTasks(-1, headerId);
        }
        else
        {
            //SubGridData = await sqlData.GetProductQueueTasks(prodId);
            TasksGridData = await sqlData.GetProductQueueTasks(prodId);
        }

        await InvokeAsync(StateHasChanged);
    }

    #endregion

    // ============================================================ \\

    #region Main Grid Functions

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.Grid.KeyFieldName == "TaskQueueId" && e.ElementType == GridElementType.DataRow)
        {
            string status = (System.String)e.Grid.GetRowValue(e.VisibleIndex, "TaskStatusName");

            if (status == "Approved")
            {
                e.Style = "color: green";
            }
            if (status == "Passed")
            {
                e.Style = "color: green";
            }
            if (status == "Failed")
            {
                e.Style = "color: red";
            }
            if (status == "Pending")
            {
                e.Style = "background: yellow";
            }
        }

        //if (e.Grid.KeyFieldName == "TaskId" && e.ElementType == GridElementType.DataRow && (System.Boolean)e.Grid.GetRowValue(e.VisibleIndex, "isUsed") == true)
        //{
        //    e.Style = "opacity: 0.5";
        //}

        @* if (e.Grid.Data != null && e.Grid.Data.GetType().GetGenericArguments().Single() == typeof(SODetailMaterial))
        {
            if (e.Grid.KeyFieldName == "Id" && e.ElementType == GridElementType.DataRow)
            {
                if ((int)e.Grid.GetRowValue(e.VisibleIndex, "SOSubLineNo") == 0)
                    e.CssClass = "highlighted-item";
                else
                    e.Style = "opacity: 0.5";
            }
        } *@
        //if (e.Grid.Data != null && e.Grid.Data.GetType().GetGenericArguments().Single() == typeof(ProductTest))
        //{
        //}
    }
    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        // string[] dateList = new string[] { "SODate", "StartDate", "EndDate", "ShipmentDate", "ShipToETA" };
        // if (dateList.Contains(e.FieldName))
        if (e.Value.GetType() == typeof(DateTime))
        {
            if (DateTime.Parse(e.Value.ToString()) <= new DateTime(1900, 1, 1))
                e.DisplayText = "";
        }
    }

    void Grid_OnRowClick(GridRowClickEventArgs e)
    {
        ////Alert = $"Clicked row index: {e.VisibleIndex}. Corresponding date: '{e.Grid.GetRowValue(e.VisibleIndex, "Date")}'";
        //int subLineNo = (int)e.Grid.GetRowValue(e.VisibleIndex, "SOSubLineNo");
        //
        //if (subLineNo == 0)
        //{
        //
        //}
    }
    void Grid_SubGridOnRowClick(GridRowClickEventArgs e)
    {
        //Alert = $"Clicked row index: {e.VisibleIndex}. Corresponding date: '{e.Grid.GetRowValue(e.VisibleIndex, "Date")}'";
        int taskQueueId = (int)e.Grid.GetRowValue(e.VisibleIndex, "TaskQueueId");

        if (taskQueueId == 0)
        {

        }
        else
        {
            LoadGridData( "TasksGrid", taskQueueId, -1);
        }
    }
    void Grid_OnSelectedDataItemChanged(object newSelection)
    {
        @* SelectionChangesInfo = "You selected '" + (newSelection as Product).ProductName +
            "' and deselected '" + (SelectedDataItem as Product).ProductName + "'";
        SelectedDataItem = newSelection; *@
    }
    void Grid_OnCustomizeDataRowEditor(GridCustomizeDataRowEditorEventArgs e)
    {
        //https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxGrid.CustomizeDataRowEditor?utm_source=SupportCenter&utm_medium=website&utm_campaign=docs-feedback&utm_content=T1206737

        if (e.FieldName == "PassedDate")
        {
            var dateSettings = e.EditSettings as IDateEditSettings;

            var otherDateEditSettings = e.Grid.GetColumnEditSettings<IEditSettings>("FailedDate");
        }
        if (e.FieldName == "FailedDate")
        {
            var dateSettings = e.EditSettings as IDateEditSettings;

            var otherDateEditSettings = e.Grid.GetColumnEditSettings<IEditSettings>("PassedDate");

            @* if (e.IsNewRow)
            {
                // Limit the available hire date for new employees two weeks ahead.
                dateSettings.MinDate = @DateTime.Today;
                dateSettings.MaxDate = @DateTime.Today.AddDays(14);
            }
            else
            {
                // Disable the hire date editing.
                dateSettings.Enabled = false;
                dateSettings.ShowDropDownButton = false;
            } *@
        }
    }
    async void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            @* if (e.EditModel.GetType() == typeof(TaskQueue))
            {
                var newObject = (TaskQueue)e.EditModel;

                if (addTask == null)
                {
                    newObject.ProductTestId = 0; // ((MAX)ProductTestId) + 1
                    newObject.ProductId = addTest.ProductId;
                    newObject.Qty = addTest.Qty;
                    newObject.RequestedDate = addTest.RequestedDate;
                    newObject.RequestedBy = addTest.RequestedBy;

                    newObject.ReceivedDate = addTest.ReceivedDate;
                    newObject.PassedDate = addTest.PassedDate;
                    newObject.PassedBy = addTest.PassedBy;
                    newObject.FailedDate = addTest.FailedDate;
                    newObject.FailedBy = addTest.FailedBy;

                    newObject.Comments = addTest.Comments;
                    newObject.Attachment = addTest.Attachment;
                }
                else
                {
                    newObject.ProductTestId = 0; // ((MAX)ProductTestId) + 1
                    newObject.ProductId = selectedRow.ProductId;
                    newObject.Qty = addTest.Qty;
                    newObject.RequestedDate = addTest.RequestedDate;
                    newObject.RequestedBy = currentUser;

                    newObject.ReceivedDate = blankDate;
                    newObject.PassedDate = blankDate;
                    newObject.PassedBy = "";
                    newObject.FailedDate = blankDate;
                    newObject.FailedBy = "";

                    newObject.Comments = "";
                    newObject.Attachment = "";

                    addTest = null;

                    //// Did NOT work
                    //Thread.Sleep(1500);
                    //Grid_CancelEdit_Click();
                }
            } *@
        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        e.Cancel = true;

        if (e.EditModel.GetType() == typeof(TaskQueue))
        {
            var savingObject = (TaskQueue)e.EditModel;

            if (e.IsNew)
                await InsertProductTasksDataAsync(savingObject);
            else
            {
                if (savingObject.TaskQueueId == 0)
                    await InsertProductTasksDataAsync(savingObject);
                else
                    await UpdateProductTasksDataAsync(savingObject);
            }

            await TasksGrid.CancelEditAsync();
        }
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem.GetType() == typeof(TaskQueue))
        {
            var deletingObject = (TaskQueue)e.DataItem;

            await DeleteProductTasksDataAsync(deletingObject);

            await TasksGrid.CancelEditAsync();
        }
    }
    async Task Grid_EditCanceling(GridEditCancelingEventArgs e)
    {
        //SyncBusinessPartnerTasks();
    }

    public async void AddEntryToTasksGridData(TaskQueue item)
    {
        bool isNew = item.TaskQueueId == 0;
        int prodId = item.ProductId;

        if (editOnInsert)
        {
            if (isNew)
            {
                @* var newObject = new TaskQueue();
                newObject.ProductTestId = 0; // ((MAX)ProductTestId) + 1
                newObject.ProductId = prodId;
                newObject.Qty = 1;
                newObject.RequestedDate = DateTime.Now;
                newObject.RequestedBy = currentUser;

                newObject.ReceivedDate = blankDate;
                newObject.PassedDate = blankDate;
                newObject.PassedBy = "";
                newObject.FailedDate = blankDate;
                newObject.FailedBy = "";

                newObject.Comments = "";
                newObject.Attachment = "";

                addTask = newObject;

                TasksGrid.StartEditNewRowAsync(); *@
            }
        }
        else
        {
            // Note: WIll NOT set model to "new"
            if (isNew)
            {
                @* var newObject = new TaskQueue();
                newObject.ProductTestId = 0; // ((MAX)ProductTestId) + 1
                newObject.ProductId = prodId;
                newObject.Qty = 1;
                newObject.RequestedDate = DateTime.Now;
                newObject.RequestedBy = currentUser;

                newObject.ReceivedDate = blankDate;
                newObject.PassedDate = blankDate;
                newObject.PassedBy = "";
                newObject.FailedDate = blankDate;
                newObject.FailedBy = "";

                newObject.Comments = "";
                newObject.Attachment = "";

                await InvokeAsync(StateHasChanged);

                InsertProductTasksDataAsync(newObject); *@
            }
        }
    }

    public async void EditEntryFromTasksGridData(TaskQueue item, int selectedIndex)
    {
        await TasksGrid.StartEditRowAsync(selectedIndex);
    }
    async Task InsertProductTasksDataAsync(TaskQueue item)
    {
        @* string query = @"INSERT INTO [PIMS].[dbo].[ProductTest] (
      [ProductId]
      ,[Qty]
      ,[RequestedDate]
      ,[RequestedBy]
      ,[ReceivedDate]
      ,[PassedDate]
      ,[PassedBy]
      ,[FailedDate]
      ,[FailedBy]
      ,[Comments]
      ,[Attachment])
        SELECT {0},{1},'{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}'";
        string fullQuery = string.Format(query
        , item.ProductId    // 0
        , item.Qty          // 1
        , item.RequestedDate // 2
        , item.RequestedBy  // 3
        , item.ReceivedDate // 4
        , item.PassedDate   // 5
        , item.PassedBy     // 6
        , item.FailedDate   // 7
        , item.FailedBy     // 8
        , item.Comments     // 9
        , item.Attachment   // 10
        );

        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        LoadGridData(); *@
    }
    async Task UpdateProductTasksDataAsync(TaskQueue item)
    {
        string query = @"UPDATE [PIMS].[dbo].[TaskQueue] SET
      [TaskStatusId] = {1}
      ,[TaskCompleted] = {2}
      ,[TaskNote] = '{3}'
      ,[Required] = {4}
      ,[AssignedTo] = '{5}'
      ,[Qty] = {6}
      WHERE [TaskQueueId] = {0}";

        //if (item.PassedDate > blankDate && string.IsNullOrWhiteSpace(item.PassedBy))
        //{
        //    item.RequestedBy = currentUser;
        //}
        //if (item.FailedDate > blankDate && string.IsNullOrWhiteSpace(item.FailedBy))
        //{
        //    item.FailedBy = currentUser;
        //}

        string fullQuery = string.Format(query
       , item.TaskQueueId   // 0
        , item.TaskStatusId // 1
        , (item.TaskCompleted) ? 1 : 0  // 2
        , item.TaskNote     // 3
        , (item.Required) ? 1 : 0       // 4
        , item.AssignedTo   // 5
        , item.Qty          // 6
       );

        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        LoadGridData(item.ProductId, item.SoHeaderId);

        //SqlData sqlData = new SqlData();
        //MainGridData = await sqlData.GetAllProductQueueTasks();
        //if (item.ProductId == 0)
        //{
        //    SubGridData = await sqlData.GetProductQueueTasks(-1, item.SoHeaderId);
        //    TasksGridData = await sqlData.GetProductQueueTasks(-1, item.SoHeaderId);
        //}
        //else
        //{
        //    SubGridData = await sqlData.GetProductQueueTasks(item.ProductId);
        //    TasksGridData = await sqlData.GetProductQueueTasks(item.ProductId);
        //}
    }
    async Task DeleteProductTasksDataAsync(TaskQueue item)
    {
        string query = @"DELETE FROM [PIMS].[dbo].[TaskQueue] WHERE [TaskQueueId] = {0}";
        string fullQuery = string.Format(query, item.TaskQueueId);
        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        LoadGridData();
    }

    private bool IsGridDateColumnItemReadOnly(TaskQueue testItem, string fieldName)
    {
        bool result = false;
        bool disableIfPassedOrFailedDate = true;

        @* if (fieldName == "RequestedDate")
        {
            result = true;
        }
        if (fieldName == "PassedDate")
        {
            if (testItem.FailedDate > blankDate)
                result = true;

            if (disableIfPassedOrFailedDate)
                if (testItem.PassedDate > blankDate)
                    result = true;
        }
        if (fieldName == "FailedDate")
        {
            if (testItem.PassedDate > blankDate)
                result = true;

            if (disableIfPassedOrFailedDate)
                if (testItem.FailedDate > blankDate)
                    result = true;
        } *@

        return result;
    }

    #endregion

    // ============================================================ \\
}