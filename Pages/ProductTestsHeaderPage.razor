@page "/ProductTestsHeaderPage"
@using LAGem_POPortal.Authentication
@using DevExpress.Blazor
@using LAGem_POPortal.Data
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@* @inject UserAccountService userAccountService *@

@using LAGem_POPortal.Models
@using Microsoft.EntityFrameworkCore 
@implements IDisposable

<DxGrid @ref="SOGrid"
        Data="SOGridData"
        PagerPosition="GridPagerPosition.Bottom"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25 })"
        PageSizeSelectorAllRowsItemVisible="true"
        @bind-PageIndex="@ActivePageIndex"
        FooterDisplayMode="GridFooterDisplayMode.Auto"
        PageSize="@PageSize"
        AutoCollapseDetailRow="true"
        KeyFieldName="SONumber"
        ValidationEnabled="false"
        EditMode="GridEditMode.EditRow"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
        ShowSearchBox="@ShowSearchBox"
        SearchText=""
        SearchTextParseMode="CurrentSearchTextParseMode"
        ShowGroupPanel="false"
        CustomizeElement="Grid_CustomizeElement"
        CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
        EditModelSaving="SOGrid_EditModelSaving"
        DataItemDeleting="SOGrid_DataItemDeleting"
        CustomizeEditModel="SOGrid_CustomizeEditModel"
        ColumnResizeMode="GridColumnResizeMode.NextColumn"
        TextWrapEnabled="false"
        HighlightRowOnHover="true">
    <Columns>
        <DxGridDataColumn FieldName="SONumber" Caption="SO Number" ReadOnly="true" />
        <DxGridDataColumn FieldName="StartDate" Caption="Customer Ship Date" DisplayFormat="d" />
        <DxGridDataColumn FieldName="CustomerName" Caption="Customer" ReadOnly="true" />
        <DxGridDataColumn FieldName="CountryCode" Caption="Country of Origin" ReadOnly="true" />

        <DxGridDataColumn FieldName="TotalCost" Caption="Total Cost" DisplayFormat="n3" ReadOnly="true" />
        <DxGridDataColumn FieldName="TotalPrice" Caption="Total Price" DisplayFormat="n3" ReadOnly="true" />

        <DxGridDataColumn FieldName="SODate" Caption="SO Date" DisplayFormat="d" Visible="true" />
        <DxGridDataColumn FieldName="StartDate" Caption="Start Date" DisplayFormat="d" Visible="true" />
        <DxGridDataColumn FieldName="EndDate" Caption="End Date" DisplayFormat="d" Visible="true" />

        <DxGridCommandColumn Width="150px" Visible="false"
                             EditButtonVisible="true"
                             CancelButtonVisible="true"
                             SaveButtonVisible="true"
                             NewButtonVisible="true" />
    </Columns>
    <DetailRowTemplate>
        @* <SODetailDataPage SOData="(POData)context.DataItem" /> *@
        @* <PODataPage SOData="(POData)context.DataItem" /> *@
        <ProductTestsDetailsPage SOData="(SOData)context.DataItem" />
    </DetailRowTemplate>
</DxGrid>
<div class="pager-container">
    @* <DxPager PageCount="@PageCount" @bind-ActivePageIndex="@ActivePageIndex" /> *@
    @* <div>
    Total: @TotalRecords records
    </div> *@
</div>

<style>
    .highlighted-item > td {
        background-color: rgba(245, 198, 203, 0.5);
    }
</style>

@code {
    // ============================================================ \\

    #region Variables

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    bool AutoCollapseDetailRow { get; set; }
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    IGrid SOGrid { get; set; }
    IEnumerable<SOData> SOGridData { get; set; }

    int PageSize { get; set; } = 20;
    int ActivePageIndex { get; set; } = 0;
    int PageCount { get; set; } = 0;
    int TotalRecords { get; set; } = 0;

    bool ShowSearchBox { get; set; } = true;

    Dictionary<string, GridSearchTextParseMode> SearchTextParseModes { get; } = new Dictionary<string, GridSearchTextParseMode>{
        { "Group Words By And", GridSearchTextParseMode.GroupWordsByAnd },
        { "Group Words By Or", GridSearchTextParseMode.GroupWordsByOr },
        { "Exact Match", GridSearchTextParseMode.ExactMatch }
    };
    void ChangeSearchMode(string key)
    {
        CurrentSearchTextParseModeDisplayText = key;
        CurrentSearchTextParseMode = SearchTextParseModes[key];
    }
    string CurrentSearchTextParseModeDisplayText { get; set; } = "Group Words By And";
    GridSearchTextParseMode CurrentSearchTextParseMode { get; set; } = GridSearchTextParseMode.GroupWordsByAnd;

    #endregion

    // ============================================================ \\

    #region Constructors/Page Functions

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        // var user = (await authenticationState).User;
        // if (!user.Identity.IsAuthenticated)
        // {
        //     //NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        //     //navManager.NavigateTo("/Login", true);
        //     //navManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(navManager.Uri)}");
        // }
        // else { }

        // var authstate = await authStateProvider.GetAuthenticationStateAsync();
        // var userClaimsPrincipal = authstate.User; // ClaimsPrincipal
        // var userClaimsPrincipalName = userClaimsPrincipal.Identity.Name;

        // if (userClaimsPrincipalName != null)
        // {
        //     var userData = userAccountService.GetUserAccountFromClaims(userClaimsPrincipal);

        //     if (userData != null)
        //     {
        //         if (userData.Role == "Administrator") { }
        //     }
        //     else { }
        // }

        SqlData sqlData = new SqlData();
        SOGridData = await sqlData.GetSOData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // //TotalRecords = (int)(POGrid.GetTotalSummaryValue(POGrid?.GetTotalSummaryItems().First()));
        // TotalRecords = POGridData.Count();
        // PageCount = (int)Math.Ceiling((decimal)TotalRecords / PageSize);
        // StateHasChanged();
        // //base.OnAfterRender(firstRender);

        if (firstRender)
        {
            await DataLoadedTcs.Task;
            // Waits for grid data to load
            // Grid.ExpandDetailRow(0);
        }
    }
    
    public void Dispose()
    {
        // Northwind?.Dispose();
    }

    #endregion

    // ============================================================ \\

    #region Main Grid Functions

    public void AutoCollapseDetailRow_Changed(bool newValue)
    {
        AutoCollapseDetailRow = newValue;
        if (newValue)
        {
            SOGrid.BeginUpdate();
            SOGrid.CollapseAllDetailRows();
            SOGrid.ExpandDetailRow(0);
            SOGrid.EndUpdate();
        }
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        // if (e.ElementType == GridElementType.DataRow && (System.Decimal)e.Grid.GetRowValue(e.VisibleIndex, "Total") > 1000)
        // {
        //     e.CssClass = "highlighted-item";
        // }

        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "CustomerName")
        {
            string customerName = (string)e.Grid.GetRowValue(e.VisibleIndex, "CustomerName");
            if (customerName == "MACYS")
                e.Style = "background: green";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "FactoryCancel")
        {
            e.Style = "font-weight: 800";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "PONumber")
        {
            e.Style = "font-weight: 800";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "Units")
        {
            decimal units = (decimal)e.Grid.GetRowValue(e.VisibleIndex, "Units");
            if (units > 100)
                e.Style = "color: red";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "SOQty")
        {
            decimal units = (decimal)e.Grid.GetRowValue(e.VisibleIndex, "SOQty");
            if (units > 100)
                e.Style = "color: red";
        }
    }
    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        //string[] dateList = { "SODate", "StartDate", "EndDate", "PODate", "ShipmentDate", "ShipToETA", "FactoryCancel" };
        //if (dateList.Contains(e.FieldName))
        if (e.Value.GetType() == typeof(DateTime))
        {
            // e.DisplayText = CustomerList.Where(p => p.CustomerId == ((Customer)e.Value).CustomerId).FirstOrDefault().CompanyName;
            if (DateTime.Parse(e.Value.ToString()) <= new DateTime(1900, 1, 1))
                e.DisplayText = "";
        }
    }
    void SOGrid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        // if (e.IsNew)
        // {
        //     var newPOData = (POData)e.EditModel;
        //     // newPOData.PONumber =
        //     newPOData.PODate = DateTime.Now;
        // }
        // else
        // {
        //     var newPOData = (POData)e.EditModel;
        //     newPOData.EndDate = DateTime.Now;
        // }
    }
    async Task SOGrid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editablePOData = (POData)e.EditModel;
        // if (e.IsNew)
        //     await NwindDataService.InsertEmployeeAsync(editableEmployee);
        // else
        //     await NwindDataService.UpdateEmployeeAsync((EditableEmployee)e.DataItem, editableEmployee);
        await SOUpdateDataAsync();
    }
    async Task SOGrid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var deletingPOData = (POData)e.DataItem;

        // await NwindDataService.RemoveEmployeeAsync((EditableEmployee)e.DataItem);
        await SOUpdateDataAsync();
    }
    async Task SOUpdateDataAsync()
    {
        // POGridData = await sqlData.GetPOData();
    }

    #endregion

    // ============================================================ \\
}