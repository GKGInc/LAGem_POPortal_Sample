@page "/SOTasksMaterialsPage"
@using LAGem_POPortal.Authentication
@using DevExpress.Blazor;
@using LAGem_POPortal.Data
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@* @inject UserAccountService userAccountService *@

@using LAGem_POPortal.Models
@using Microsoft.EntityFrameworkCore

<DxFormLayout CssClass="w-100">
    <DxFormLayoutItem Context="BusinessParnerSelector" ColSpanMd="12" CssClass="fl">

        <DxGrid @ref="Grid"
                Data="GridData"
                CssClass="@gridCss"
                KeyFieldName="Id"
                PagerPosition="GridPagerPosition.Bottom"
                PageSizeSelectorVisible="true"
                PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25 })"
                PageSizeSelectorAllRowsItemVisible="true"
                PageSize="@PageSize"
                @bind-PageIndex="@ActivePageIndex"
                AutoFitColumnWidths="true"
                AutoCollapseDetailRow="@AutoCollapseDetailRow"
                AutoExpandAllGroupRows="@AutoExpandAllGroupRows"
                ColumnResizeMode="@CurrentColumnResizeMode"
                EditMode="GridEditMode.EditRow"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                FooterDisplayMode="GridFooterDisplayMode.Auto"
                ShowGroupPanel="@ShowGroupPanel"
                ShowSearchBox="@ShowSearchBox"
                SearchText=""
                SearchTextParseMode="CurrentSearchTextParseMode"
                CustomizeElement="Grid_CustomizeElement"
                CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                CustomizeEditModel="Grid_CustomizeEditModel"
                HighlightRowOnHover="true"
                TextWrapEnabled="true"
                ValidationEnabled="false">
            <Columns>
                <DxGridDataColumn FieldName="Task" Caption="Task" DisplayFormat="n0" ReadOnly="true" />
                <DxGridDataColumn FieldName="TaskNote" Caption="Task Note" ReadOnly="true" />

                <DxGridCommandColumn Width="150px" Visible="true"
                                     DeleteButtonVisible="false"
                                     EditButtonVisible="true"
                                     CancelButtonVisible="true"
                                     SaveButtonVisible="true"
                                     NewButtonVisible="false" />
            </Columns>
            <ToolbarTemplate Context="GridToolbar">
                <DxToolbar Context="GridToolbar" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                    <Items>
                        <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Auto Fit Columns" Click="Grid_FitWidths" RenderStyle="ButtonRenderStyle.Secondary" />
                        <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Column Chooser" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-icon-column-chooser" Click="ColumnChooserButton_Click" />
                        <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Refresh Data" RenderStyle="ButtonRenderStyle.Secondary" Click="RefreshData_Click" />
                        <DxToolbarItem BeginGroup="true" Alignment="ToolbarItemAlignment.Left">
                            <Template Context="toolbar_item_context">
                                <div class="d-flex flex-row align-items-center h-100">
                                    <DxCheckBox Checked="usePopupEditForm" CheckedChanged="new Func<bool, Task>(UsePopupEditForm_CheckedChanged)">Use Popup Edit Form</DxCheckBox>
                                </div>
                            </Template>
                        </DxToolbarItem>
                    </Items>
                </DxToolbar>
            </ToolbarTemplate>
            @* <DetailRowTemplate>
            <CustomerSoPoDetailPage SODetailData="(CustomerSoPoData)context.DataItem" />
            </DetailRowTemplate> *@
        </DxGrid>

    </DxFormLayoutItem>

</DxFormLayout>

<style>
    .highlighted-item > td {
        background-color: rgba(245, 198, 203, 0.5);
    }

    .dx-datagrid-headers {
        white-space: normal;
    }

    .dx-datagrid-nowrap.dx-datagrid-headers .dx-header-row > td > .dx-datagrid-text-content {
        white-space: normal;
    }

    .hide-toolbar .dxbl-grid-toolbar-container {
        display: none;
    }

    .my-partnertasks-grid .dxbl-fl-ctrl dxbl-fl-ctrl-nc {
        margin-top: 0px;
    }

    .fl > div {
        margin-top: 0 !important;
    }
</style>

@code {
    // ============================================================ \\

    #region Variables

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    [Parameter]
    public SODetailMaterial SODetailMaterial { get; set; }

    IGrid Grid { get; set; }
    IEnumerable<SODetailMaterial> GridData { get; set; }

    Dictionary<string, GridSearchTextParseMode> SearchTextParseModes { get; } = new Dictionary<string, GridSearchTextParseMode>{
        { "Group Words By And", GridSearchTextParseMode.GroupWordsByAnd },
        { "Group Words By Or", GridSearchTextParseMode.GroupWordsByOr },
        { "Exact Match", GridSearchTextParseMode.ExactMatch }
    };
    void ChangeSearchMode(string key)
    {
        CurrentSearchTextParseModeDisplayText = key;
        CurrentSearchTextParseMode = SearchTextParseModes[key];
    }
    string CurrentSearchTextParseModeDisplayText { get; set; } = "Group Words By And";
    GridSearchTextParseMode CurrentSearchTextParseMode { get; set; } = GridSearchTextParseMode.GroupWordsByAnd;

    GridColumnResizeMode CurrentColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer; // GridColumnResizeMode.NextColumn;
    string CurrentColumnResizeModeDisplayText { get; set; } = "Next Column";
    Dictionary<string, GridColumnResizeMode> GridColumnResizeModes { get; } = new Dictionary<string,
    GridColumnResizeMode>{
        { "Disabled", GridColumnResizeMode.Disabled },                  //A user cannot resize columns.
        { "Next Column", GridColumnResizeMode.NextColumn },             //When a user resizes a column, the width of the column to the right changes, but the Grid's total width does not change.
        { "Columns Container", GridColumnResizeMode.ColumnsContainer }  //When a user resizes a column, all other columns retain width settings, but the width of the entire column container changes proportionally.
    };
    void ChangeResizeMode(string key)
    {
        CurrentColumnResizeModeDisplayText = key;
        CurrentColumnResizeMode = GridColumnResizeModes[key];
    }
    bool usePopupEditForm { get; set; } = true;
    GridEditMode CurrentEditMode { get { return usePopupEditForm ? GridEditMode.PopupEditForm : GridEditMode.EditForm; } } // GridEditMode.EditRow

    IReadOnlyList<object> SelectedDataItems { get; set; }
    IEnumerable<GridSelectAllCheckboxMode> SelectAllCheckboxModes { get; } = Enum.GetValues<GridSelectAllCheckboxMode>();
    GridSelectAllCheckboxMode CurrentSelectAllCheckboxMode { get; set; }

    Dictionary<string, string[]> GroupInfo { get; } = new Dictionary<string, string[]> {
        { "SOLineNo", new string[] { "SOLineNo" } }
    };
    string CurrentGroupInfoKey { get; set; } = "SOLineNo";
    bool ShowGroupPanel { get; set; } = true;
    bool ShowSearchBox { get; set; } = true;

    bool AutoCollapseDetailRow { get; set; } = true;
    bool AutoExpandAllGroupRows { get; set; } = true;
    bool TextWrapEnabled = true;
    bool WordWrapEnabled = false;

    int PageCount { get; set; } = 0;
    int TotalRecords { get; set; } = 0;
    int PageSize { get; set; } = 20;
    int ActivePageIndex { get; set; } = 0;

    bool AutoFitColWidths { get; set; } = true;
    //bool IsAutoFitPending { get; set; } = true;
    bool isMainGridAutoFitPending { get; set; } = true;
    bool isTasksGridAutoFitPending { get; set; } = true;
    bool editOnInsert { get; set; } = false;
    bool showToolbar { get; set; } = false;
    string gridCss => !showToolbar ? "hide-toolbar my-partnertasks-grid" : "my-partnertasks-grid";

    int soHeaderId { get; set; } = 0;
    int businessPartnerId_Customer { get; set; } = 0;

    #endregion

    // ============================================================ \\

    #region Constructors/Page Functions

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        isMainGridAutoFitPending = true;
        isTasksGridAutoFitPending = true;

        SqlData sqlData = new SqlData();
        GridData = await sqlData.GetSODetailMaterialDataExt(SODetailMaterial.MaterialId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task; // Waits for grid data to load
                                      // Grid.ExpandDetailRow(0);
        }

        if (Grid != null && isMainGridAutoFitPending)
        {
            isMainGridAutoFitPending = false;
            await Grid.WaitForDataLoadAsync();
            Grid.AutoFitColumnWidths();
        }
    }

    public void Dispose()
    {
        // Northwind?.Dispose();
    }

    #endregion

    // ============================================================ \\

    #region Load/Refresh Functions

    void Grid_FitWidths()
    {
        //StateHasChanged();
        Grid.AutoFitColumnWidths();
    }

    void ColumnChooserButton_Click()
    {
        Grid.ShowColumnChooser();
    }

    async void RefreshData_Click() { }
    
    async Task UsePopupEditForm_CheckedChanged(bool value)
    {
        usePopupEditForm = value;
        await Grid.CancelEditAsync();
    }

    #endregion

    // ============================================================ \\

    #region Main Grid Functions

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        // // if (e.ElementType == GridElementType.DataRow && (System.Decimal)e.Grid.GetRowValue(e.VisibleIndex, "Total") > 1000)
        // // {
        // //     e.CssClass = "highlighted-item";
        // // }
        // if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "FactoryCancel")
        // {
        //     e.Style = "font-weight: 800";
        // }
        // if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "PONumber")
        // {
        //     e.Style = "font-weight: 800";
        // }
        // if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "Units")
        // {
        //     decimal units = (decimal)e.Grid.GetRowValue(e.VisibleIndex, "Units");
        //     if (units > 100)
        //         e.Style = "color: red";
        // }
    }
    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        // string[] dateList = new string[] { "SODate", "StartDate", "EndDate", "ShipmentDate", "ShipToETA" };
        // if (dateList.Contains(e.FieldName))            
        if (e.Value.GetType() == typeof(DateTime))
        {
            if (DateTime.Parse(e.Value.ToString()) <= new DateTime(1900, 1, 1))
                e.DisplayText = "";
        }
    }
    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            if (e.EditModel.GetType() == typeof(CustomerSoPoData))
            {
                var newObject = (CustomerSoPoData)e.EditModel;;

            }
        }
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (e.EditModel.GetType() == typeof(CustomerSoPoData))
        {
            var editableObject = (CustomerSoPoData)e.EditModel;

            // if (e.IsNew)
            //...
        }

        await UpdateDataAsync();
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem.GetType() == typeof(CustomerSoPoData))
        {
            var deletingObject = (CustomerSoPoData)e.DataItem;

        }

        // await NwindDataService.RemoveEmployeeAsync((EditableEmployee)e.DataItem);
        await UpdateDataAsync();
    }
    async Task UpdateDataAsync()
    {
        // DataSource = await NwindDataService.GetEmployeesEditableAsync();
    }

    public void AddToBusinessPartnerGridData(BusinessPartnerTask task)
    {
        @* if (businessPartnerIdSelected > 0 && !task.isUsed)
        {
            if (editOnInsert)
            {
                //addTask = task;
                //task.isUsed = true;
                Grid.StartEditNewRowAsync();
            }
            else
            {
                // Note: WIll NOT set model to "new"
                var newObject = new BusinessPartnerTask();
                newObject.BusinessPartnerTaskId = (GridData.Count() == 0) ? 1 : GridData.Where(x => x.BusinessPartnerTaskId > 0).Select(x => x.BusinessPartnerTaskId).Max() + 1;
                newObject.BusinessPartnerId = businessPartnerIdSelected; // SelectedPartner (Lookup)
                newObject.TaskId = task.TaskId;
                newObject.TaskName = task.TaskName;
                newObject.TaskDescription = task.TaskDescription;
                newObject.TaskType = task.TaskType;
                newObject.CreatedOn = blankDate;
                newObject.LegacySystemId = 0; //addTask.LegacySystemId;

                //GridData.Append(newObject);
                GridData = GridData.Concat(new[] { newObject });

                //InsertBusinessPartnerTaskDataAsync(newObject);
                //Grid.SaveChangesAsync(); // Doesn't trigger anything

                InsertBusinessPartnerTaskDataAsync(newObject);
            }
        }
        else
        {

        } *@
    }

    #endregion

    // ============================================================ \\
}