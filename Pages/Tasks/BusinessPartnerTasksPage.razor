@page "/BusinessPartnerTasksPage"
@using DevExpress.Blazor
@using DevExpress.Data.Filtering;
@using DevExpress.Xpo
@using LAGem_POPortal.Authentication
@using LAGem_POPortal.Data
@using LAGem_POPortal.Models
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject UserAccountService userAccountService

@implements IDisposable

<AuthorizeView>
    <Authorized Context="Authorized">
        @* <div hidden="!@HiddenGrid">
            <a href="/login">@HeaderMessage</a>
        </div> *@

        @* <div hidden="@HiddenGrid"> *@

        <div>
            @* <DxGrid CssClass="my-empty-grid">
                <ToolbarTemplate Context="GridToolbar">
                    <DxToolbar Context="GridToolbar" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                        <Items>
                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Auto Fit Columns" RenderStyle="ButtonRenderStyle.Secondary" Click="Grid_FitWidths"  />
                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Column Chooser" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-icon-column-chooser" Click="ColumnChooserButton_Click" />
                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Refresh Data" RenderStyle="ButtonRenderStyle.Secondary" Click="RefreshData_Click" />
                            <DxToolbarItem BeginGroup="true" Alignment="ToolbarItemAlignment.Left">
                                <Template Context="toolbar_item_context">
                                    <div class="d-flex flex-row align-items-center h-100">
                                        <DxCheckBox Checked="usePopupEditForm" CheckedChanged="new Func<bool, Task>(UsePopupEditForm_CheckedChanged)">Use Popup Edit Form</DxCheckBox>
                                    </div>
                                </Template>
                            </DxToolbarItem>
                        </Items>
                    </DxToolbar>
                </ToolbarTemplate>
            </DxGrid>
            <DxComboBox Data="@partnerList"
                        NullText="Select Business Parner..."
                        FilteringMode="DataGridFilteringMode.Contains"
                        TextFieldName="LookupText"
                        ValueFieldName="LookupValue"
                        ValueChanged="(int newCellValue) => {
                                        businessPartnerIdSelected = newCellValue;
                                        LoadGridData(newCellValue);
                                    }">
            </DxComboBox> *@

            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem Context="BusinessParnerSelector" ColSpanMd="7" CssClass="fl">

                    <DxFormLayout CssClass="w-100">
                        <DxFormLayoutItem Caption="Business Partners:" ColSpanMd="10">
                            <DxComboBox Data="@partnerList"
                                        NullText="Select Business Parner..."
                                        FilteringMode="DataGridFilteringMode.Contains"
                                        TextFieldName="LookupText"
                                        ValueFieldName="LookupValue"
                                        ValueChanged="(int newCellValue) => {
                                        businessPartnerIdSelected = newCellValue;
                                        LoadTasksGridData();
                                        LoadGridData(newCellValue);
                                    }">
                            </DxComboBox>
                        </DxFormLayoutItem>
                        
                        <DxFormLayoutItem ColSpanMd="2">
                            <DxButton RenderStyle="ButtonRenderStyle.Secondary"
                                      RenderStyleMode="ButtonRenderStyleMode.Outline"
                                      Text="Load Partner Data"
                                      IconCssClass="btn-icon-search" Visible="@showLoadPartnerDataButton"
                                      Click="@(() => {
                                        LoadTasksGridData();
                                        LoadGridData(@businessPartnerIdSelected);
                                    })" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Context="BusinessParnerTasks" ColSpanMd="12">

                            <DxGrid @ref="Grid"
                                    Data="GridData"
                                    CssClass="@gridCss"
                                    PopupEditFormCssClass="my-popup-style"
                                    KeyFieldName="BusinessPartnerTaskId"
                                    PagerPosition="GridPagerPosition.Top"
                                    PageSizeSelectorVisible="true"
                                    PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25, 30 })"
                                    PageSizeSelectorAllRowsItemVisible="true"
                                    PageSize="@PageSize"
                                    @bind-PageIndex="@ActivePageIndex"
                                    AutoFitColumnWidths="true"
                                    AutoCollapseDetailRow="true"
                                    ColumnResizeMode="@CurrentColumnResizeMode"
                                    EditMode="@CurrentEditMode"
                                    PopupEditFormHeaderText="@mainGridEditFormHeaderText"
                                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                                    FooterDisplayMode="GridFooterDisplayMode.Auto"
                                    TextWrapEnabled="@TextWrapEnabled"
                                    WordWrapEnabled="@WordWrapEnabled"
                                    ShowGroupPanel="@ShowGroupPanel"
                                    ShowSearchBox="@ShowSearchBox"
                                    SearchText=""
                                    SearchTextParseMode="CurrentSearchTextParseMode"
                                    CustomizeElement="Grid_CustomizeElement"
                                    CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                                    CustomizeEditModel="Grid_CustomizeEditModel"
                                    EditModelSaving="Grid_EditModelSaving" 
                                    DataItemDeleting="Grid_DataItemDeleting"
                                    EditCanceling="Grid_EditCanceling"
                                    HighlightRowOnHover="true"
                                    ValidationEnabled="false">
                                <Columns>
                                    
                                    <DxGridCommandColumn MinWidth="140" Width="200" Visible="true"
                                                         SaveButtonVisible="true"
                                                         DeleteButtonVisible="true"
                                                         EditButtonVisible="true"
                                                         CancelButtonVisible="true"
                                                         NewButtonVisible="false"/>

                                    <DxGridDataColumn FieldName="TaskName" Caption="Task Name" ReadOnly="false" Width="100" MinWidth="160" FixedPosition="GridColumnFixedPosition.Left" />
                                    <DxGridDataColumn FieldName="TaskDescription" Caption="Task Description" ReadOnly="false" MinWidth="100" />
                                    <DxGridDataColumn FieldName="TaskType" Caption="Task Type" ReadOnly="false" Width="100" MinWidth="100" />

                                    <DxGridDataColumn FieldName="TaskSequence" Caption="Task Sequence" ReadOnly="false" Width="60" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" />
                                    <DxGridDataColumn FieldName="Required" Caption="Required" ReadOnly="false" Width="60" />
                                    <DxGridDataColumn FieldName="Qty" Caption="Qty" ReadOnly="false" MinWidth="100" />
                                    <DxGridDataColumn FieldName="AssignedTo" Caption="AssignedTo" ReadOnly="false" MinWidth="100" />

                                </Columns>
                                <EditFormTemplate Context="EditFormContext">
                                    @{
                                        var task = (BusinessPartnerTask)EditFormContext.EditModel; // previously -> supplier
                                    }
                                    <DxFormLayout CssClass="w-100">
                                        <DxFormLayoutItem Caption="Task Name:" ColSpanMd="6">
                                            @EditFormContext.GetEditor("TaskName")
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem Caption="Task Name:" ColSpanMd="6">
                                            @EditFormContext.GetEditor("TaskType")
                                        </DxFormLayoutItem>
                                        @* <DxFormLayoutItem Caption="Task Types:" ColSpanMd="6">
                                            <DxComboBox Data="@taskTypeLookupList"
                                                        NullText="Select Task Type..."
                                                        FilteringMode="DataGridFilteringMode.Contains"
                                                        TextFieldName="LookupText"
                                                        ValueFieldName="LookupText"
                                                        Value="@task.TaskType"
                                                        ValueChanged="(string newCellValue) => { task.TaskType = newCellValue; }">
                                            </DxComboBox>
                                        </DxFormLayoutItem> *@
                                        <DxFormLayoutItem Caption="Task Description:" ColSpanMd="12">
                                            @EditFormContext.GetEditor("TaskDescription")
                                        </DxFormLayoutItem>

                                        <DxFormLayoutItem Caption="Task Qty:" ColSpanMd="4">
                                            @EditFormContext.GetEditor("Qty")
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem Caption="Assigned To:" ColSpanMd="8" Visible="!useAssignedToDropdownList">
                                            @EditFormContext.GetEditor("AssignedTo")
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem Caption="Assigned To:" ColSpanMd="8" Visible="useAssignedToDropdownList">
                                            <DxComboBox Data="@assignedToListData"
                                                        NullText="Select..."
                                                        Value="@task.AssignedTo"
                                                        ValueChanged="(string newCellValue) => {
                                                    //shipping.VendorId = newCellValue;
                                                    //shipping.VendorName = POOpenVendorData.Where(c => c.VendorId == newCellValue).FirstOrDefault()?.VendorName;
                                                    //shipping.POHeaderId = 0;
                                            task.AssignedTo = newCellValue;
                                        }">
                                            </DxComboBox>
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem Caption="Task Sequence:" ColSpanMd="4">
                                            @EditFormContext.GetEditor("TaskSequence")
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem Caption="Task Required:" ColSpanMd="4">
                                            @EditFormContext.GetEditor("Required")
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem ColSpanMd="4" Visible="displayUseDropdownListToggle">
                                            <DxCheckBox Checked="useAssignedToDropdownList" CheckedChanged="new Func<bool, Task>(UseAssignedToDropdownList_CheckedChanged)">Use Dropdown List</DxCheckBox>
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem ColSpanMd="4" Visible="!displayUseDropdownListToggle">
                                        </DxFormLayoutItem>

                                    </DxFormLayout>
                                </EditFormTemplate>
                                <ToolbarTemplate Context="GridToolbar">
                                    <DxToolbar Context="GridToolbar" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                        <Items>
                                            @* <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Save Data" RenderStyle="ButtonRenderStyle.Secondary" Click="Grid_SaveData_Click" /> *@
                                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Auto Fit Columns" RenderStyle="ButtonRenderStyle.Secondary" Click="Grid_FitWidths_Click" />
                                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Column Chooser" RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="grid-icon-column-chooser" Click="Grid_ColumnChooserButton_Click" />
                                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Refresh Data" RenderStyle="ButtonRenderStyle.Secondary" Click="Grid_RefreshData_Click" />
                                            @* <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Text="Cancel Edit" RenderStyle="ButtonRenderStyle.Secondary" Click="Grid_CancelEdit_Click" /> *@
                                            <DxToolbarItem BeginGroup="true" Alignment="ToolbarItemAlignment.Left">
                                                <Template Context="toolbar_item_context">
                                                    <div class="d-flex flex-row align-items-center h-100">
                                                        <DxCheckBox Checked="usePopupEditForm" CheckedChanged="new Func<bool, Task>(UsePopupEditForm_CheckedChanged)">Use Popup Edit Form</DxCheckBox>
                                                    </div>
                                                </Template>
                                            </DxToolbarItem>
                                        </Items>
                                    </DxToolbar>
                                </ToolbarTemplate>
                                @* <DetailRowTemplate Context="DetailRow">
                                <PODataPage SODetailData="(ShippingData)DetailRow.DataItem" />
                                </DetailRowTemplate> *@
                            </DxGrid>

                        </DxFormLayoutItem>
                    </DxFormLayout>

                </DxFormLayoutItem>

                <DxFormLayoutItem Context="TasksList" ColSpanMd="5" CssClass="fl">

                    <DxGrid @ref="TasksGrid"
                            Data="TasksGridData"
                            KeyFieldName="TaskId"
                            PagerPosition="GridPagerPosition.Bottom"
                            PageSizeSelectorVisible="false"
                            PageSizeSelectorItems="@(new int[] { 5, 10, 15, 20, 25, 30 })"
                            PageSizeSelectorAllRowsItemVisible="true"
                            PageSize="@PageSize"
                            @bind-PageIndex="@ActivePageIndex"
                            AutoFitColumnWidths="true"
                            AutoCollapseDetailRow="true"
                            ColumnResizeMode="@CurrentColumnResizeMode"
                            EditMode="@CurrentEditMode"
                            PopupEditFormCssClass="my-popup-style"
                            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                            FooterDisplayMode="GridFooterDisplayMode.Auto"
                            TextWrapEnabled="@TextWrapEnabled"
                            ValidationEnabled="false"
                            WordWrapEnabled="@WordWrapEnabled"
                            HighlightRowOnHover="true"
                            ShowAllRows="true"
                            ShowFilterRow="false"
                            ShowGroupPanel="false"
                            ShowSearchBox="false"
                            SearchText=""
                            SearchTextParseMode="CurrentSearchTextParseMode"
                            Visible="false"
                            CustomizeElement="Grid_CustomizeElement"
                            CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                            CustomizeEditModel="Grid_CustomizeEditModel"
                            EditModelSaving="Grid_EditModelSaving"
                            DataItemDeleting="Grid_DataItemDeleting">
                        <Columns>
                            @* <DxGridCommandColumn Width="150px" Visible="false"
                                                 DeleteButtonVisible="false"
                                                 EditButtonVisible="false"
                                                 CancelButtonVisible="true"
                                                 SaveButtonVisible="true"
                                                 NewButtonVisible="true" 
                                                 FixedPosition="GridColumnFixedPosition.Right" /> *@

                            <DxGridCommandColumn Context="AddTaskContext" Width="45px">
                                <HeaderTemplate>
                                    <DxButton IconCssClass="grid-icon grid-icon-new" RenderStyle="ButtonRenderStyle.Link" aria-label="Add"/>
                                </HeaderTemplate>
                                <CellDisplayTemplate>
                                    <div class="grid-cell-align-center">
                                        <DxButton IconCssClass="grid-icon grid-icon-add"
                                                  RenderStyle="ButtonRenderStyle.Link" aria-label="Add"
                                                  Click="@(() => AddToBusinessPartnerGridData((TasksExt)AddTaskContext.DataItem))" />
                                    </div>
                                </CellDisplayTemplate>
                                @* <HeaderTemplate>
                                    @{
                                        //var task = (Tasks)AddTaskContext.EditModel;
                                        //var i = AddTaskContext.Grid.;
                                    }
                                    <DxButton IconCssClass="grid-icon grid-icon-new" RenderStyle="ButtonRenderStyle.Link" aria-label="Add"
                                    Click="@(() => Grid.StartEditNewRowAsync())" />
                                </HeaderTemplate> *@
                                @* <CellDisplayTemplate>
                                    <div class="grid-cell-align-center">
                                         <DxButton IconCssClass="grid-icon grid-icon-delete"
                                            RenderStyle="ButtonRenderStyle.Link" aria-label="Delete"
                                            Click="@(() => Grid.ShowRowDeleteConfirmation(context.VisibleIndex))"/>
                                    </div>
                                </CellDisplayTemplate> *@
                                @* <CellEditTemplate>
                                    <div class="grid-cell-align-center">
                                        <DxButton Enabled="false" CssClass="grid-disabled-button" IconCssClass="grid-icon grid-icon-delete" aria-label="Delete" RenderStyle="ButtonRenderStyle.Link"/>
                                    </div>
                                </CellEditTemplate> *@
                            </DxGridCommandColumn> 

                            <DxGridDataColumn FieldName="TaskName" Caption="Task Name" ReadOnly="false" Width="100" MinWidth="120" />
                            <DxGridDataColumn FieldName="TaskDescription" Caption="Task Description" ReadOnly="false" MinWidth="100" />
                            <DxGridDataColumn FieldName="TaskType" Caption="Task Type" ReadOnly="false" Width="100" MinWidth="100" />

                            <DxGridDataColumn FieldName="Qty" Caption="Qty" ReadOnly="false" MinWidth="100" />
                            <DxGridDataColumn FieldName="TaskSequence" Caption="Task Sequence" ReadOnly="false" Width="60" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" />
                            <DxGridDataColumn FieldName="Required" Caption="Required" ReadOnly="false" Width="60" />
                            <DxGridDataColumn FieldName="AssignedTo" Caption="AssignedTo" ReadOnly="false" MinWidth="100" />
                        </Columns>
                    </DxGrid>

                </DxFormLayoutItem>
                @* <DxFormLayoutItem Caption="Template Row Data:" ColSpanMd="12">                   
                </DxFormLayoutItem> *@
            </DxFormLayout>

            <div class="pager-container">
                @* <DxPager PageCount="@PageCount" @bind-ActivePageIndex="@ActivePageIndex" /> *@
                @* <div>
                Total: @TotalRecords records
                </div> *@
            </div>
        </div>

    </Authorized>
    <NotAuthorized Context="NotAuthorized">
        @*  @{ navManager.NavigateTo("/Login");} *@
        <h3>Please <a href="/login">Login</a> to access the Portal</h3>
        @* <LoginPage /> *@
        @* <LoginRedirect /> *@
    </NotAuthorized>
</AuthorizeView>

<style>
    .highlighted-item > td {
        background-color: rgba(245, 198, 203, 0.5);
    }

    .dx-datagrid-headers {
        white-space: normal;
    }

    .dx-datagrid-nowrap.dx-datagrid-headers .dx-header-row > td > .dx-datagrid-text-content {
        white-space: normal;
    }

    .hide-toolbar .dxbl-grid-toolbar-container {
        display: none;
    }

    .my-popup-style {
        min-width: 1200px;
        min-height: 450px;
    }

    .my-empty-grid .dxbs-grid-empty-data {
        opacity: 0;
    }

    .my-empty-grid .dxbl-grid-empty-data-area {
        padding: 0px;
        height: 0px;
        display: none;
    }

    .my-partnertasks-grid .dxbl-fl-ctrl dxbl-fl-ctrl-nc {
        margin-top: 0px;
    }

    .fl > div {
        margin-top: 0 !important;
    }

</style>
@* <script>
    var _input;
    window.AssignGotFocus = function () {
        _input = document.getElementsByClassName("focus-text-box")[0];
        _input.select();
        _input.addEventListener("focus", function (event) {
            setTimeout(function () { _input.select(); }, 0);
        });
    }
</script> *@

@code {
    // ============================================================ \\

    #region Variables

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [CascadingParameter] 
    protected Task<AuthenticationState> AuthStat { get; set; }

    bool AutoCollapseDetailRow { get; set; }
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    IGrid Grid { get; set; }
    IGrid TasksGrid { get; set; }

    IEnumerable<BusinessPartnerTask> GridData { get; set; }
    IEnumerable<TasksExt> TasksGridData { get; set; }

    IEnumerable<BusinessPartner> BusinessPartnerListData { get; set; }
    List<Lookup> taskTypeLookupList { get; set; }
    List<Lookup> partnerList { get; set; }

    Dictionary<string, GridSearchTextParseMode> SearchTextParseModes { get; } = new Dictionary<string, GridSearchTextParseMode>{
        { "Group Words By And", GridSearchTextParseMode.GroupWordsByAnd },
        { "Group Words By Or", GridSearchTextParseMode.GroupWordsByOr },
        { "Exact Match", GridSearchTextParseMode.ExactMatch }
    };
    void ChangeSearchMode(string key)
    {
        CurrentSearchTextParseModeDisplayText = key;
        CurrentSearchTextParseMode = SearchTextParseModes[key];
    }
    string CurrentSearchTextParseModeDisplayText { get; set; } = "Group Words By And";
    GridSearchTextParseMode CurrentSearchTextParseMode { get; set; } = GridSearchTextParseMode.GroupWordsByAnd;

    GridColumnResizeMode CurrentColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer; // GridColumnResizeMode.NextColumn;
    string CurrentColumnResizeModeDisplayText { get; set; } = "Next Column";
    Dictionary<string, GridColumnResizeMode> GridColumnResizeModes { get; } = new Dictionary<string,
    GridColumnResizeMode>{
        { "Disabled", GridColumnResizeMode.Disabled },                  //A user cannot resize columns.
        { "Next Column", GridColumnResizeMode.NextColumn },             //When a user resizes a column, the width of the column to the right changes, but the Grid's total width does not change.
        { "Columns Container", GridColumnResizeMode.ColumnsContainer }  //When a user resizes a column, all other columns retain width settings, but the width of the entire column container changes proportionally.
    }; 
    void ChangeResizeMode(string key)
    {
        CurrentColumnResizeModeDisplayText = key;
        CurrentColumnResizeMode = GridColumnResizeModes[key];
    }

    bool usePopupEditForm { get; set; } = true;
    GridEditMode CurrentEditMode { get { return usePopupEditForm ? GridEditMode.PopupEditForm : GridEditMode.EditForm; } } // GridEditMode.EditRow
    string mainGridEditFormHeaderText{ get; set; } = "Task Edit";

    IReadOnlyList<object> SelectedDataItems { get; set; }
    IEnumerable<GridSelectAllCheckboxMode> SelectAllCheckboxModes { get; } = Enum.GetValues<GridSelectAllCheckboxMode>();
    GridSelectAllCheckboxMode CurrentSelectAllCheckboxMode { get; set; }

    bool TextWrapEnabled = true;
    bool WordWrapEnabled = false;
    bool ShowGroupPanel { get; set; } = false;
    bool ShowSearchBox { get; set; } = false;

    int PageCount { get; set; } = 0;
    int TotalRecords { get; set; } = 0;
    int PageSize { get; set; } = 20;
    int ActivePageIndex { get; set; } = 0;

    string headerMessage { get; set; } = "Loading Data...";
    bool hiddenGrid { get; set; } = true;
    bool isMainGridAutoFitPending { get; set; } = true;
    bool isTasksGridAutoFitPending { get; set; } = true;
    string FocusedColumn { get; set; } = "OrderQty";

    int businessPartnerIdSelected { get; set; } = 0;
    CriteriaOperator businessPartnerTaskGridFilterCriteria { get; set; }
    Tasks? addTask { get; set; }
    DateTime blankDate { get; set; } = new DateTime(1800, 1, 1);

    bool autoFitColWidths { get; set; } = true;
    bool selectCheckboxToEdit { get; set; } = false;
    bool filteringMainData { get; set; } = true; 
    bool showLoadPartnerDataButton { get; set; } = false;
    bool preloadTasksList { get; set; } = true;
    bool editOnInsert { get; set; } = false;
    bool showToolbar { get; set; } = false;
    string gridCss => !showToolbar ? "hide-toolbar my-partnertasks-grid" : "my-partnertasks-grid";

    bool useAssignedToDropdownList { get; set; } = true;
    List<string> assignedToListData { get; set; } = new List<string>();        
    bool displayUseDropdownListToggle { get; set; } = true;

    #endregion

    // ============================================================ \\

    #region Constructors/Page Functions

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        SqlData sqlData = new SqlData();
        if (preloadTasksList)
        {
            List<Tasks> baseTasksList = await sqlData.GetTasksList();
            List<TasksExt> newTasksList = new List<TasksExt>();
            foreach (Tasks task in baseTasksList)
            {
                newTasksList.Add(new TasksExt(task));
            }
            TasksGridData = newTasksList;
        }
        else
        {
            if (businessPartnerIdSelected > 0)
            {
                LoadTasksGridData();
            }
        }

        if (filteringMainData){
            GridData = await sqlData.GetAllBusinessPartnerTaskList();

            var criteria = new InOperator("BusinessPartnerId", new int[] { 0 });
            businessPartnerTaskGridFilterCriteria = criteria;
            if (Grid != null && GridData != null)
                Grid.SetFilterCriteria(businessPartnerTaskGridFilterCriteria);
        }
        else
            GridData = await sqlData.GetBusinessPartnerTaskList(0);

        BusinessPartnerListData = await sqlData.GetCustomerBusinessPartnerList();
        partnerList = GetPartnerData();
        taskTypeLookupList = await sqlData.GetLookupList("TASK TYPE");
        
        assignedToListData = new List<string>() { "Me","Myself","I"};

        isMainGridAutoFitPending = true;
        isTasksGridAutoFitPending = true;

        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            @* NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}"); *@
            //navManager.NavigateTo("/Login", true);
            hiddenGrid = true;
        }
        else
        {
            hiddenGrid = false;
            headerMessage = "";
        }

        var authstate = await authStateProvider.GetAuthenticationStateAsync();
        var userClaimsPrincipal = authstate.User; // ClaimsPrincipal
        var userClaimsPrincipalName = userClaimsPrincipal.Identity.Name;

        if (userClaimsPrincipalName != null)
        {
            var userData = userAccountService.GetUserAccountFromClaims(userClaimsPrincipal);

            if (userData != null)
            {
                if (userData.Role == "Administrator")
                {
                    //workingMode = WorkingMode.Designer;
                    //showWorkingModeToggleButton = true;
                }

                //headers = new Dictionary<string, string>() {
                //    { "Oid", userData.Oid.ToString() },
                //    { "User", userData.UserName },
                //    { "PromoCode", userData.PromoCode }
                //};
            }
            else
            {

            }
        }
        else
        {
            //navManager.NavigateTo("/Login", true);

            userClaimsPrincipal = authenticationState.Result.User;
            var userData = userAccountService.GetUserAccountFromClaims(userClaimsPrincipal);

            if (userData != null)
            {
                if (userData.Role == "Administrator")
                {
                    //workingMode = WorkingMode.Designer;
                    //showWorkingModeToggleButton = true;
                }

                //headers = new Dictionary<string, string>() {
                //    { "Oid", userData.Oid.ToString() },
                //    { "User", userData.UserName },
                //    { "PromoCode", userData.PromoCode }
                //};
            }
            else
            {

            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task; // Waits for grid data to load
                                      // Grid.ExpandDetailRow(0);
        }
        @* CurrentColumnResizeMode = GridColumnResizeMode.ColumnsContainer;
        Grid.AutoFitColumnWidths(); *@

        //https://supportcenter.devexpress.com/ticket/details/t1207460/dxgrid-autofitcolumnwidths-true-does-not-set-widths-as-i-expected

        if (Grid != null && isMainGridAutoFitPending)
        {
            isMainGridAutoFitPending = false;
            await Grid.WaitForDataLoadAsync();
            Grid.AutoFitColumnWidths();
        }
        if (TasksGrid != null && isTasksGridAutoFitPending)
        {
            isTasksGridAutoFitPending = false;
            await TasksGrid.WaitForDataLoadAsync();
            TasksGrid.AutoFitColumnWidths();
        }
    }

    public void Dispose()
    {
        headerMessage = "";
        hiddenGrid = true;
        // Northwind?.Dispose();
    }

    #endregion

    // ============================================================ \\

    #region Load/Refresh Functions

    public void AutoCollapseDetailRow_Changed(bool newValue)
    {
        AutoCollapseDetailRow = newValue;
        if (newValue)
        {
            Grid.BeginUpdate();
            Grid.CollapseAllDetailRows();
            Grid.ExpandDetailRow(0);
            Grid.EndUpdate();
        }
    }

    public List<Lookup> GetPartnerData()
    {
        List<Lookup> list = new List<Lookup>();

        //var sublist = OpenPOShipmentData.Where(x => x.VendorId == vendorId).Select(x => x.PONumber).Distinct().ToList();
        foreach (BusinessPartner item in BusinessPartnerListData.AsEnumerable())
        {
            Lookup l = new Lookup()
                {
                    LookupText = item.BusinessPartnerName,
                    LookupValue = item.BusinessPartnerId
                };
            list.Add(l);
        }
        return list;
    }

    async void LoadGridData(int businessPartnerId, bool reloadDatafromDB = false)
    {
        if (filteringMainData)
        {
            if (reloadDatafromDB)
            {
                SqlData sqlData = new SqlData();
                GridData = await sqlData.GetAllBusinessPartnerTaskList();
            }
            var criteria = new InOperator("BusinessPartnerId", new int[] { businessPartnerId });
            businessPartnerTaskGridFilterCriteria = criteria;
            if (Grid != null && GridData != null)
                Grid.SetFilterCriteria(businessPartnerTaskGridFilterCriteria);
            SyncBusinessPartnerTasks();
        }
        else
        {
            SqlData sqlData = new SqlData();
            GridData = await sqlData.GetBusinessPartnerTaskList(businessPartnerId);
            Grid.Reload();
            SyncBusinessPartnerTasks();

            //Grid_RefreshData_Click();
        }
    }

    async void LoadTasksGridData()
    {
        if (!preloadTasksList)
        {
            if (TasksGridData == null || TasksGridData.Count() == 0)
            {
                SqlData sqlData = new SqlData();
                List<Tasks> baseTasksList = await sqlData.GetTasksList();
                List<TasksExt> newTasksList = new List<TasksExt>();

                foreach (Tasks task in baseTasksList)
                {
                    newTasksList.Add(new TasksExt(task));
                }

                TasksGridData = newTasksList;
                //TasksGridData.Append(newTasksList);
                //TasksGridData = TasksGridData.Concat(new[] { newTasksList });

                TasksGrid.Reload();
            }
        }
    }

    void SyncBusinessPartnerTasks()
    {
        if (filteringMainData)
        {
            foreach (TasksExt task in TasksGridData)
            {
                task.isUsed = (GridData.Where(x => x.BusinessPartnerId == businessPartnerIdSelected && x.TaskId == task.TaskId).Count() > 0) ? true : false;
            }
        }
        else
        {
            foreach (TasksExt task in TasksGridData)
            {
                task.isUsed = (GridData.Where(x => x.TaskId == task.TaskId).Count() > 0) ? true : false;
            }
        }

        TasksGrid.Reload();
    }

    #endregion

    // ============================================================ \\

    #region Button Functions

    void Grid_FitWidths_Click()
    {
        Grid.AutoFitColumnWidths();
    }
    
    void Grid_ColumnChooserButton_Click()
    {
        Grid.ShowColumnChooser();
    }
    
    async void Grid_RefreshData_Click()
    {
        SqlData sqlData = new SqlData();
        GridData = await sqlData.GetBusinessPartnerTaskList(businessPartnerIdSelected);
        SyncBusinessPartnerTasks();
    }
    
    async Task UsePopupEditForm_CheckedChanged(bool value)
    {
        usePopupEditForm = value;
        await Grid.CancelEditAsync();
    }
   
    void Grid_SaveData_Click()
    {
        Grid.SaveChangesAsync();
    }
    
    async void Grid_CancelEdit_Click()
    {
        await Grid.CancelEditAsync();
    }
    
    async Task UseAssignedToDropdownList_CheckedChanged(bool value)
    {
        useAssignedToDropdownList = value;
    }

    #endregion

    // ============================================================ \\

    #region Main Grid Functions

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.Grid.KeyFieldName == "TaskId" && e.ElementType == GridElementType.DataRow && (System.Boolean)e.Grid.GetRowValue(e.VisibleIndex, "isUsed") == true)
        {
            e.Style = "opacity: 0.5";
        }
        @* //bool isShipping = false;
        //if (Grid.GetDataItem(e.VisibleIndex) is ShippingData)
        //{
        //    isShipping = true;
        //}

        // if (e.ElementType == GridElementType.DataRow && (System.Decimal)e.Grid.GetRowValue(e.VisibleIndex, "Total") > 1000)
        // {
        //     e.CssClass = "highlighted-item";
        // }

        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "CustomerName")
        {
            string customerName = (string)e.Grid.GetRowValue(e.VisibleIndex, "CustomerName");
            if (customerName == "MACYS")
                e.Style = "background: green";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "FactoryCancel")
        {
            e.Style = "font-weight: 800";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "PONumber")
        {
            e.Style = "font-weight: 800";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "Units")
        {
            decimal units = (decimal)e.Grid.GetRowValue(e.VisibleIndex, "Units");
            if (units > 100)
                e.Style = "color: red";
        }
        if (e.ElementType == GridElementType.DataCell && (e.Column as DevExpress.Blazor.DxGridDataColumn).FieldName == "SOQty")
        {
            decimal units = (decimal)e.Grid.GetRowValue(e.VisibleIndex, "SOQty");
            if (units > 100)
                e.Style = "color: red";
        } *@
    }
    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        //string[] dateList = { "SODate", "StartDate", "EndDate", "PODate", "ShipmentDate", "ShipToETA", "FactoryCancel" };
        //if (dateList.Contains(e.FieldName)) 
        if (e.Value != null && e.Value.GetType() == typeof(DateTime))
        {
            // e.DisplayText = CustomerList.Where(p => p.CustomerId == ((Customer)e.Value).CustomerId).FirstOrDefault().CompanyName;
            if (DateTime.Parse(e.Value.ToString()) <= new DateTime(1900, 1, 1))
                e.DisplayText = "";
        }
    }

    async void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            if (e.EditModel.GetType() == typeof(BusinessPartnerTask))
            {
                var newObject = (BusinessPartnerTask)e.EditModel;

                newObject.BusinessPartnerTaskId = (GridData.Count() == 0) ? 1 : GridData.Where(x => x.BusinessPartnerTaskId > 0).Select(x => x.BusinessPartnerTaskId).Max() + 1;

                if (addTask == null)
                {
                    newObject.BusinessPartnerId = 0; // SelectedPartner (Lookup)
                    newObject.TaskId = 0;
                    newObject.TaskName = "";
                    newObject.TaskDescription = "";
                    newObject.TaskType = "";
                    newObject.LegacySystemId = 0;
                }
                else
                {
                    newObject.BusinessPartnerId = businessPartnerIdSelected; // SelectedPartner (Lookup)
                    newObject.TaskId = addTask.TaskId;
                    newObject.TaskName = addTask.TaskName;
                    newObject.TaskDescription = addTask.TaskDescription;
                    newObject.TaskType = addTask.TaskType;
                    newObject.LegacySystemId = 0; //addTask.LegacySystemId;

                    addTask = null;

                    //// Did NOT work
                    //Thread.Sleep(1500);
                    //Grid_CancelEdit_Click(); 
                }
            }
        }
        else
        {
            if (e.EditModel.GetType() == typeof(BusinessPartnerTask))
            {
                @* LoadItemGridData(((ShippingData)e.EditModel).PONumber);
                POHeaderIdSelected = ((ShippingData)e.EditModel).POHeaderId;
                //POListGridData = new List<POOpenDetail>();
                POListGridData = new List<ShippingData>();
                POShipmentListGridData = new List<ShippingData>();

                ShippingData poItem = OpenPOShipmentData.Where(c => c.PONumber == ((ShippingData)e.EditModel).PONumber).FirstOrDefault();
                AddToPOListGridData(poItem);
                isVendorEditable = false; *@
            }
        }
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        e.Cancel = true;

        if (e.EditModel.GetType() == typeof(BusinessPartnerTask))
        {
            var savingObject = (BusinessPartnerTask)e.EditModel;

            if (e.IsNew)
                await InsertBusinessPartnerTaskDataAsync(savingObject);
            else
            {
                if (savingObject.CreatedOn == blankDate)
                    await InsertBusinessPartnerTaskDataAsync(savingObject);
                else
                    await UpdateBusinessPartnerTaskDataAsync(savingObject);
            }

            await Grid.CancelEditAsync();
        }
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem.GetType() == typeof(BusinessPartnerTask))
        {
            var deletingObject = (BusinessPartnerTask)e.DataItem;

            await DeleteBusinessPartnerTaskDataAsync(deletingObject);

            await Grid.CancelEditAsync();
        }
    }
    async Task Grid_EditCanceling(GridEditCancelingEventArgs e)
    {
        SyncBusinessPartnerTasks();
    }

    async Task InsertBusinessPartnerTaskDataAsync(BusinessPartnerTask item)
    {
        string query = @"INSERT INTO [PIMS].[dbo].[BusinessPartnerTask] ([BusinessPartnerTaskId],[BusinessPartnerId],[TaskId],[TaskName],[TaskDescription],[TaskType],[Required],[Qty],[AssignedTo],[TaskSequence],[LegacySystemId])
        SELECT {0},{1},{2},'{3}','{4}','{5}',{6},{7},'{8}',{9},{10} ";

        if (item.TaskName == null) item.TaskName = "";
        if (item.TaskDescription == null) item.TaskDescription = "";
        if (item.TaskType == null) item.TaskType = "";
        if (item.Qty == null) item.Qty = 0;
        if (item.AssignedTo == null) item.AssignedTo = "";
        if (item.TaskSequence == null) item.TaskSequence = 0;
        if (item.LegacySystemId == null) item.LegacySystemId = 0;
        
        string fullQuery = string.Format(query, item.BusinessPartnerTaskId, item.BusinessPartnerId, item.TaskId, item.TaskName, item.TaskDescription, item.TaskType, ((item.Required.Value) ? 1 : 0), item.Qty, item.AssignedTo, item.TaskSequence, item.LegacySystemId);

        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        LoadGridData(businessPartnerIdSelected, true);
    }
    async Task UpdateBusinessPartnerTaskDataAsync(BusinessPartnerTask item)
    {
        string query = @"UPDATE [PIMS].[dbo].[BusinessPartnerTask] SET
       [BusinessPartnerId] = {1}
      ,[TaskId] = {2}
      ,[TaskName] = '{3}'
      ,[TaskDescription] = '{4}'
      ,[TaskType] = '{5}'
      ,[Required] = {6}
      ,[Qty] = {7}
      ,[AssignedTo] = '{8}''
      ,[TaskSequence] = {9}
      ,[LegacySystemId] = {10}
      WHERE [BusinessPartnerTaskId] = {0}";

        if (item.TaskName == null) item.TaskName = "";
        if (item.TaskDescription == null) item.TaskDescription = "";
        if (item.TaskType == null) item.TaskType = "";
        if (item.Qty == null) item.Qty = 0;
        if (item.AssignedTo == null) item.AssignedTo = "";
        if (item.TaskSequence == null) item.TaskSequence = 0;
        if (item.LegacySystemId == null) item.LegacySystemId = 0;

        string fullQuery = string.Format(query, item.BusinessPartnerTaskId, item.BusinessPartnerId, item.TaskId, item.TaskName, item.TaskDescription, item.TaskType, ((item.Required.Value) ? 1 : 0), item.Qty, item.AssignedTo, item.TaskSequence, item.LegacySystemId);

        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        LoadGridData(businessPartnerIdSelected, true);
    }
    async Task DeleteBusinessPartnerTaskDataAsync(BusinessPartnerTask item)
    {
        //string query = @"UPDATE [PIMS].[dbo].[BusinessPartnerTask] SET [DeletedOn] = GETDATE() WHERE [BusinessPartnerTaskId] = {0}";
        string query = @"DELETE FROM [PIMS].[dbo].[BusinessPartnerTask] WHERE [BusinessPartnerTaskId] = {0}";
        string fullQuery = string.Format(query, item.BusinessPartnerTaskId);
        using (var uow = new UnitOfWork())
        {
            await uow.ExecuteNonQueryAsync(fullQuery);
        }

        LoadGridData(businessPartnerIdSelected, true);
    }

    public void AddToBusinessPartnerGridData(TasksExt task)
    {
        if (businessPartnerIdSelected > 0 && !task.isUsed)
        {
            if (editOnInsert)
            {
                addTask = task;
                task.isUsed = true;
                Grid.StartEditNewRowAsync();
            }
            else
            {
                // Note: WIll NOT set model to "new"
                var newObject = new BusinessPartnerTask();
                newObject.BusinessPartnerTaskId = (GridData.Count() == 0) ? 1 : GridData.Where(x => x.BusinessPartnerTaskId > 0).Select(x => x.BusinessPartnerTaskId).Max() + 1;
                newObject.BusinessPartnerId = businessPartnerIdSelected; // SelectedPartner (Lookup)
                newObject.TaskId = task.TaskId;
                newObject.TaskName = task.TaskName;
                newObject.TaskDescription = task.TaskDescription;
                newObject.TaskType = task.TaskType;
                newObject.CreatedOn = blankDate;
                newObject.AssignedTo = "";
                newObject.Qty = 1;
                newObject.Required = false;
                newObject.TaskSequence = 0;
                newObject.isSelected = false;
                newObject.isUsed = false;
                newObject.LegacySystemId = 0; //addTask.LegacySystemId;

                //GridData.Append(newObject);
                GridData = GridData.Concat(new[] { newObject });

                //InsertBusinessPartnerTaskDataAsync(newObject);
                //Grid.SaveChangesAsync(); // Doesn't trigger anything

                InsertBusinessPartnerTaskDataAsync(newObject);
            }
        }
        else
        {

        }
    }

    public void CancelAddItem(MouseEventArgs args) { }
    public void UpdateAddItem(MouseEventArgs args) { }

    #endregion

    // ============================================================ \\

}