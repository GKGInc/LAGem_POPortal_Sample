@* @page "/PODetailDataPage" *@
@using DevExpress.Blazor;
@inject IJSRuntime js
@* @inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject UserAccountService userAccountService *@

@using LAGem_POPortal.Data
@using LAGem_POPortal.Models
@using Microsoft.EntityFrameworkCore

<DxTabs>
    <DxTabPage Text="Program Data">
        <br />
        <div class="mb-2">
            PONumber: @POData.PONumber
        </div>

        <DxGrid @ref="ProgramGrid"
                Data="ProgramGridData"
                PageSize="5"
                AutoExpandAllGroupRows="true"
                KeyFieldName="Id"
                ValidationEnabled="false"
                EditMode="GridEditMode.EditRow"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                ShowFilterRow="true"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                CustomizeEditModel="Grid_CustomizeEditModel"
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                TextWrapEnabled="false"
                HighlightRowOnHover="true">
            <Columns>
                @* <DxGridDataColumn FieldName="Id" Caption="Id" Width="40" /> *@
                <DxGridDataColumn FieldName="ProgramName" Caption="Program" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="Product" Caption="Card to Use" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="BoxStyle" Caption="Box Style" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="Accessories" Caption="Accessories" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="TicketEdiStyle" Caption="Ticket / EDI Style# (PID)	" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="TicketInfo" Caption="Ticket Info(Retail Barcode#, SKU)" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="TicketTypeDestination" Caption="Ticket Type + Destination" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="TicketSource" Caption="Ticket Source" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                @* <DxGridDataColumn FieldName="TicketProofApproval" Caption="Ticket Proof Approval" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" MinWidth="100" /> *@
                <DxGridDataColumn FieldName="TicketProofApproval" Caption="Ticket Proof Approval & Order Date + ETA/Tracking" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" MinWidth="100" />
                <DxGridDataColumn FieldName="BoxPONo" Caption="Box PO# + ETA" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="CardsManufacturer" Caption="Cards Manufacturer + PO + ETA" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />

                <DxGridCommandColumn Width="150px"
                                     EditButtonVisible="true"
                                     CancelButtonVisible="true"
                                     SaveButtonVisible="true"
                                     NewButtonVisible="true" />
            </Columns>
        </DxGrid>

    </DxTabPage>

    <DxTabPage Text="Comments Data">
        <br />
        <div class="mb-2">
            PONumber: @POData.PONumber
        </div>

        <DxGrid @ref="CommentsGrid"
                Data="CommentsGridData"
                PageSize="5"
                AutoExpandAllGroupRows="true"
                KeyFieldName="Id"
                ValidationEnabled="false"
                EditMode="GridEditMode.EditRow"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                ShowFilterRow="true"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                CustomizeEditModel="Grid_CustomizeEditModel"
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                TextWrapEnabled="false"
                HighlightRowOnHover="true">
            <Columns>
                @* <DxGridDataColumn FieldName="Id" Caption="Id" Width="40" /> *@
                <DxGridDataColumn FieldName="Comments" Caption="Comments" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="SamplesApproval" Caption="PP samples Approval" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="DisneyStatus" Caption="Disney Status" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="ImageApproval" Caption="TOP Image  Approval" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" MinWidth="100" />

                <DxGridCommandColumn Width="150px"
                                     EditButtonVisible="true"
                                     CancelButtonVisible="true"
                                     SaveButtonVisible="true"
                                     NewButtonVisible="true" />
            </Columns>
        </DxGrid>

    </DxTabPage>

    <DxTabPage Text="Freight Data">
        <br />
        <div class="mb-2">
            PONumber: @POData.PONumber
        </div>

        <DxGrid @ref="FreightGrid"
                Data="FreightGridData"
                PageSize="5"
                AutoExpandAllGroupRows="true"
                KeyFieldName="Id"
                ValidationEnabled="false"
                EditMode="GridEditMode.EditRow"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                CustomizeEditModel="Grid_CustomizeEditModel"
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                TextWrapEnabled="false"
                HighlightRowOnHover="true">
            <Columns>
                @* <DxGridDataColumn FieldName="pk" DisplayFormat="d" GroupIndex="0" /> *@
                @* <DxGridDataColumn FieldName="Id" Caption="Id" Width="20%" /> *@
                <DxGridDataColumn FieldName="ShipMethod" Caption="Ship Method" Width="20%" />
                <DxGridDataColumn FieldName="InvoiceNo" Caption="Invoice No" Width="20%" />
                <DxGridDataColumn FieldName="Tracking" Width="20%" />
                <DxGridDataColumn FieldName="ShipmentQty" Caption="Units Shipped" DisplayFormat="n3" Width="10%" />
                <DxGridDataColumn FieldName="ShipmentDate" Caption="Date Shipped" DisplayFormat="d" Width="20%" />
                <DxGridDataColumn FieldName="ShipToETA" Caption="ETA LA" DisplayFormat="d" Width="20%" />

                <DxGridCommandColumn Width="150px"
                                     EditButtonVisible="true"
                                     CancelButtonVisible="true"
                                     SaveButtonVisible="true"
                                     NewButtonVisible="true" />
                @* <DxGridCommandColumn Width="30px">
                <HeaderTemplate>
                <DxButton IconCssClass="grid-icon grid-icon-new"
                RenderStyle="ButtonRenderStyle.Link"
                aria-label="Add"
                Click="@(() => Grid.StartEditNewRowAsync())" />
                </HeaderTemplate>
                <CellDisplayTemplate>
                <div class="grid-cell-align-center">
                <DxButton IconCssClass="grid-icon grid-icon-delete"
                RenderStyle="ButtonRenderStyle.Link"
                aria-label="Delete"
                Click="@(() => Grid.ShowRowDeleteConfirmation(context.VisibleIndex))"/>
                </div>
                </CellDisplayTemplate>
                <CellEditTemplate>
                <div class="grid-cell-align-center">
                <DxButton Enabled="false"
                CssClass="grid-disabled-button"
                IconCssClass="grid-icon grid-icon-delete"
                aria-label="Delete"
                RenderStyle="ButtonRenderStyle.Link"/>
                </div>
                </CellEditTemplate>
                </DxGridCommandColumn> *@
            </Columns>
        </DxGrid>

    </DxTabPage>

    <DxTabPage Text="Cost Data">
        <br />
        <div class="mb-2">
            PONumber: @POData.PONumber
        </div>

        <DxGrid @ref="CostGrid"
                Data="CostGridData"
                PageSize="5"
                AutoExpandAllGroupRows="true"
                KeyFieldName="Id"
                ValidationEnabled="false"
                EditMode="GridEditMode.EditRow"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                ShowFilterRow="true"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                CustomizeEditModel="Grid_CustomizeEditModel"
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                TextWrapEnabled="false"
                HighlightRowOnHover="true">
            <Columns>
                @* <DxGridDataColumn FieldName="Id" Caption="Id" Width="40" /> *@
                <DxGridDataColumn FieldName="FirstCost" Caption="Jewelry First Cost" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="JewelryCost" Caption="Jewelry Cost Amount" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="PackagingCost" Caption="Packaging Cost Amount" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="TotalCost" Caption="Jewelry + packaging" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" MinWidth="100" />

                <DxGridDataColumn FieldName="Price" Caption="Sell Price" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="SellAmount" Caption="Sell Price Amount" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="AttributeValue" Caption="Metal" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />

                <DxGridDataColumn FieldName="DutyPercent" Caption="Duty %" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="DutyAmount" Caption="Duty Amount" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                
                <DxGridDataColumn FieldName="LaborFreight" Caption="Labor + Freight" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="LaborAmount" Caption="Labor Amount" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="DisneyRoyalty" Caption="Disney Royalty 16%" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="TotalCostLanded" Caption="Total cost landed" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />
                <DxGridDataColumn FieldName="COGPercent" Caption="COG %" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Width="20%" />

                <DxGridCommandColumn Width="150px"
                                     EditButtonVisible="true"
                                     CancelButtonVisible="true"
                                     SaveButtonVisible="true"
                                     NewButtonVisible="true" />
            </Columns>
        </DxGrid>
    </DxTabPage>

    @* <DxTabPage Text="Nothing to See Here">
        <br />
        <p>I Said, nothing to see here!</p>
    </DxTabPage> *@
</DxTabs>


@code {
    // ============================================================ \\

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    IGrid ProgramGrid { get; set; }
    IGrid CommentsGrid { get; set; }
    IGrid FreightGrid { get; set; }
    IGrid CostGrid { get; set; }

    bool AutoCollapseDetailRow { get; set; }
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    [Parameter]
    public POData POData { get; set; }
    // [Parameter]
    // public IEnumerable<Labor> LaborData { get; set; }
    // [Parameter]
    // public IEnumerable<Freight> FreightData { get; set; }

    // object DetailGridData { get; set; }
    // object LocationGridData { get; set; }
    IEnumerable<ProgramData> ProgramGridData { get; set; }
    IEnumerable<CommentsData> CommentsGridData { get; set; }
    IEnumerable<FreightData> FreightGridData { get; set; }
    IEnumerable<CostData> CostGridData { get; set; }

    // ============================================================ \\

    protected async override Task OnInitializedAsync()
    {
        // base.OnInitialized();
        // var user = (await authenticationState).User;
        // if (!user.Identity.IsAuthenticated)
        // {
        //     //NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        //     //navManager.NavigateTo("/Login", true);
        //     //navManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(navManager.Uri)}");
        // }
        // else { }

        // var authstate = await authStateProvider.GetAuthenticationStateAsync();
        // var userClaimsPrincipal = authstate.User; // ClaimsPrincipal
        // var userClaimsPrincipalName = userClaimsPrincipal.Identity.Name;

        // if (userClaimsPrincipalName != null)
        // {
        //     var userData = userAccountService.GetUserAccountFromClaims(userClaimsPrincipal);

        //     if (userData != null)
        //     {
        //         if (userData.Role == "Administrator") { }
        //     }
        //     else { }
        // }

        // DetailGridData = QueueProcesses.Where(i => i.FOID == DepartmentQueue.OID).ToArray();
        // LocationGridData = QueueLocations.Where(i => i.DepartmentQueueOID == DepartmentQueue.OID).ToArray();

        SqlData sqlData = new SqlData();
        // ProgramGridData = await sqlData.GetProgramData(POData.PONumber);
        CommentsGridData = await sqlData.GetCommentsData(POData.PONumber);
        FreightGridData = await sqlData.GetFreightData(POData.PONumber);
        CostGridData = await sqlData.GetCostData(POData.PONumber);

    }

    // ============================================================ \\

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task; // Waits for grid data to load
                                      // Grid.ExpandDetailRow(0);
        }
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            if (e.EditModel.GetType() == typeof(ProgramData))
            {
                var newObject = (ProgramData)e.EditModel;
                // newDepartmentQueueLocations.DepartmentQueueOID = DepartmentQueue.OID;
                // newDepartmentQueueLocations.Workcenter = DepartmentQueue.workcenter;

            }
            if (e.EditModel.GetType() == typeof(FreightData))
            {
                var newObject = (FreightData)e.EditModel;
                // newDepartmentQueueProcesses.FOID = DepartmentQueue.OID;
                // newDepartmentQueueProcesses.workcenter = DepartmentQueue.workcenter;

            }
            // var newEmployee = (EditableEmployee)e.EditModel;
            // newEmployee.FirstName = "John";
            // newEmployee.LastName = "Doe";
        }
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (e.EditModel.GetType() == typeof(ProgramData))
        {
            var editableObject = (ProgramData)e.EditModel;

            // if (e.IsNew)
            //...
        }
        if (e.EditModel.GetType() == typeof(FreightData))
        {
            var editableObject = (FreightData)e.EditModel;

            // if (e.IsNew)
            //...
        }

        // var editableEmployee = (EditableEmployee)e.EditModel;
        // if (e.IsNew)
        //     await NwindDataService.InsertEmployeeAsync(editableEmployee);
        // else
        //     await NwindDataService.UpdateEmployeeAsync((EditableEmployee)e.DataItem, editableEmployee);
        await UpdateDataAsync();
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem.GetType() == typeof(ProgramData))
        {
            var deletingObject = (ProgramData)e.DataItem;

        }
        if (e.DataItem.GetType() == typeof(FreightData))
        {
            var deletingObject = (FreightData)e.DataItem;

        }

        // await NwindDataService.RemoveEmployeeAsync((EditableEmployee)e.DataItem);
        await UpdateDataAsync();
    }
    async Task UpdateDataAsync()
    {
        // DataSource = await NwindDataService.GetEmployeesEditableAsync();
    }

    // ============================================================ \\

    // public void OnDashboardScriptsLoading(ScriptsLoadingEventArgs e)
    // {
    //     //e.Scripts.Add("/parameter-item.js");
    //     e.Scripts.Add("/parameter-item-ver2.js");
    // }

    // private async void RefreshDashboard()
    // {
    //     await js.InvokeVoidAsync("refresh");
    // }

    // public string GetCapitalizedName(string input)
    // {
    //     return input[0].ToString().ToUpper() + input.Substring(1);
    // }

    // public async Task DisplayGreetingAlert()
    // {
    //     //var authState = await authenticationState;
    //     //var message = $"Hello {authState.User.Identity.Name}";

    //     //await js.InvokeVoidAsync("alert", message);
    // }

    // ============================================================ \\
}