@using LAGem_POPortal.Authentication
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<nav class="navbar header-navbar p-0">
    <button class="navbar-toggler bg-primary d-block" @onclick="OnToggleClick">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="ms-3 fw-bold title pe-4">LAGem Portal</div>

    <div>
        <div class="top-row px-4 auth">
            <AuthorizeView Roles="Administrator,User">
                <Authorized>
                    <div style="text-align: right; position: absolute; right: 10px; top: 5px; font-weight: bold;">
                        <div>Hello, @GetCapitalizedName(@context.User.Identity.Name)!</div>
                        <a @onclick="Logout" href="javascript:void(0)">Logout</a>
                    </div>
                </Authorized>
                <NotAuthorized>
                    @* <a href="/login">Login</a> *@
                    @* @AutoAuthenticate() *@
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>


@code {
    // ============================================================ \\

    [Parameter] public bool ToggleOn { get; set; }
    [Parameter] public EventCallback<bool> ToggleOnChanged { get; set; }

    async Task OnToggleClick() => await Toggle();

    async Task Toggle(bool? value = null) {
        var newValue = value ?? !ToggleOn;
        if(ToggleOn != newValue) {
            ToggleOn = newValue;
            await ToggleOnChanged.InvokeAsync(ToggleOn);
        }
    }

    public string GetCapitalizedName(string input)
    {
        return input[0].ToString().ToUpper() + input.Substring(1);
    }

    private async Task Logout()
    {
        var customAutStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAutStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/Login", true);
    }

    private async Task AutoAuthenticate()
    {
        var customAutStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAutStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = "User",
                Password = "gkginc",
                Role = "Administrator",
                PromoCode = "",
                Oid = 0
            });
        // navManager.NavigateTo("/", true);
        string uri = navManager.Uri.Replace(navManager.BaseUri, "");
        navManager.NavigateTo("/" + uri, true);
    }

    // ============================================================ \\
}