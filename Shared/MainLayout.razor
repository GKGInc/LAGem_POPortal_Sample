@using LAGem_POPortal.Authentication
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<DxLayoutBreakpoint MaxWidth="1200" @bind-IsActive="@IsMobileLayout" />

@* <AuthorizeView Roles="Administrator,User">
    <Authorized>
    </Authorized>
    <NotAuthorized>
        @AutoAuthenticate()
    </NotAuthorized>
</AuthorizeView> *@

<div class="page">
    <DxGridLayout CssClass="page-layout">
        <Rows>
            @if(IsMobileLayout) {
                <DxGridLayoutRow Areas="header" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="sidebar" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="content" />
            }
            else {
                <DxGridLayoutRow Areas="header header" Height="auto" />
                <DxGridLayoutRow Areas="@(IsSidebarExpanded ? "sidebar content" : "content content")" />
            }
        </Rows>
        <Columns>
            @if(!IsMobileLayout) {
                <DxGridLayoutColumn Width="auto" />
                <DxGridLayoutColumn />
            }
        </Columns>
        <Items>
            <DxGridLayoutItem Area="header" CssClass="layout-item">
                <Template>
                    <Header @bind-ToggleOn="@IsSidebarExpanded" />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="sidebar" CssClass="layout-item">
                <Template>
                    <NavMenu StateCssClass="@NavMenuCssClass" />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="content" CssClass="content px-4 layout-item">
                <Template>
                    @Body
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
</div> 

<div class="sidebar">
    <NavMenu />
</div>

@* 
<div class="main">
    <div class="top-row px-4 auth">
        <AuthorizeView Roles="Administrator,User">
            <Authorized>
                <div>Hello, @GetCapitalizedName(@context.User.Identity.Name)!</div>
                <a @onclick="Logout" href="javascript:void(0)">Logout</a>
            </Authorized>
            <NotAuthorized>
                <a href="/login">Login</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <div class="content px-4">
        @Body
    </div>
</div>  
*@

@code {
    // ============================================================ \\

    #region Variables

    string? NavMenuCssClass { get; set; }
    bool _isMobileLayout;
    bool IsMobileLayout {
        get => _isMobileLayout;
        set {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded {
        get => _isSidebarExpanded;
        set {
            if(_isSidebarExpanded != value) {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
   
    #endregion

    // ============================================================ \\

    #region Constructors

    // protected override void OnInitialized() {
    //     NavigationManager.LocationChanged += OnLocationChanged;
    // }
    // async void OnLocationChanged(object? sender, LocationChangedEventArgs args) {
    //     if(IsMobileLayout) {
    //         IsSidebarExpanded = false;
    //         await InvokeAsync(StateHasChanged);
    //     }
    // }
    // public void Dispose() {
    //     NavigationManager.LocationChanged -= OnLocationChanged;
    // }

    // ============================================================ \\

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await authenticationState).User;

        if (!user.Identity.IsAuthenticated)
        {
            //NavigationManager.NavigateTo("/Login", true);
            //NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        }
        else
        {

        }

        //AuthenticationState authstate = await authStateProvider.GetAuthenticationStateAsync();
        //bool isAuth = authstate.User.Identity.IsAuthenticated;
        //if (!isAuth)
        //{
        //    //NavigationManager.NavigateTo("/Login", true);
        //}
    }

    #endregion

    // ============================================================ \\

    #region Misc Functions

    public string GetCapitalizedName(string input)
    {
        return input[0].ToString().ToUpper() + input.Substring(1);
    }

    private async Task Logout()
    {
        var customAutStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAutStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/Login", true);
    }

    private async Task AutoAuthenticate()
    {
        var customAutStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAutStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = "User",
                Password = "gkginc",
                Role = "Administrator",
                PromoCode = "",
                Oid = 0
            });
        // navManager.NavigateTo("/", true);
        string uri = navManager.Uri.Replace(navManager.BaseUri, "");
        navManager.NavigateTo("/" + uri, true);
    }
    
    #endregion

    // ============================================================ \\
}